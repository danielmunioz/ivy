Search.setIndex({"docnames": ["_version", "assertions", "assertions/check_all", "assertions/check_all_or_any_fn", "assertions/check_any", "assertions/check_elem_in_list", "assertions/check_equal", "assertions/check_exists", "assertions/check_false", "assertions/check_fill_value_and_dtype_are_compatible", "assertions/check_gather_input_valid", "assertions/check_gather_nd_input_valid", "assertions/check_greater", "assertions/check_inplace_sizes_valid", "assertions/check_isinstance", "assertions/check_less", "assertions/check_one_way_broadcastable", "assertions/check_shape", "assertions/check_true", "backend_handler", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/fn_name_from_version_specific_fn_name", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/set_backend_to_specific_version", "backend_handler/set_jax_backend", "backend_handler/set_numpy_backend", "backend_handler/set_tensorflow_backend", "backend_handler/set_torch_backend", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/applied_libraries", "contributing/building_the_docs", "contributing/helpful_resources", "contributing/open_tasks", "contributing/setting_up", "contributing/the_basics", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/array", "data_classes/array/array/Array", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/experimental", "data_classes/array/experimental/activations", "data_classes/array/experimental/activations/ArrayWithActivationsExperimental", "data_classes/array/experimental/array_methods", "data_classes/array/experimental/array_methods/avg_pool3d", "data_classes/array/experimental/array_methods/dct", "data_classes/array/experimental/array_methods/diagflat", "data_classes/array/experimental/array_methods/dirichlet", "data_classes/array/experimental/array_methods/exp2", "data_classes/array/experimental/array_methods/flatten", "data_classes/array/experimental/array_methods/fliplr", "data_classes/array/experimental/array_methods/flipud", "data_classes/array/experimental/array_methods/float_power", "data_classes/array/experimental/array_methods/fmax", "data_classes/array/experimental/array_methods/fmod", "data_classes/array/experimental/array_methods/gcd", "data_classes/array/experimental/array_methods/heaviside", "data_classes/array/experimental/array_methods/hstack", "data_classes/array/experimental/array_methods/i0", "data_classes/array/experimental/array_methods/isclose", "data_classes/array/experimental/array_methods/isneginf", "data_classes/array/experimental/array_methods/isposinf", "data_classes/array/experimental/array_methods/kron", "data_classes/array/experimental/array_methods/lcm", "data_classes/array/experimental/array_methods/logaddexp2", "data_classes/array/experimental/array_methods/max_pool1d", "data_classes/array/experimental/array_methods/max_pool2d", "data_classes/array/experimental/array_methods/max_pool3d", "data_classes/array/experimental/array_methods/median", "data_classes/array/experimental/array_methods/moveaxis", "data_classes/array/experimental/array_methods/msort", "data_classes/array/experimental/array_methods/nan_to_num", "data_classes/array/experimental/array_methods/nansum", "data_classes/array/experimental/array_methods/pad", "data_classes/array/experimental/array_methods/rot90", "data_classes/array/experimental/array_methods/sinc", "data_classes/array/experimental/array_methods/top_k", "data_classes/array/experimental/array_methods/trapz", "data_classes/array/experimental/array_methods/vstack", "data_classes/array/experimental/conversions", "data_classes/array/experimental/conversions/ArrayWithConversionsExperimental", "data_classes/array/experimental/creation", "data_classes/array/experimental/creation/ArrayWithCreationExperimental", "data_classes/array/experimental/data_type", "data_classes/array/experimental/data_type/ArrayWithData_typeExperimental", "data_classes/array/experimental/device", "data_classes/array/experimental/device/ArrayWithDeviceExperimental", "data_classes/array/experimental/elementwise", "data_classes/array/experimental/elementwise/ArrayWithElementWiseExperimental", "data_classes/array/experimental/general", "data_classes/array/experimental/general/ArrayWithGeneralExperimental", "data_classes/array/experimental/gradients", "data_classes/array/experimental/gradients/ArrayWithGradientsExperimental", "data_classes/array/experimental/image", "data_classes/array/experimental/image/ArrayWithImageExperimental", "data_classes/array/experimental/layers", "data_classes/array/experimental/layers/ArrayWithLayersExperimental", "data_classes/array/experimental/linalg", "data_classes/array/experimental/linalg/ArrayWithLinalgExperimental", "data_classes/array/experimental/losses", "data_classes/array/experimental/losses/ArrayWithLossesExperimental", "data_classes/array/experimental/manipulation", "data_classes/array/experimental/manipulation/ArrayWithManipulationExperimental", "data_classes/array/experimental/norms", "data_classes/array/experimental/norms/ArrayWithNormsExperimental", "data_classes/array/experimental/random", "data_classes/array/experimental/random/ArrayWithRandomExperimental", "data_classes/array/experimental/searching", "data_classes/array/experimental/searching/ArrayWithSearchingExperimental", "data_classes/array/experimental/set", "data_classes/array/experimental/set/ArrayWithSetExperimental", "data_classes/array/experimental/sorting", "data_classes/array/experimental/sorting/ArrayWithSortingExperimental", "data_classes/array/experimental/statistical", "data_classes/array/experimental/statistical/ArrayWithStatisticalExperimental", "data_classes/array/experimental/utility", "data_classes/array/experimental/utility/ArrayWithUtilityExperimental", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linalg", "data_classes/array/linalg/ArrayWithLinalg", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/conversions", "data_classes/container/conversions/ContainerWithConversions", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/experimental", "data_classes/container/experimental/activations", "data_classes/container/experimental/activations/ContainerWithActivationExperimental", "data_classes/container/experimental/container_methods", "data_classes/container/experimental/container_methods/avg_pool2d", "data_classes/container/experimental/container_methods/avg_pool3d", "data_classes/container/experimental/container_methods/dct", "data_classes/container/experimental/container_methods/diagflat", "data_classes/container/experimental/container_methods/dirichlet", "data_classes/container/experimental/container_methods/exp2", "data_classes/container/experimental/container_methods/flatten", "data_classes/container/experimental/container_methods/fliplr", "data_classes/container/experimental/container_methods/flipud", "data_classes/container/experimental/container_methods/float_power", "data_classes/container/experimental/container_methods/fmax", "data_classes/container/experimental/container_methods/fmod", "data_classes/container/experimental/container_methods/gcd", "data_classes/container/experimental/container_methods/hamming_window", "data_classes/container/experimental/container_methods/hann_window", "data_classes/container/experimental/container_methods/heaviside", "data_classes/container/experimental/container_methods/hstack", "data_classes/container/experimental/container_methods/i0", "data_classes/container/experimental/container_methods/isclose", "data_classes/container/experimental/container_methods/isneginf", "data_classes/container/experimental/container_methods/isposinf", "data_classes/container/experimental/container_methods/kaiser_bessel_derived_window", "data_classes/container/experimental/container_methods/kaiser_window", "data_classes/container/experimental/container_methods/kron", "data_classes/container/experimental/container_methods/lcm", "data_classes/container/experimental/container_methods/logaddexp2", "data_classes/container/experimental/container_methods/max_pool1d", "data_classes/container/experimental/container_methods/max_pool2d", "data_classes/container/experimental/container_methods/max_pool3d", "data_classes/container/experimental/container_methods/median", "data_classes/container/experimental/container_methods/moveaxis", "data_classes/container/experimental/container_methods/msort", "data_classes/container/experimental/container_methods/nan_to_num", "data_classes/container/experimental/container_methods/nansum", "data_classes/container/experimental/container_methods/pad", "data_classes/container/experimental/container_methods/rot90", "data_classes/container/experimental/container_methods/sinc", "data_classes/container/experimental/container_methods/static_avg_pool2d", "data_classes/container/experimental/container_methods/static_avg_pool3d", "data_classes/container/experimental/container_methods/static_dct", "data_classes/container/experimental/container_methods/static_diagflat", "data_classes/container/experimental/container_methods/static_dirichlet", "data_classes/container/experimental/container_methods/static_exp2", "data_classes/container/experimental/container_methods/static_flatten", "data_classes/container/experimental/container_methods/static_fliplr", "data_classes/container/experimental/container_methods/static_flipud", "data_classes/container/experimental/container_methods/static_float_power", "data_classes/container/experimental/container_methods/static_fmax", "data_classes/container/experimental/container_methods/static_fmod", "data_classes/container/experimental/container_methods/static_gcd", "data_classes/container/experimental/container_methods/static_hamming_window", "data_classes/container/experimental/container_methods/static_hann_window", "data_classes/container/experimental/container_methods/static_heaviside", "data_classes/container/experimental/container_methods/static_hstack", "data_classes/container/experimental/container_methods/static_i0", "data_classes/container/experimental/container_methods/static_isclose", "data_classes/container/experimental/container_methods/static_isneginf", "data_classes/container/experimental/container_methods/static_isposinf", "data_classes/container/experimental/container_methods/static_kaiser_bessel_derived_window", "data_classes/container/experimental/container_methods/static_kaiser_window", "data_classes/container/experimental/container_methods/static_kron", "data_classes/container/experimental/container_methods/static_lcm", "data_classes/container/experimental/container_methods/static_logaddexp2", "data_classes/container/experimental/container_methods/static_max_pool1d", "data_classes/container/experimental/container_methods/static_max_pool2d", "data_classes/container/experimental/container_methods/static_max_pool3d", "data_classes/container/experimental/container_methods/static_median", "data_classes/container/experimental/container_methods/static_moveaxis", "data_classes/container/experimental/container_methods/static_msort", "data_classes/container/experimental/container_methods/static_nan_to_num", "data_classes/container/experimental/container_methods/static_nansum", "data_classes/container/experimental/container_methods/static_pad", "data_classes/container/experimental/container_methods/static_rot90", "data_classes/container/experimental/container_methods/static_sinc", "data_classes/container/experimental/container_methods/static_top_k", "data_classes/container/experimental/container_methods/static_triu_indices", "data_classes/container/experimental/container_methods/static_vstack", "data_classes/container/experimental/container_methods/top_k", "data_classes/container/experimental/container_methods/triu_indices", "data_classes/container/experimental/container_methods/vstack", "data_classes/container/experimental/conversions", "data_classes/container/experimental/conversions/ContainerWithConversionExperimental", "data_classes/container/experimental/creation", "data_classes/container/experimental/creation/ContainerWithCreationExperimental", "data_classes/container/experimental/data_type", "data_classes/container/experimental/data_type/ContainerWithData_typeExperimental", "data_classes/container/experimental/device", "data_classes/container/experimental/device/ContainerWithDeviceExperimental", "data_classes/container/experimental/elementwise", "data_classes/container/experimental/elementwise/ContainerWithElementWiseExperimental", "data_classes/container/experimental/general", "data_classes/container/experimental/general/ContainerWithGeneralExperimental", "data_classes/container/experimental/gradients", "data_classes/container/experimental/gradients/ContainerWithGradientsExperimental", "data_classes/container/experimental/image", "data_classes/container/experimental/image/ContainerWithImageExperimental", "data_classes/container/experimental/layers", "data_classes/container/experimental/layers/ContainerWithLayersExperimental", "data_classes/container/experimental/linalg", "data_classes/container/experimental/linalg/ContainerWithLinalgExperimental", "data_classes/container/experimental/losses", "data_classes/container/experimental/losses/ContainerWithLossesExperimental", "data_classes/container/experimental/manipulation", "data_classes/container/experimental/manipulation/ContainerWithManipulationExperimental", "data_classes/container/experimental/norms", "data_classes/container/experimental/norms/ContainerWithNormsExperimental", "data_classes/container/experimental/random", "data_classes/container/experimental/random/ContainerWithRandomExperimental", "data_classes/container/experimental/searching", "data_classes/container/experimental/searching/ContainerWithSearchingExperimental", "data_classes/container/experimental/set", "data_classes/container/experimental/set/ContainerWithSetExperimental", "data_classes/container/experimental/sorting", "data_classes/container/experimental/sorting/ContainerWithSortingExperimental", "data_classes/container/experimental/statistical", "data_classes/container/experimental/statistical/ContainerWithStatisticalExperimental", "data_classes/container/experimental/utility", "data_classes/container/experimental/utility/ContainerWithUtilityExperimental", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linalg", "data_classes/container/linalg/ContainerWithLinalg", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/array_api_tests", "deep_dive/arrays", "deep_dive/backend_setting", "deep_dive/containers", "deep_dive/continuous_integration", "deep_dive/data_types", "deep_dive/devices", "deep_dive/docstring_examples", "deep_dive/docstrings", "deep_dive/exception_handling", "deep_dive/formatting", "deep_dive/function_arguments", "deep_dive/function_types", "deep_dive/function_wrapping", "deep_dive/inplace_updates", "deep_dive/ivy_frontends", "deep_dive/ivy_frontends_tests", "deep_dive/ivy_tests", "deep_dive/navigating_the_code", "deep_dive/superset_behaviour", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/from_zero_dim_arrays_to_float", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/integer_arrays_to_float", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/experimental", "functional/experimental/activations", "functional/experimental/compilation", "functional/experimental/constants", "functional/experimental/creation", "functional/experimental/creation/hamming_window", "functional/experimental/creation/hann_window", "functional/experimental/creation/kaiser_bessel_derived_window", "functional/experimental/creation/kaiser_window", "functional/experimental/creation/triu_indices", "functional/experimental/creation/vorbis_window", "functional/experimental/data_type", "functional/experimental/device", "functional/experimental/elementwise", "functional/experimental/elementwise/exp2", "functional/experimental/elementwise/float_power", "functional/experimental/elementwise/fmax", "functional/experimental/elementwise/fmod", "functional/experimental/elementwise/gcd", "functional/experimental/elementwise/isclose", "functional/experimental/elementwise/isneginf", "functional/experimental/elementwise/isposinf", "functional/experimental/elementwise/lcm", "functional/experimental/elementwise/logaddexp2", "functional/experimental/elementwise/nan_to_num", "functional/experimental/elementwise/nansum", "functional/experimental/elementwise/sinc", "functional/experimental/elementwise/trapz", "functional/experimental/general", "functional/experimental/gradients", "functional/experimental/layers", "functional/experimental/layers/avg_pool2d", "functional/experimental/layers/avg_pool3d", "functional/experimental/layers/dct", "functional/experimental/layers/max_pool1d", "functional/experimental/layers/max_pool2d", "functional/experimental/layers/max_pool3d", "functional/experimental/linalg", "functional/experimental/linalg/diagflat", "functional/experimental/linalg/kron", "functional/experimental/losses", "functional/experimental/manipulation", "functional/experimental/manipulation/flatten", "functional/experimental/manipulation/fliplr", "functional/experimental/manipulation/flipud", "functional/experimental/manipulation/heaviside", "functional/experimental/manipulation/hstack", "functional/experimental/manipulation/i0", "functional/experimental/manipulation/moveaxis", "functional/experimental/manipulation/ndenumerate", "functional/experimental/manipulation/ndindex", "functional/experimental/manipulation/pad", "functional/experimental/manipulation/rot90", "functional/experimental/manipulation/top_k", "functional/experimental/manipulation/vstack", "functional/experimental/meta", "functional/experimental/nest", "functional/experimental/norms", "functional/experimental/random", "functional/experimental/random/beta", "functional/experimental/random/dirichlet", "functional/experimental/random/gamma", "functional/experimental/searching", "functional/experimental/set", "functional/experimental/sorting", "functional/experimental/sorting/msort", "functional/experimental/sparse_array", "functional/experimental/sparse_array/is_ivy_sparse_array", "functional/experimental/sparse_array/is_native_sparse_array", "functional/experimental/sparse_array/native_sparse_array", "functional/experimental/sparse_array/native_sparse_array_to_indices_values_and_shape", "functional/experimental/statistical", "functional/experimental/statistical/median", "functional/experimental/utility", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/deserialize", "functional/ivy/activations/gelu", "functional/ivy/activations/gelu/gelu_array", "functional/ivy/activations/gelu/gelu_container", "functional/ivy/activations/gelu/gelu_functional", "functional/ivy/activations/gelu/static_gelu_container", "functional/ivy/activations/get", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/leaky_relu/leaky_relu_array", "functional/ivy/activations/leaky_relu/leaky_relu_container", "functional/ivy/activations/leaky_relu/leaky_relu_functional", "functional/ivy/activations/leaky_relu/static_leaky_relu_container", "functional/ivy/activations/log_softmax", "functional/ivy/activations/log_softmax/log_softmax_array", "functional/ivy/activations/log_softmax/log_softmax_container", "functional/ivy/activations/log_softmax/log_softmax_functional", "functional/ivy/activations/log_softmax/static_log_softmax_container", "functional/ivy/activations/relu", "functional/ivy/activations/relu/relu_array", "functional/ivy/activations/relu/relu_container", "functional/ivy/activations/relu/relu_functional", "functional/ivy/activations/relu/static_relu_container", "functional/ivy/activations/sigmoid", "functional/ivy/activations/sigmoid/sigmoid_array", "functional/ivy/activations/sigmoid/sigmoid_container", "functional/ivy/activations/sigmoid/sigmoid_functional", "functional/ivy/activations/sigmoid/static_sigmoid_container", "functional/ivy/activations/softmax", "functional/ivy/activations/softmax/softmax_array", "functional/ivy/activations/softmax/softmax_container", "functional/ivy/activations/softmax/softmax_functional", "functional/ivy/activations/softmax/static_softmax_container", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/NestedSequence", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/asarray_handle_nestable", "functional/ivy/creation/asarray_infer_device", "functional/ivy/creation/asarray_to_native_arrays_and_back", "functional/ivy/creation/copy_array", "functional/ivy/creation/copy_array/copy_array_array", "functional/ivy/creation/copy_array/copy_array_functional", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/one_hot", "functional/ivy/creation/one_hot/one_hot_array", "functional/ivy/creation/one_hot/one_hot_container", "functional/ivy/creation/one_hot/one_hot_functional", "functional/ivy/creation/one_hot/static_one_hot_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/check_float", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/default_uint_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype/static_dtype_container", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/infer_default_dtype", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_bool_dtype", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_array", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/is_uint_dtype", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/promote_types_of_inputs", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/set_default_uint_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/unset_default_uint_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev/dev_array", "functional/ivy/device/dev/dev_container", "functional/ivy/device/dev/dev_functional", "functional/ivy/device/dev/static_dev_container", "functional/ivy/device/dev_util", "functional/ivy/device/function_supported_devices", "functional/ivy/device/function_unsupported_devices", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/to_device/static_to_device_container", "functional/ivy/device/to_device/to_device_array", "functional/ivy/device/to_device/to_device_container", "functional/ivy/device/to_device/to_device_functional", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acos/static_acos_container", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/acosh/static_acosh_container", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asin/static_asin_container", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan/static_atan_container", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atan2/static_atan2_container", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/atanh/static_atanh_container", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/ceil/static_ceil_container", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cos/static_cos_container", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/cosh/static_cosh_container", "functional/ivy/elementwise/deg2rad", "functional/ivy/elementwise/deg2rad/deg2rad_array", "functional/ivy/elementwise/deg2rad/deg2rad_container", "functional/ivy/elementwise/deg2rad/deg2rad_functional", "functional/ivy/elementwise/deg2rad/static_deg2rad_container", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/equal/static_equal_container", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/erf/static_erf_container", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/exp/static_exp_container", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/expm1/static_expm1_container", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor/static_floor_container", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/floor_divide/static_floor_divide_container", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater/static_greater_container", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/greater_equal/static_greater_equal_container", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isfinite/static_isfinite_container", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isinf/static_isinf_container", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/isnan/static_isnan_container", "functional/ivy/elementwise/isreal", "functional/ivy/elementwise/isreal/isreal_array", "functional/ivy/elementwise/isreal/isreal_container", "functional/ivy/elementwise/isreal/isreal_functional", "functional/ivy/elementwise/isreal/static_isreal_container", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less/static_less_container", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/less_equal/static_less_equal_container", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log/static_log_container", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log10/static_log10_container", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log1p/static_log1p_container", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/log2/static_log2_container", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logaddexp/static_logaddexp_container", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_and/static_logical_and_container", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_not/static_logical_not_container", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_or/static_logical_or_container", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/logical_xor/static_logical_xor_container", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/maximum/maximum_array", "functional/ivy/elementwise/maximum/maximum_container", "functional/ivy/elementwise/maximum/maximum_functional", "functional/ivy/elementwise/maximum/static_maximum_container", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/minimum/minimum_array", "functional/ivy/elementwise/minimum/minimum_container", "functional/ivy/elementwise/minimum/minimum_functional", "functional/ivy/elementwise/minimum/static_minimum_container", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/negative/static_negative_container", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/not_equal/static_not_equal_container", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/positive/static_positive_container", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/pow/static_pow_container", "functional/ivy/elementwise/rad2deg", "functional/ivy/elementwise/rad2deg/rad2deg_array", "functional/ivy/elementwise/rad2deg/rad2deg_container", "functional/ivy/elementwise/rad2deg/rad2deg_functional", "functional/ivy/elementwise/rad2deg/static_rad2deg_container", "functional/ivy/elementwise/reciprocal", "functional/ivy/elementwise/reciprocal/reciprocal_array", "functional/ivy/elementwise/reciprocal/reciprocal_container", "functional/ivy/elementwise/reciprocal/reciprocal_functional", "functional/ivy/elementwise/reciprocal/static_reciprocal_container", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/remainder/static_remainder_container", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/round/static_round_container", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sinh/static_sinh_container", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/sqrt/static_sqrt_container", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/square/static_square_container", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/static_trunc_container", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/elementwise/trunc_divide", "functional/ivy/elementwise/trunc_divide/static_trunc_divide_container", "functional/ivy/elementwise/trunc_divide/trunc_divide_array", "functional/ivy/elementwise/trunc_divide/trunc_divide_container", "functional/ivy/elementwise/trunc_divide/trunc_divide_functional", "functional/ivy/extensions", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/array_equal/array_equal_array", "functional/ivy/general/array_equal/array_equal_functional", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_array", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_container", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_functional", "functional/ivy/general/assert_supports_inplace/static_assert_supports_inplace_container", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_array", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_array", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container", "functional/ivy/general/container_types", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/default/default_array", "functional/ivy/general/default/default_functional", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_rearrange/einops_rearrange_array", "functional/ivy/general/einops_rearrange/einops_rearrange_container", "functional/ivy/general/einops_rearrange/einops_rearrange_functional", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_reduce/einops_reduce_array", "functional/ivy/general/einops_reduce/einops_reduce_container", "functional/ivy/general/einops_reduce/einops_reduce_functional", "functional/ivy/general/einops_reduce/static_einops_reduce_container", "functional/ivy/general/einops_repeat", "functional/ivy/general/einops_repeat/einops_repeat_array", "functional/ivy/general/einops_repeat/einops_repeat_container", "functional/ivy/general/einops_repeat/einops_repeat_functional", "functional/ivy/general/einops_repeat/static_einops_repeat_container", "functional/ivy/general/exists", "functional/ivy/general/exists/exists_array", "functional/ivy/general/exists/exists_functional", "functional/ivy/general/fourier_encode", "functional/ivy/general/fourier_encode/fourier_encode_array", "functional/ivy/general/fourier_encode/fourier_encode_container", "functional/ivy/general/fourier_encode/fourier_encode_functional", "functional/ivy/general/fourier_encode/static_fourier_encode_container", "functional/ivy/general/function_supported_devices_and_dtypes", "functional/ivy/general/function_unsupported_devices_and_dtypes", "functional/ivy/general/gather", "functional/ivy/general/gather/gather_array", "functional/ivy/general/gather/gather_container", "functional/ivy/general/gather/gather_functional", "functional/ivy/general/gather/static_gather_container", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_array_mode", "functional/ivy/general/get_exception_trace_mode", "functional/ivy/general/get_item", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_nestable_mode", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_num_dims/get_num_dims_array", "functional/ivy/general/get_num_dims/get_num_dims_container", "functional/ivy/general/get_num_dims/get_num_dims_functional", "functional/ivy/general/get_num_dims/static_get_num_dims_container", "functional/ivy/general/get_queue_timeout", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/get_tmp_dir", "functional/ivy/general/has_nans", "functional/ivy/general/has_nans/has_nans_array", "functional/ivy/general/has_nans/has_nans_container", "functional/ivy/general/has_nans/has_nans_functional", "functional/ivy/general/has_nans/static_has_nans_container", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_decrement/inplace_decrement_array", "functional/ivy/general/inplace_decrement/inplace_decrement_container", "functional/ivy/general/inplace_decrement/inplace_decrement_functional", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_increment/inplace_increment_array", "functional/ivy/general/inplace_increment/inplace_increment_container", "functional/ivy/general/inplace_increment/inplace_increment_functional", "functional/ivy/general/inplace_increment/static_inplace_increment_container", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_update/inplace_update_array", "functional/ivy/general/inplace_update/inplace_update_container", "functional/ivy/general/inplace_update/inplace_update_functional", "functional/ivy/general/inplace_update/static_inplace_update_container", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_array/is_array_array", "functional/ivy/general/is_array/is_array_container", "functional/ivy/general/is_array/is_array_functional", "functional/ivy/general/is_array/static_is_array_container", "functional/ivy/general/is_frontend_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_array/is_ivy_array_array", "functional/ivy/general/is_ivy_array/is_ivy_array_container", "functional/ivy/general/is_ivy_array/is_ivy_array_functional", "functional/ivy/general/is_ivy_array/static_is_ivy_array_container", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_ivy_container/is_ivy_container_array", "functional/ivy/general/is_ivy_container/is_ivy_container_container", "functional/ivy/general/is_ivy_container/is_ivy_container_functional", "functional/ivy/general/is_ivy_container/static_is_ivy_container_container", "functional/ivy/general/is_native_array", "functional/ivy/general/is_native_array/is_native_array_array", "functional/ivy/general/is_native_array/is_native_array_container", "functional/ivy/general/is_native_array/is_native_array_functional", "functional/ivy/general/is_native_array/static_is_native_array_container", "functional/ivy/general/isscalar", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_flat/scatter_flat_array", "functional/ivy/general/scatter_flat/scatter_flat_container", "functional/ivy/general/scatter_flat/scatter_flat_functional", "functional/ivy/general/scatter_flat/static_scatter_flat_container", "functional/ivy/general/scatter_nd", "functional/ivy/general/scatter_nd/scatter_nd_array", "functional/ivy/general/scatter_nd/scatter_nd_container", "functional/ivy/general/scatter_nd/scatter_nd_functional", "functional/ivy/general/scatter_nd/static_scatter_nd_container", "functional/ivy/general/set_array_mode", "functional/ivy/general/set_exception_trace_mode", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_nestable_mode", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_divide/stable_divide_array", "functional/ivy/general/stable_divide/stable_divide_container", "functional/ivy/general/stable_divide/stable_divide_functional", "functional/ivy/general/stable_divide/static_stable_divide_container", "functional/ivy/general/stable_pow", "functional/ivy/general/stable_pow/stable_pow_array", "functional/ivy/general/stable_pow/stable_pow_container", "functional/ivy/general/stable_pow/stable_pow_functional", "functional/ivy/general/stable_pow/static_stable_pow_container", "functional/ivy/general/supports_inplace_updates", "functional/ivy/general/supports_inplace_updates/static_supports_inplace_updates_container", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_array", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_container", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_functional", "functional/ivy/general/to_ivy_shape", "functional/ivy/general/to_list", "functional/ivy/general/to_list/static_to_list_container", "functional/ivy/general/to_list/to_list_array", "functional/ivy/general/to_list/to_list_container", "functional/ivy/general/to_list/to_list_functional", "functional/ivy/general/to_native_shape", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_array", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/to_scalar/static_to_scalar_container", "functional/ivy/general/to_scalar/to_scalar_array", "functional/ivy/general/to_scalar/to_scalar_container", "functional/ivy/general/to_scalar/to_scalar_functional", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_array_mode", "functional/ivy/general/unset_exception_trace_mode", "functional/ivy/general/unset_nestable_mode", "functional/ivy/general/unset_queue_timeout", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/value_is_nan", "functional/ivy/general/value_is_nan/static_value_is_nan_container", "functional/ivy/general/value_is_nan/value_is_nan_array", "functional/ivy/general/value_is_nan/value_is_nan_container", "functional/ivy/general/value_is_nan/value_is_nan_functional", "functional/ivy/general/vmap", "functional/ivy/gradients", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_array", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/grad", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_array", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_array", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/jac", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_array", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_array", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_array", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_array", "functional/ivy/gradients/stop_gradient/stop_gradient_container", "functional/ivy/gradients/stop_gradient/stop_gradient_functional", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/value_and_grad", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable/static_variable_container", "functional/ivy/gradients/variable/variable_array", "functional/ivy/gradients/variable/variable_container", "functional/ivy/gradients/variable/variable_functional", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/variable_data/static_variable_data_container", "functional/ivy/gradients/variable_data/variable_data_array", "functional/ivy/gradients/variable_data/variable_data_container", "functional/ivy/gradients/variable_data/variable_data_functional", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d/conv1d_array", "functional/ivy/layers/conv1d/conv1d_container", "functional/ivy/layers/conv1d/conv1d_functional", "functional/ivy/layers/conv1d/static_conv1d_container", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_array", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_container", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_functional", "functional/ivy/layers/conv1d_transpose/static_conv1d_transpose_container", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d/conv2d_array", "functional/ivy/layers/conv2d/conv2d_container", "functional/ivy/layers/conv2d/conv2d_functional", "functional/ivy/layers/conv2d/static_conv2d_container", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_container", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_functional", "functional/ivy/layers/conv2d_transpose/static_conv2d_transpose_container", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d/conv3d_array", "functional/ivy/layers/conv3d/conv3d_container", "functional/ivy/layers/conv3d/conv3d_functional", "functional/ivy/layers/conv3d/static_conv3d_container", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_array", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_container", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_functional", "functional/ivy/layers/conv3d_transpose/static_conv3d_transpose_container", "functional/ivy/layers/conv_general_dilated", "functional/ivy/layers/conv_general_transpose", "functional/ivy/layers/deconv_length", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container", "functional/ivy/layers/dropout", "functional/ivy/layers/dropout/dropout_array", "functional/ivy/layers/dropout/dropout_container", "functional/ivy/layers/dropout/dropout_functional", "functional/ivy/layers/dropout/static_dropout_container", "functional/ivy/layers/get_x_data_format", "functional/ivy/layers/handle_padding", "functional/ivy/layers/linear", "functional/ivy/layers/linear/linear_array", "functional/ivy/layers/linear/linear_container", "functional/ivy/layers/linear/linear_functional", "functional/ivy/layers/linear/static_linear_container", "functional/ivy/layers/lstm_update", "functional/ivy/layers/lstm_update/lstm_update_array", "functional/ivy/layers/lstm_update/lstm_update_container", "functional/ivy/layers/lstm_update/lstm_update_functional", "functional/ivy/layers/lstm_update/static_lstm_update_container", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/multi_head_attention/multi_head_attention_array", "functional/ivy/layers/multi_head_attention/multi_head_attention_container", "functional/ivy/layers/multi_head_attention/multi_head_attention_functional", "functional/ivy/layers/multi_head_attention/static_multi_head_attention_container", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_array", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_container", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_functional", "functional/ivy/layers/scaled_dot_product_attention/static_scaled_dot_product_attention_container", "functional/ivy/linalg", "functional/ivy/linalg/cholesky", "functional/ivy/linalg/cholesky/cholesky_array", "functional/ivy/linalg/cholesky/cholesky_container", "functional/ivy/linalg/cholesky/cholesky_functional", "functional/ivy/linalg/cholesky/static_cholesky_container", "functional/ivy/linalg/cross", "functional/ivy/linalg/cross/cross_array", "functional/ivy/linalg/cross/cross_container", "functional/ivy/linalg/cross/cross_functional", "functional/ivy/linalg/cross/static_cross_container", "functional/ivy/linalg/det", "functional/ivy/linalg/det/det_array", "functional/ivy/linalg/det/det_container", "functional/ivy/linalg/det/det_functional", "functional/ivy/linalg/det/static_det_container", "functional/ivy/linalg/diag", "functional/ivy/linalg/diag/diag_array", "functional/ivy/linalg/diag/diag_container", "functional/ivy/linalg/diag/diag_functional", "functional/ivy/linalg/diag/static_diag_container", "functional/ivy/linalg/diagonal", "functional/ivy/linalg/diagonal/diagonal_array", "functional/ivy/linalg/diagonal/diagonal_container", "functional/ivy/linalg/diagonal/diagonal_functional", "functional/ivy/linalg/diagonal/static_diagonal_container", "functional/ivy/linalg/eigh", "functional/ivy/linalg/eigh/eigh_array", "functional/ivy/linalg/eigh/eigh_container", "functional/ivy/linalg/eigh/eigh_functional", "functional/ivy/linalg/eigvalsh", "functional/ivy/linalg/eigvalsh/eigvalsh_array", "functional/ivy/linalg/eigvalsh/eigvalsh_functional", "functional/ivy/linalg/inner", "functional/ivy/linalg/inner/inner_array", "functional/ivy/linalg/inner/inner_container", "functional/ivy/linalg/inner/inner_functional", "functional/ivy/linalg/inner/static_inner_container", "functional/ivy/linalg/inv", "functional/ivy/linalg/inv/inv_array", "functional/ivy/linalg/inv/inv_container", "functional/ivy/linalg/inv/inv_functional", "functional/ivy/linalg/inv/static_inv_container", "functional/ivy/linalg/matmul", "functional/ivy/linalg/matmul/matmul_array", "functional/ivy/linalg/matmul/matmul_container", "functional/ivy/linalg/matmul/matmul_functional", "functional/ivy/linalg/matmul/static_matmul_container", "functional/ivy/linalg/matrix_norm", "functional/ivy/linalg/matrix_norm/matrix_norm_array", "functional/ivy/linalg/matrix_norm/matrix_norm_container", "functional/ivy/linalg/matrix_norm/matrix_norm_functional", "functional/ivy/linalg/matrix_norm/static_matrix_norm_container", "functional/ivy/linalg/matrix_power", "functional/ivy/linalg/matrix_power/matrix_power_container", "functional/ivy/linalg/matrix_power/matrix_power_functional", "functional/ivy/linalg/matrix_power/static_matrix_power_container", "functional/ivy/linalg/matrix_rank", "functional/ivy/linalg/matrix_rank/matrix_rank_array", "functional/ivy/linalg/matrix_rank/matrix_rank_container", "functional/ivy/linalg/matrix_rank/matrix_rank_functional", "functional/ivy/linalg/matrix_rank/static_matrix_rank_container", "functional/ivy/linalg/matrix_transpose", "functional/ivy/linalg/matrix_transpose/matrix_transpose_array", "functional/ivy/linalg/matrix_transpose/matrix_transpose_container", "functional/ivy/linalg/matrix_transpose/matrix_transpose_functional", "functional/ivy/linalg/matrix_transpose/static_matrix_transpose_container", "functional/ivy/linalg/outer", "functional/ivy/linalg/outer/outer_array", "functional/ivy/linalg/outer/outer_container", "functional/ivy/linalg/outer/outer_functional", "functional/ivy/linalg/outer/static_outer_container", "functional/ivy/linalg/pinv", "functional/ivy/linalg/pinv/pinv_array", "functional/ivy/linalg/pinv/pinv_container", "functional/ivy/linalg/pinv/pinv_functional", "functional/ivy/linalg/pinv/static_pinv_container", "functional/ivy/linalg/qr", "functional/ivy/linalg/qr/qr_array", "functional/ivy/linalg/qr/qr_container", "functional/ivy/linalg/qr/qr_functional", "functional/ivy/linalg/qr/static_qr_container", "functional/ivy/linalg/slogdet", "functional/ivy/linalg/slogdet/slogdet_array", "functional/ivy/linalg/slogdet/slogdet_container", "functional/ivy/linalg/slogdet/slogdet_functional", "functional/ivy/linalg/slogdet/static_slogdet_container", "functional/ivy/linalg/solve", "functional/ivy/linalg/solve/solve_array", "functional/ivy/linalg/solve/solve_container", "functional/ivy/linalg/solve/solve_functional", "functional/ivy/linalg/solve/static_solve_container", "functional/ivy/linalg/svd", "functional/ivy/linalg/svd/static_svd_container", "functional/ivy/linalg/svd/svd_array", "functional/ivy/linalg/svd/svd_container", "functional/ivy/linalg/svd/svd_functional", "functional/ivy/linalg/svdvals", "functional/ivy/linalg/svdvals/static_svdvals_container", "functional/ivy/linalg/svdvals/svdvals_array", "functional/ivy/linalg/svdvals/svdvals_container", "functional/ivy/linalg/svdvals/svdvals_functional", "functional/ivy/linalg/tensordot", "functional/ivy/linalg/tensordot/static_tensordot_container", "functional/ivy/linalg/tensordot/tensordot_array", "functional/ivy/linalg/tensordot/tensordot_container", "functional/ivy/linalg/tensordot/tensordot_functional", "functional/ivy/linalg/trace", "functional/ivy/linalg/trace/static_trace_container", "functional/ivy/linalg/trace/trace_array", "functional/ivy/linalg/trace/trace_container", "functional/ivy/linalg/trace/trace_functional", "functional/ivy/linalg/vander", "functional/ivy/linalg/vander/static_vander_container", "functional/ivy/linalg/vander/vander_array", "functional/ivy/linalg/vander/vander_container", "functional/ivy/linalg/vander/vander_functional", "functional/ivy/linalg/vecdot", "functional/ivy/linalg/vecdot/static_vecdot_container", "functional/ivy/linalg/vecdot/vecdot_array", "functional/ivy/linalg/vecdot/vecdot_container", "functional/ivy/linalg/vecdot/vecdot_functional", "functional/ivy/linalg/vector_norm", "functional/ivy/linalg/vector_norm/static_vector_norm_container", "functional/ivy/linalg/vector_norm/vector_norm_array", "functional/ivy/linalg/vector_norm/vector_norm_container", "functional/ivy/linalg/vector_norm/vector_norm_functional", "functional/ivy/linalg/vector_to_skew_symmetric_matrix", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/linear_algebra", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/concat/static_concat_container", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/constant_pad/static_constant_pad_container", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/expand_dims/static_expand_dims_container", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/flip/static_flip_container", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/permute_dims/static_permute_dims_container", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/repeat/static_repeat_container", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/reshape/static_reshape_container", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/split/split_array", "functional/ivy/manipulation/split/split_container", "functional/ivy/manipulation/split/split_functional", "functional/ivy/manipulation/split/static_split_container", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/squeeze/static_squeeze_container", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/stack/static_stack_container", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/static_swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/static_tile_container", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/unstack", "functional/ivy/manipulation/unstack/static_unstack_container", "functional/ivy/manipulation/unstack/unstack_array", "functional/ivy/manipulation/unstack/unstack_container", "functional/ivy/manipulation/unstack/unstack_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/static_zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_argwhere", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/multinomial/multinomial_array", "functional/ivy/random/multinomial/multinomial_container", "functional/ivy/random/multinomial/multinomial_functional", "functional/ivy/random/multinomial/static_multinomial_container", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_array", "functional/ivy/random/randint/randint_container", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_normal/random_normal_array", "functional/ivy/random/random_normal/random_normal_container", "functional/ivy/random/random_normal/random_normal_functional", "functional/ivy/random/random_normal/static_random_normal_container", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_array", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/random/shuffle/shuffle_array", "functional/ivy/random/shuffle/shuffle_container", "functional/ivy/random/shuffle/shuffle_functional", "functional/ivy/random/shuffle/static_shuffle_container", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmax/argmax_array", "functional/ivy/searching/argmax/argmax_container", "functional/ivy/searching/argmax/argmax_functional", "functional/ivy/searching/argmax/static_argmax_container", "functional/ivy/searching/argmin", "functional/ivy/searching/argmin/argmin_array", "functional/ivy/searching/argmin/argmin_container", "functional/ivy/searching/argmin/argmin_functional", "functional/ivy/searching/argmin/static_argmin_container", "functional/ivy/searching/argwhere", "functional/ivy/searching/argwhere/argwhere_array", "functional/ivy/searching/argwhere/argwhere_container", "functional/ivy/searching/argwhere/argwhere_functional", "functional/ivy/searching/argwhere/static_argwhere_container", "functional/ivy/searching/nonzero", "functional/ivy/searching/nonzero/nonzero_array", "functional/ivy/searching/nonzero/nonzero_container", "functional/ivy/searching/nonzero/nonzero_functional", "functional/ivy/searching/nonzero/static_nonzero_container", "functional/ivy/searching/where", "functional/ivy/searching/where/static_where_container", "functional/ivy/searching/where/where_array", "functional/ivy/searching/where/where_container", "functional/ivy/searching/where/where_functional", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_all/static_unique_all_container", "functional/ivy/set/unique_all/unique_all_array", "functional/ivy/set/unique_all/unique_all_container", "functional/ivy/set/unique_all/unique_all_functional", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_inverse/static_unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_array", "functional/ivy/set/unique_inverse/unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_functional", "functional/ivy/set/unique_values", "functional/ivy/set/unique_values/static_unique_values_container", "functional/ivy/set/unique_values/unique_values_array", "functional/ivy/set/unique_values/unique_values_container", "functional/ivy/set/unique_values/unique_values_functional", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/searchsorted", "functional/ivy/sorting/searchsorted/searchsorted_array", "functional/ivy/sorting/searchsorted/searchsorted_container", "functional/ivy/sorting/searchsorted/searchsorted_functional", "functional/ivy/sorting/searchsorted/static_searchsorted_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/cumprod", "functional/ivy/statistical/cumprod/cumprod_array", "functional/ivy/statistical/cumprod/cumprod_container", "functional/ivy/statistical/cumprod/cumprod_functional", "functional/ivy/statistical/cumprod/static_cumprod_container", "functional/ivy/statistical/cumsum", "functional/ivy/statistical/cumsum/cumsum_array", "functional/ivy/statistical/cumsum/cumsum_container", "functional/ivy/statistical/cumsum/cumsum_functional", "functional/ivy/statistical/cumsum/static_cumsum_container", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/static_sum_container", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/static_var_container", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "glossary", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "related_work", "related_work/api_standards", "related_work/compiler_infrastructure", "related_work/exchange_formats", "related_work/frameworks", "related_work/graph_tracers", "related_work/ml_unifying_companies", "related_work/multi_vendor_compiler_frameworks", "related_work/vendor_specific_apis", "related_work/vendor_specific_compilers", "related_work/what_does_ivy_add", "related_work/wrapper_frameworks", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/Initializer", "stateful/initializers/KaimingNormal", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/module/NewTorchModule", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["_version.rst", "assertions.rst", "assertions/check_all.rst", "assertions/check_all_or_any_fn.rst", "assertions/check_any.rst", "assertions/check_elem_in_list.rst", "assertions/check_equal.rst", "assertions/check_exists.rst", "assertions/check_false.rst", "assertions/check_fill_value_and_dtype_are_compatible.rst", "assertions/check_gather_input_valid.rst", "assertions/check_gather_nd_input_valid.rst", "assertions/check_greater.rst", "assertions/check_inplace_sizes_valid.rst", "assertions/check_isinstance.rst", "assertions/check_less.rst", "assertions/check_one_way_broadcastable.rst", "assertions/check_shape.rst", "assertions/check_true.rst", "backend_handler.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/fn_name_from_version_specific_fn_name.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/set_backend_to_specific_version.rst", "backend_handler/set_jax_backend.rst", "backend_handler/set_numpy_backend.rst", "backend_handler/set_tensorflow_backend.rst", "backend_handler/set_torch_backend.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/applied_libraries.rst", "contributing/building_the_docs.rst", "contributing/helpful_resources.rst", "contributing/open_tasks.rst", "contributing/setting_up.rst", "contributing/the_basics.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/array.rst", "data_classes/array/array/Array.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/experimental.rst", "data_classes/array/experimental/activations.rst", "data_classes/array/experimental/activations/ArrayWithActivationsExperimental.rst", "data_classes/array/experimental/array_methods.rst", "data_classes/array/experimental/array_methods/avg_pool3d.rst", "data_classes/array/experimental/array_methods/dct.rst", "data_classes/array/experimental/array_methods/diagflat.rst", "data_classes/array/experimental/array_methods/dirichlet.rst", "data_classes/array/experimental/array_methods/exp2.rst", "data_classes/array/experimental/array_methods/flatten.rst", "data_classes/array/experimental/array_methods/fliplr.rst", "data_classes/array/experimental/array_methods/flipud.rst", "data_classes/array/experimental/array_methods/float_power.rst", "data_classes/array/experimental/array_methods/fmax.rst", "data_classes/array/experimental/array_methods/fmod.rst", "data_classes/array/experimental/array_methods/gcd.rst", "data_classes/array/experimental/array_methods/heaviside.rst", "data_classes/array/experimental/array_methods/hstack.rst", "data_classes/array/experimental/array_methods/i0.rst", "data_classes/array/experimental/array_methods/isclose.rst", "data_classes/array/experimental/array_methods/isneginf.rst", "data_classes/array/experimental/array_methods/isposinf.rst", "data_classes/array/experimental/array_methods/kron.rst", "data_classes/array/experimental/array_methods/lcm.rst", "data_classes/array/experimental/array_methods/logaddexp2.rst", "data_classes/array/experimental/array_methods/max_pool1d.rst", "data_classes/array/experimental/array_methods/max_pool2d.rst", "data_classes/array/experimental/array_methods/max_pool3d.rst", "data_classes/array/experimental/array_methods/median.rst", "data_classes/array/experimental/array_methods/moveaxis.rst", "data_classes/array/experimental/array_methods/msort.rst", "data_classes/array/experimental/array_methods/nan_to_num.rst", "data_classes/array/experimental/array_methods/nansum.rst", "data_classes/array/experimental/array_methods/pad.rst", "data_classes/array/experimental/array_methods/rot90.rst", "data_classes/array/experimental/array_methods/sinc.rst", "data_classes/array/experimental/array_methods/top_k.rst", "data_classes/array/experimental/array_methods/trapz.rst", "data_classes/array/experimental/array_methods/vstack.rst", "data_classes/array/experimental/conversions.rst", "data_classes/array/experimental/conversions/ArrayWithConversionsExperimental.rst", "data_classes/array/experimental/creation.rst", "data_classes/array/experimental/creation/ArrayWithCreationExperimental.rst", "data_classes/array/experimental/data_type.rst", "data_classes/array/experimental/data_type/ArrayWithData_typeExperimental.rst", "data_classes/array/experimental/device.rst", "data_classes/array/experimental/device/ArrayWithDeviceExperimental.rst", "data_classes/array/experimental/elementwise.rst", "data_classes/array/experimental/elementwise/ArrayWithElementWiseExperimental.rst", "data_classes/array/experimental/general.rst", "data_classes/array/experimental/general/ArrayWithGeneralExperimental.rst", "data_classes/array/experimental/gradients.rst", "data_classes/array/experimental/gradients/ArrayWithGradientsExperimental.rst", "data_classes/array/experimental/image.rst", "data_classes/array/experimental/image/ArrayWithImageExperimental.rst", "data_classes/array/experimental/layers.rst", "data_classes/array/experimental/layers/ArrayWithLayersExperimental.rst", "data_classes/array/experimental/linalg.rst", "data_classes/array/experimental/linalg/ArrayWithLinalgExperimental.rst", "data_classes/array/experimental/losses.rst", "data_classes/array/experimental/losses/ArrayWithLossesExperimental.rst", "data_classes/array/experimental/manipulation.rst", "data_classes/array/experimental/manipulation/ArrayWithManipulationExperimental.rst", "data_classes/array/experimental/norms.rst", "data_classes/array/experimental/norms/ArrayWithNormsExperimental.rst", "data_classes/array/experimental/random.rst", "data_classes/array/experimental/random/ArrayWithRandomExperimental.rst", "data_classes/array/experimental/searching.rst", "data_classes/array/experimental/searching/ArrayWithSearchingExperimental.rst", "data_classes/array/experimental/set.rst", "data_classes/array/experimental/set/ArrayWithSetExperimental.rst", "data_classes/array/experimental/sorting.rst", "data_classes/array/experimental/sorting/ArrayWithSortingExperimental.rst", "data_classes/array/experimental/statistical.rst", "data_classes/array/experimental/statistical/ArrayWithStatisticalExperimental.rst", "data_classes/array/experimental/utility.rst", "data_classes/array/experimental/utility/ArrayWithUtilityExperimental.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linalg.rst", "data_classes/array/linalg/ArrayWithLinalg.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/conversions.rst", "data_classes/container/conversions/ContainerWithConversions.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/experimental.rst", "data_classes/container/experimental/activations.rst", "data_classes/container/experimental/activations/ContainerWithActivationExperimental.rst", "data_classes/container/experimental/container_methods.rst", "data_classes/container/experimental/container_methods/avg_pool2d.rst", "data_classes/container/experimental/container_methods/avg_pool3d.rst", "data_classes/container/experimental/container_methods/dct.rst", "data_classes/container/experimental/container_methods/diagflat.rst", "data_classes/container/experimental/container_methods/dirichlet.rst", "data_classes/container/experimental/container_methods/exp2.rst", "data_classes/container/experimental/container_methods/flatten.rst", "data_classes/container/experimental/container_methods/fliplr.rst", "data_classes/container/experimental/container_methods/flipud.rst", "data_classes/container/experimental/container_methods/float_power.rst", "data_classes/container/experimental/container_methods/fmax.rst", "data_classes/container/experimental/container_methods/fmod.rst", "data_classes/container/experimental/container_methods/gcd.rst", "data_classes/container/experimental/container_methods/hamming_window.rst", "data_classes/container/experimental/container_methods/hann_window.rst", "data_classes/container/experimental/container_methods/heaviside.rst", "data_classes/container/experimental/container_methods/hstack.rst", "data_classes/container/experimental/container_methods/i0.rst", "data_classes/container/experimental/container_methods/isclose.rst", "data_classes/container/experimental/container_methods/isneginf.rst", "data_classes/container/experimental/container_methods/isposinf.rst", "data_classes/container/experimental/container_methods/kaiser_bessel_derived_window.rst", "data_classes/container/experimental/container_methods/kaiser_window.rst", "data_classes/container/experimental/container_methods/kron.rst", "data_classes/container/experimental/container_methods/lcm.rst", "data_classes/container/experimental/container_methods/logaddexp2.rst", "data_classes/container/experimental/container_methods/max_pool1d.rst", "data_classes/container/experimental/container_methods/max_pool2d.rst", "data_classes/container/experimental/container_methods/max_pool3d.rst", "data_classes/container/experimental/container_methods/median.rst", "data_classes/container/experimental/container_methods/moveaxis.rst", "data_classes/container/experimental/container_methods/msort.rst", "data_classes/container/experimental/container_methods/nan_to_num.rst", "data_classes/container/experimental/container_methods/nansum.rst", "data_classes/container/experimental/container_methods/pad.rst", "data_classes/container/experimental/container_methods/rot90.rst", "data_classes/container/experimental/container_methods/sinc.rst", "data_classes/container/experimental/container_methods/static_avg_pool2d.rst", "data_classes/container/experimental/container_methods/static_avg_pool3d.rst", "data_classes/container/experimental/container_methods/static_dct.rst", "data_classes/container/experimental/container_methods/static_diagflat.rst", "data_classes/container/experimental/container_methods/static_dirichlet.rst", "data_classes/container/experimental/container_methods/static_exp2.rst", "data_classes/container/experimental/container_methods/static_flatten.rst", "data_classes/container/experimental/container_methods/static_fliplr.rst", "data_classes/container/experimental/container_methods/static_flipud.rst", "data_classes/container/experimental/container_methods/static_float_power.rst", "data_classes/container/experimental/container_methods/static_fmax.rst", "data_classes/container/experimental/container_methods/static_fmod.rst", "data_classes/container/experimental/container_methods/static_gcd.rst", "data_classes/container/experimental/container_methods/static_hamming_window.rst", "data_classes/container/experimental/container_methods/static_hann_window.rst", "data_classes/container/experimental/container_methods/static_heaviside.rst", "data_classes/container/experimental/container_methods/static_hstack.rst", "data_classes/container/experimental/container_methods/static_i0.rst", "data_classes/container/experimental/container_methods/static_isclose.rst", "data_classes/container/experimental/container_methods/static_isneginf.rst", "data_classes/container/experimental/container_methods/static_isposinf.rst", "data_classes/container/experimental/container_methods/static_kaiser_bessel_derived_window.rst", "data_classes/container/experimental/container_methods/static_kaiser_window.rst", "data_classes/container/experimental/container_methods/static_kron.rst", "data_classes/container/experimental/container_methods/static_lcm.rst", "data_classes/container/experimental/container_methods/static_logaddexp2.rst", "data_classes/container/experimental/container_methods/static_max_pool1d.rst", "data_classes/container/experimental/container_methods/static_max_pool2d.rst", "data_classes/container/experimental/container_methods/static_max_pool3d.rst", "data_classes/container/experimental/container_methods/static_median.rst", "data_classes/container/experimental/container_methods/static_moveaxis.rst", "data_classes/container/experimental/container_methods/static_msort.rst", "data_classes/container/experimental/container_methods/static_nan_to_num.rst", "data_classes/container/experimental/container_methods/static_nansum.rst", "data_classes/container/experimental/container_methods/static_pad.rst", "data_classes/container/experimental/container_methods/static_rot90.rst", "data_classes/container/experimental/container_methods/static_sinc.rst", "data_classes/container/experimental/container_methods/static_top_k.rst", "data_classes/container/experimental/container_methods/static_triu_indices.rst", "data_classes/container/experimental/container_methods/static_vstack.rst", "data_classes/container/experimental/container_methods/top_k.rst", "data_classes/container/experimental/container_methods/triu_indices.rst", "data_classes/container/experimental/container_methods/vstack.rst", "data_classes/container/experimental/conversions.rst", "data_classes/container/experimental/conversions/ContainerWithConversionExperimental.rst", "data_classes/container/experimental/creation.rst", "data_classes/container/experimental/creation/ContainerWithCreationExperimental.rst", "data_classes/container/experimental/data_type.rst", "data_classes/container/experimental/data_type/ContainerWithData_typeExperimental.rst", "data_classes/container/experimental/device.rst", "data_classes/container/experimental/device/ContainerWithDeviceExperimental.rst", "data_classes/container/experimental/elementwise.rst", "data_classes/container/experimental/elementwise/ContainerWithElementWiseExperimental.rst", "data_classes/container/experimental/general.rst", "data_classes/container/experimental/general/ContainerWithGeneralExperimental.rst", "data_classes/container/experimental/gradients.rst", "data_classes/container/experimental/gradients/ContainerWithGradientsExperimental.rst", "data_classes/container/experimental/image.rst", "data_classes/container/experimental/image/ContainerWithImageExperimental.rst", "data_classes/container/experimental/layers.rst", "data_classes/container/experimental/layers/ContainerWithLayersExperimental.rst", "data_classes/container/experimental/linalg.rst", "data_classes/container/experimental/linalg/ContainerWithLinalgExperimental.rst", "data_classes/container/experimental/losses.rst", "data_classes/container/experimental/losses/ContainerWithLossesExperimental.rst", "data_classes/container/experimental/manipulation.rst", "data_classes/container/experimental/manipulation/ContainerWithManipulationExperimental.rst", "data_classes/container/experimental/norms.rst", "data_classes/container/experimental/norms/ContainerWithNormsExperimental.rst", "data_classes/container/experimental/random.rst", "data_classes/container/experimental/random/ContainerWithRandomExperimental.rst", "data_classes/container/experimental/searching.rst", "data_classes/container/experimental/searching/ContainerWithSearchingExperimental.rst", "data_classes/container/experimental/set.rst", "data_classes/container/experimental/set/ContainerWithSetExperimental.rst", "data_classes/container/experimental/sorting.rst", "data_classes/container/experimental/sorting/ContainerWithSortingExperimental.rst", "data_classes/container/experimental/statistical.rst", "data_classes/container/experimental/statistical/ContainerWithStatisticalExperimental.rst", "data_classes/container/experimental/utility.rst", "data_classes/container/experimental/utility/ContainerWithUtilityExperimental.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linalg.rst", "data_classes/container/linalg/ContainerWithLinalg.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/array_api_tests.rst", "deep_dive/arrays.rst", "deep_dive/backend_setting.rst", "deep_dive/containers.rst", "deep_dive/continuous_integration.rst", "deep_dive/data_types.rst", "deep_dive/devices.rst", "deep_dive/docstring_examples.rst", "deep_dive/docstrings.rst", "deep_dive/exception_handling.rst", "deep_dive/formatting.rst", "deep_dive/function_arguments.rst", "deep_dive/function_types.rst", "deep_dive/function_wrapping.rst", "deep_dive/inplace_updates.rst", "deep_dive/ivy_frontends.rst", "deep_dive/ivy_frontends_tests.rst", "deep_dive/ivy_tests.rst", "deep_dive/navigating_the_code.rst", "deep_dive/superset_behaviour.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/from_zero_dim_arrays_to_float.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/integer_arrays_to_float.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/experimental.rst", "functional/experimental/activations.rst", "functional/experimental/compilation.rst", "functional/experimental/constants.rst", "functional/experimental/creation.rst", "functional/experimental/creation/hamming_window.rst", "functional/experimental/creation/hann_window.rst", "functional/experimental/creation/kaiser_bessel_derived_window.rst", "functional/experimental/creation/kaiser_window.rst", "functional/experimental/creation/triu_indices.rst", "functional/experimental/creation/vorbis_window.rst", "functional/experimental/data_type.rst", "functional/experimental/device.rst", "functional/experimental/elementwise.rst", "functional/experimental/elementwise/exp2.rst", "functional/experimental/elementwise/float_power.rst", "functional/experimental/elementwise/fmax.rst", "functional/experimental/elementwise/fmod.rst", "functional/experimental/elementwise/gcd.rst", "functional/experimental/elementwise/isclose.rst", "functional/experimental/elementwise/isneginf.rst", "functional/experimental/elementwise/isposinf.rst", "functional/experimental/elementwise/lcm.rst", "functional/experimental/elementwise/logaddexp2.rst", "functional/experimental/elementwise/nan_to_num.rst", "functional/experimental/elementwise/nansum.rst", "functional/experimental/elementwise/sinc.rst", "functional/experimental/elementwise/trapz.rst", "functional/experimental/general.rst", "functional/experimental/gradients.rst", "functional/experimental/layers.rst", "functional/experimental/layers/avg_pool2d.rst", "functional/experimental/layers/avg_pool3d.rst", "functional/experimental/layers/dct.rst", "functional/experimental/layers/max_pool1d.rst", "functional/experimental/layers/max_pool2d.rst", "functional/experimental/layers/max_pool3d.rst", "functional/experimental/linalg.rst", "functional/experimental/linalg/diagflat.rst", "functional/experimental/linalg/kron.rst", "functional/experimental/losses.rst", "functional/experimental/manipulation.rst", "functional/experimental/manipulation/flatten.rst", "functional/experimental/manipulation/fliplr.rst", "functional/experimental/manipulation/flipud.rst", "functional/experimental/manipulation/heaviside.rst", "functional/experimental/manipulation/hstack.rst", "functional/experimental/manipulation/i0.rst", "functional/experimental/manipulation/moveaxis.rst", "functional/experimental/manipulation/ndenumerate.rst", "functional/experimental/manipulation/ndindex.rst", "functional/experimental/manipulation/pad.rst", "functional/experimental/manipulation/rot90.rst", "functional/experimental/manipulation/top_k.rst", "functional/experimental/manipulation/vstack.rst", "functional/experimental/meta.rst", "functional/experimental/nest.rst", "functional/experimental/norms.rst", "functional/experimental/random.rst", "functional/experimental/random/beta.rst", "functional/experimental/random/dirichlet.rst", "functional/experimental/random/gamma.rst", "functional/experimental/searching.rst", "functional/experimental/set.rst", "functional/experimental/sorting.rst", "functional/experimental/sorting/msort.rst", "functional/experimental/sparse_array.rst", "functional/experimental/sparse_array/is_ivy_sparse_array.rst", "functional/experimental/sparse_array/is_native_sparse_array.rst", "functional/experimental/sparse_array/native_sparse_array.rst", "functional/experimental/sparse_array/native_sparse_array_to_indices_values_and_shape.rst", "functional/experimental/statistical.rst", "functional/experimental/statistical/median.rst", "functional/experimental/utility.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/deserialize.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/gelu/gelu_array.rst", "functional/ivy/activations/gelu/gelu_container.rst", "functional/ivy/activations/gelu/gelu_functional.rst", "functional/ivy/activations/gelu/static_gelu_container.rst", "functional/ivy/activations/get.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/leaky_relu/leaky_relu_array.rst", "functional/ivy/activations/leaky_relu/leaky_relu_container.rst", "functional/ivy/activations/leaky_relu/leaky_relu_functional.rst", "functional/ivy/activations/leaky_relu/static_leaky_relu_container.rst", "functional/ivy/activations/log_softmax.rst", "functional/ivy/activations/log_softmax/log_softmax_array.rst", "functional/ivy/activations/log_softmax/log_softmax_container.rst", "functional/ivy/activations/log_softmax/log_softmax_functional.rst", "functional/ivy/activations/log_softmax/static_log_softmax_container.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/relu/relu_array.rst", "functional/ivy/activations/relu/relu_container.rst", "functional/ivy/activations/relu/relu_functional.rst", "functional/ivy/activations/relu/static_relu_container.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/sigmoid/sigmoid_array.rst", "functional/ivy/activations/sigmoid/sigmoid_container.rst", "functional/ivy/activations/sigmoid/sigmoid_functional.rst", "functional/ivy/activations/sigmoid/static_sigmoid_container.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softmax/softmax_array.rst", "functional/ivy/activations/softmax/softmax_container.rst", "functional/ivy/activations/softmax/softmax_functional.rst", "functional/ivy/activations/softmax/static_softmax_container.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/NestedSequence.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/asarray_handle_nestable.rst", "functional/ivy/creation/asarray_infer_device.rst", "functional/ivy/creation/asarray_to_native_arrays_and_back.rst", "functional/ivy/creation/copy_array.rst", "functional/ivy/creation/copy_array/copy_array_array.rst", "functional/ivy/creation/copy_array/copy_array_functional.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/one_hot.rst", "functional/ivy/creation/one_hot/one_hot_array.rst", "functional/ivy/creation/one_hot/one_hot_container.rst", "functional/ivy/creation/one_hot/one_hot_functional.rst", "functional/ivy/creation/one_hot/static_one_hot_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/check_float.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_float_dtype/default_float_dtype_functional.rst", "functional/ivy/data_type/default_float_dtype/static_default_float_dtype_container.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/default_uint_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype/static_dtype_container.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_supported_dtypes/function_supported_dtypes_functional.rst", "functional/ivy/data_type/function_supported_dtypes/static_function_supported_dtypes_container.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes/function_unsupported_dtypes_functional.rst", "functional/ivy/data_type/function_unsupported_dtypes/static_function_unsupported_dtypes_container.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/infer_default_dtype.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_bool_dtype.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_array.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_container.rst", "functional/ivy/data_type/is_bool_dtype/is_bool_dtype_functional.rst", "functional/ivy/data_type/is_bool_dtype/static_is_bool_dtype_container.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_array.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_container.rst", "functional/ivy/data_type/is_uint_dtype/is_uint_dtype_functional.rst", "functional/ivy/data_type/is_uint_dtype/static_is_uint_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/promote_types_of_inputs.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/set_default_uint_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/unset_default_uint_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev/dev_array.rst", "functional/ivy/device/dev/dev_container.rst", "functional/ivy/device/dev/dev_functional.rst", "functional/ivy/device/dev/static_dev_container.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/function_supported_devices.rst", "functional/ivy/device/function_unsupported_devices.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/to_device/static_to_device_container.rst", "functional/ivy/device/to_device/to_device_array.rst", "functional/ivy/device/to_device/to_device_container.rst", "functional/ivy/device/to_device/to_device_functional.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acos/static_acos_container.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/acosh/static_acosh_container.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asin/static_asin_container.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan/static_atan_container.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atan2/static_atan2_container.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/atanh/static_atanh_container.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_and/static_bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_invert/static_bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_left_shift/static_bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_or/static_bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_right_shift/static_bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/bitwise_xor/static_bitwise_xor_container.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/ceil/static_ceil_container.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cos/static_cos_container.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/cosh/static_cosh_container.rst", "functional/ivy/elementwise/deg2rad.rst", "functional/ivy/elementwise/deg2rad/deg2rad_array.rst", "functional/ivy/elementwise/deg2rad/deg2rad_container.rst", "functional/ivy/elementwise/deg2rad/deg2rad_functional.rst", "functional/ivy/elementwise/deg2rad/static_deg2rad_container.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/equal/static_equal_container.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/erf/static_erf_container.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/exp/static_exp_container.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/expm1/static_expm1_container.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor/static_floor_container.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/floor_divide/static_floor_divide_container.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater/static_greater_container.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/greater_equal/static_greater_equal_container.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isfinite/static_isfinite_container.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isinf/static_isinf_container.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/isnan/static_isnan_container.rst", "functional/ivy/elementwise/isreal.rst", "functional/ivy/elementwise/isreal/isreal_array.rst", "functional/ivy/elementwise/isreal/isreal_container.rst", "functional/ivy/elementwise/isreal/isreal_functional.rst", "functional/ivy/elementwise/isreal/static_isreal_container.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less/static_less_container.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/less_equal/static_less_equal_container.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log/static_log_container.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log10/static_log10_container.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log1p/static_log1p_container.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/log2/static_log2_container.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logaddexp/static_logaddexp_container.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_and/static_logical_and_container.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_not/static_logical_not_container.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_or/static_logical_or_container.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/logical_xor/static_logical_xor_container.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/maximum/maximum_array.rst", "functional/ivy/elementwise/maximum/maximum_container.rst", "functional/ivy/elementwise/maximum/maximum_functional.rst", "functional/ivy/elementwise/maximum/static_maximum_container.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/minimum/minimum_array.rst", "functional/ivy/elementwise/minimum/minimum_container.rst", "functional/ivy/elementwise/minimum/minimum_functional.rst", "functional/ivy/elementwise/minimum/static_minimum_container.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/negative/static_negative_container.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/not_equal/static_not_equal_container.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/positive/static_positive_container.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/pow/static_pow_container.rst", "functional/ivy/elementwise/rad2deg.rst", "functional/ivy/elementwise/rad2deg/rad2deg_array.rst", "functional/ivy/elementwise/rad2deg/rad2deg_container.rst", "functional/ivy/elementwise/rad2deg/rad2deg_functional.rst", "functional/ivy/elementwise/rad2deg/static_rad2deg_container.rst", "functional/ivy/elementwise/reciprocal.rst", "functional/ivy/elementwise/reciprocal/reciprocal_array.rst", "functional/ivy/elementwise/reciprocal/reciprocal_container.rst", "functional/ivy/elementwise/reciprocal/reciprocal_functional.rst", "functional/ivy/elementwise/reciprocal/static_reciprocal_container.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/remainder/static_remainder_container.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/round/static_round_container.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sinh/static_sinh_container.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/sqrt/static_sqrt_container.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/square/static_square_container.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/static_trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/elementwise/trunc_divide.rst", "functional/ivy/elementwise/trunc_divide/static_trunc_divide_container.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_array.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_container.rst", "functional/ivy/elementwise/trunc_divide/trunc_divide_functional.rst", "functional/ivy/extensions.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/array_equal/array_equal_array.rst", "functional/ivy/general/array_equal/array_equal_functional.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_array.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_container.rst", "functional/ivy/general/assert_supports_inplace/assert_supports_inplace_functional.rst", "functional/ivy/general/assert_supports_inplace/static_assert_supports_inplace_container.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_array.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_container.rst", "functional/ivy/general/clip_matrix_norm/clip_matrix_norm_functional.rst", "functional/ivy/general/clip_matrix_norm/static_clip_matrix_norm_container.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_array.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/clip_vector_norm/static_clip_vector_norm_container.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/default/default_array.rst", "functional/ivy/general/default/default_functional.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_array.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_container.rst", "functional/ivy/general/einops_rearrange/einops_rearrange_functional.rst", "functional/ivy/general/einops_rearrange/static_einops_rearrange_container.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_reduce/einops_reduce_array.rst", "functional/ivy/general/einops_reduce/einops_reduce_container.rst", "functional/ivy/general/einops_reduce/einops_reduce_functional.rst", "functional/ivy/general/einops_reduce/static_einops_reduce_container.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/einops_repeat/einops_repeat_array.rst", "functional/ivy/general/einops_repeat/einops_repeat_container.rst", "functional/ivy/general/einops_repeat/einops_repeat_functional.rst", "functional/ivy/general/einops_repeat/static_einops_repeat_container.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/exists/exists_array.rst", "functional/ivy/general/exists/exists_functional.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/fourier_encode/fourier_encode_array.rst", "functional/ivy/general/fourier_encode/fourier_encode_container.rst", "functional/ivy/general/fourier_encode/fourier_encode_functional.rst", "functional/ivy/general/fourier_encode/static_fourier_encode_container.rst", "functional/ivy/general/function_supported_devices_and_dtypes.rst", "functional/ivy/general/function_unsupported_devices_and_dtypes.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather/gather_array.rst", "functional/ivy/general/gather/gather_container.rst", "functional/ivy/general/gather/gather_functional.rst", "functional/ivy/general/gather/static_gather_container.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_array_mode.rst", "functional/ivy/general/get_exception_trace_mode.rst", "functional/ivy/general/get_item.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_nestable_mode.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_num_dims/get_num_dims_array.rst", "functional/ivy/general/get_num_dims/get_num_dims_container.rst", "functional/ivy/general/get_num_dims/get_num_dims_functional.rst", "functional/ivy/general/get_num_dims/static_get_num_dims_container.rst", "functional/ivy/general/get_queue_timeout.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/get_tmp_dir.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/has_nans/has_nans_array.rst", "functional/ivy/general/has_nans/has_nans_container.rst", "functional/ivy/general/has_nans/has_nans_functional.rst", "functional/ivy/general/has_nans/static_has_nans_container.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_array.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_container.rst", "functional/ivy/general/inplace_decrement/inplace_decrement_functional.rst", "functional/ivy/general/inplace_decrement/static_inplace_decrement_container.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_increment/inplace_increment_array.rst", "functional/ivy/general/inplace_increment/inplace_increment_container.rst", "functional/ivy/general/inplace_increment/inplace_increment_functional.rst", "functional/ivy/general/inplace_increment/static_inplace_increment_container.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_update/inplace_update_array.rst", "functional/ivy/general/inplace_update/inplace_update_container.rst", "functional/ivy/general/inplace_update/inplace_update_functional.rst", "functional/ivy/general/inplace_update/static_inplace_update_container.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_array/is_array_array.rst", "functional/ivy/general/is_array/is_array_container.rst", "functional/ivy/general/is_array/is_array_functional.rst", "functional/ivy/general/is_array/static_is_array_container.rst", "functional/ivy/general/is_frontend_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_array.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_container.rst", "functional/ivy/general/is_ivy_array/is_ivy_array_functional.rst", "functional/ivy/general/is_ivy_array/static_is_ivy_array_container.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_array.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_container.rst", "functional/ivy/general/is_ivy_container/is_ivy_container_functional.rst", "functional/ivy/general/is_ivy_container/static_is_ivy_container_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/is_native_array/is_native_array_array.rst", "functional/ivy/general/is_native_array/is_native_array_container.rst", "functional/ivy/general/is_native_array/is_native_array_functional.rst", "functional/ivy/general/is_native_array/static_is_native_array_container.rst", "functional/ivy/general/isscalar.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_flat/scatter_flat_array.rst", "functional/ivy/general/scatter_flat/scatter_flat_container.rst", "functional/ivy/general/scatter_flat/scatter_flat_functional.rst", "functional/ivy/general/scatter_flat/static_scatter_flat_container.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/scatter_nd/scatter_nd_array.rst", "functional/ivy/general/scatter_nd/scatter_nd_container.rst", "functional/ivy/general/scatter_nd/scatter_nd_functional.rst", "functional/ivy/general/scatter_nd/static_scatter_nd_container.rst", "functional/ivy/general/set_array_mode.rst", "functional/ivy/general/set_exception_trace_mode.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_nestable_mode.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_divide/stable_divide_array.rst", "functional/ivy/general/stable_divide/stable_divide_container.rst", "functional/ivy/general/stable_divide/stable_divide_functional.rst", "functional/ivy/general/stable_divide/static_stable_divide_container.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/stable_pow/stable_pow_array.rst", "functional/ivy/general/stable_pow/stable_pow_container.rst", "functional/ivy/general/stable_pow/stable_pow_functional.rst", "functional/ivy/general/stable_pow/static_stable_pow_container.rst", "functional/ivy/general/supports_inplace_updates.rst", "functional/ivy/general/supports_inplace_updates/static_supports_inplace_updates_container.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_array.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_container.rst", "functional/ivy/general/supports_inplace_updates/supports_inplace_updates_functional.rst", "functional/ivy/general/to_ivy_shape.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_list/static_to_list_container.rst", "functional/ivy/general/to_list/to_list_array.rst", "functional/ivy/general/to_list/to_list_container.rst", "functional/ivy/general/to_list/to_list_functional.rst", "functional/ivy/general/to_native_shape.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_array.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/to_scalar/static_to_scalar_container.rst", "functional/ivy/general/to_scalar/to_scalar_array.rst", "functional/ivy/general/to_scalar/to_scalar_container.rst", "functional/ivy/general/to_scalar/to_scalar_functional.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_array_mode.rst", "functional/ivy/general/unset_exception_trace_mode.rst", "functional/ivy/general/unset_nestable_mode.rst", "functional/ivy/general/unset_queue_timeout.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/general/value_is_nan/static_value_is_nan_container.rst", "functional/ivy/general/value_is_nan/value_is_nan_array.rst", "functional/ivy/general/value_is_nan/value_is_nan_container.rst", "functional/ivy/general/value_is_nan/value_is_nan_functional.rst", "functional/ivy/general/vmap.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_array.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/grad.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_array.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_array.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/jac.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_array.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_array.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_array.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/stop_gradient/static_stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_array.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_container.rst", "functional/ivy/gradients/stop_gradient/stop_gradient_functional.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/value_and_grad.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable/static_variable_container.rst", "functional/ivy/gradients/variable/variable_array.rst", "functional/ivy/gradients/variable/variable_container.rst", "functional/ivy/gradients/variable/variable_functional.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/variable_data/static_variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_array.rst", "functional/ivy/gradients/variable_data/variable_data_container.rst", "functional/ivy/gradients/variable_data/variable_data_functional.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d/conv1d_array.rst", "functional/ivy/layers/conv1d/conv1d_container.rst", "functional/ivy/layers/conv1d/conv1d_functional.rst", "functional/ivy/layers/conv1d/static_conv1d_container.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_array.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_container.rst", "functional/ivy/layers/conv1d_transpose/conv1d_transpose_functional.rst", "functional/ivy/layers/conv1d_transpose/static_conv1d_transpose_container.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d/conv2d_array.rst", "functional/ivy/layers/conv2d/conv2d_container.rst", "functional/ivy/layers/conv2d/conv2d_functional.rst", "functional/ivy/layers/conv2d/static_conv2d_container.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_container.rst", "functional/ivy/layers/conv2d_transpose/conv2d_transpose_functional.rst", "functional/ivy/layers/conv2d_transpose/static_conv2d_transpose_container.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d/conv3d_array.rst", "functional/ivy/layers/conv3d/conv3d_container.rst", "functional/ivy/layers/conv3d/conv3d_functional.rst", "functional/ivy/layers/conv3d/static_conv3d_container.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_array.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_container.rst", "functional/ivy/layers/conv3d_transpose/conv3d_transpose_functional.rst", "functional/ivy/layers/conv3d_transpose/static_conv3d_transpose_container.rst", "functional/ivy/layers/conv_general_dilated.rst", "functional/ivy/layers/conv_general_transpose.rst", "functional/ivy/layers/deconv_length.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional.rst", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/dropout/dropout_array.rst", "functional/ivy/layers/dropout/dropout_container.rst", "functional/ivy/layers/dropout/dropout_functional.rst", "functional/ivy/layers/dropout/static_dropout_container.rst", "functional/ivy/layers/get_x_data_format.rst", "functional/ivy/layers/handle_padding.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/linear/linear_array.rst", "functional/ivy/layers/linear/linear_container.rst", "functional/ivy/layers/linear/linear_functional.rst", "functional/ivy/layers/linear/static_linear_container.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/lstm_update/lstm_update_array.rst", "functional/ivy/layers/lstm_update/lstm_update_container.rst", "functional/ivy/layers/lstm_update/lstm_update_functional.rst", "functional/ivy/layers/lstm_update/static_lstm_update_container.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_array.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_container.rst", "functional/ivy/layers/multi_head_attention/multi_head_attention_functional.rst", "functional/ivy/layers/multi_head_attention/static_multi_head_attention_container.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_array.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_container.rst", "functional/ivy/layers/scaled_dot_product_attention/scaled_dot_product_attention_functional.rst", "functional/ivy/layers/scaled_dot_product_attention/static_scaled_dot_product_attention_container.rst", "functional/ivy/linalg.rst", "functional/ivy/linalg/cholesky.rst", "functional/ivy/linalg/cholesky/cholesky_array.rst", "functional/ivy/linalg/cholesky/cholesky_container.rst", "functional/ivy/linalg/cholesky/cholesky_functional.rst", "functional/ivy/linalg/cholesky/static_cholesky_container.rst", "functional/ivy/linalg/cross.rst", "functional/ivy/linalg/cross/cross_array.rst", "functional/ivy/linalg/cross/cross_container.rst", "functional/ivy/linalg/cross/cross_functional.rst", "functional/ivy/linalg/cross/static_cross_container.rst", "functional/ivy/linalg/det.rst", "functional/ivy/linalg/det/det_array.rst", "functional/ivy/linalg/det/det_container.rst", "functional/ivy/linalg/det/det_functional.rst", "functional/ivy/linalg/det/static_det_container.rst", "functional/ivy/linalg/diag.rst", "functional/ivy/linalg/diag/diag_array.rst", "functional/ivy/linalg/diag/diag_container.rst", "functional/ivy/linalg/diag/diag_functional.rst", "functional/ivy/linalg/diag/static_diag_container.rst", "functional/ivy/linalg/diagonal.rst", "functional/ivy/linalg/diagonal/diagonal_array.rst", "functional/ivy/linalg/diagonal/diagonal_container.rst", "functional/ivy/linalg/diagonal/diagonal_functional.rst", "functional/ivy/linalg/diagonal/static_diagonal_container.rst", "functional/ivy/linalg/eigh.rst", "functional/ivy/linalg/eigh/eigh_array.rst", "functional/ivy/linalg/eigh/eigh_container.rst", "functional/ivy/linalg/eigh/eigh_functional.rst", "functional/ivy/linalg/eigvalsh.rst", "functional/ivy/linalg/eigvalsh/eigvalsh_array.rst", "functional/ivy/linalg/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linalg/inner.rst", "functional/ivy/linalg/inner/inner_array.rst", "functional/ivy/linalg/inner/inner_container.rst", "functional/ivy/linalg/inner/inner_functional.rst", "functional/ivy/linalg/inner/static_inner_container.rst", "functional/ivy/linalg/inv.rst", "functional/ivy/linalg/inv/inv_array.rst", "functional/ivy/linalg/inv/inv_container.rst", "functional/ivy/linalg/inv/inv_functional.rst", "functional/ivy/linalg/inv/static_inv_container.rst", "functional/ivy/linalg/matmul.rst", "functional/ivy/linalg/matmul/matmul_array.rst", "functional/ivy/linalg/matmul/matmul_container.rst", "functional/ivy/linalg/matmul/matmul_functional.rst", "functional/ivy/linalg/matmul/static_matmul_container.rst", "functional/ivy/linalg/matrix_norm.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_array.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_container.rst", "functional/ivy/linalg/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linalg/matrix_norm/static_matrix_norm_container.rst", "functional/ivy/linalg/matrix_power.rst", "functional/ivy/linalg/matrix_power/matrix_power_container.rst", "functional/ivy/linalg/matrix_power/matrix_power_functional.rst", "functional/ivy/linalg/matrix_power/static_matrix_power_container.rst", "functional/ivy/linalg/matrix_rank.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_array.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_container.rst", "functional/ivy/linalg/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linalg/matrix_rank/static_matrix_rank_container.rst", "functional/ivy/linalg/matrix_transpose.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_container.rst", "functional/ivy/linalg/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linalg/matrix_transpose/static_matrix_transpose_container.rst", "functional/ivy/linalg/outer.rst", "functional/ivy/linalg/outer/outer_array.rst", "functional/ivy/linalg/outer/outer_container.rst", "functional/ivy/linalg/outer/outer_functional.rst", "functional/ivy/linalg/outer/static_outer_container.rst", "functional/ivy/linalg/pinv.rst", "functional/ivy/linalg/pinv/pinv_array.rst", "functional/ivy/linalg/pinv/pinv_container.rst", "functional/ivy/linalg/pinv/pinv_functional.rst", "functional/ivy/linalg/pinv/static_pinv_container.rst", "functional/ivy/linalg/qr.rst", "functional/ivy/linalg/qr/qr_array.rst", "functional/ivy/linalg/qr/qr_container.rst", "functional/ivy/linalg/qr/qr_functional.rst", "functional/ivy/linalg/qr/static_qr_container.rst", "functional/ivy/linalg/slogdet.rst", "functional/ivy/linalg/slogdet/slogdet_array.rst", "functional/ivy/linalg/slogdet/slogdet_container.rst", "functional/ivy/linalg/slogdet/slogdet_functional.rst", "functional/ivy/linalg/slogdet/static_slogdet_container.rst", "functional/ivy/linalg/solve.rst", "functional/ivy/linalg/solve/solve_array.rst", "functional/ivy/linalg/solve/solve_container.rst", "functional/ivy/linalg/solve/solve_functional.rst", "functional/ivy/linalg/solve/static_solve_container.rst", "functional/ivy/linalg/svd.rst", "functional/ivy/linalg/svd/static_svd_container.rst", "functional/ivy/linalg/svd/svd_array.rst", "functional/ivy/linalg/svd/svd_container.rst", "functional/ivy/linalg/svd/svd_functional.rst", "functional/ivy/linalg/svdvals.rst", "functional/ivy/linalg/svdvals/static_svdvals_container.rst", "functional/ivy/linalg/svdvals/svdvals_array.rst", "functional/ivy/linalg/svdvals/svdvals_container.rst", "functional/ivy/linalg/svdvals/svdvals_functional.rst", "functional/ivy/linalg/tensordot.rst", "functional/ivy/linalg/tensordot/static_tensordot_container.rst", "functional/ivy/linalg/tensordot/tensordot_array.rst", "functional/ivy/linalg/tensordot/tensordot_container.rst", "functional/ivy/linalg/tensordot/tensordot_functional.rst", "functional/ivy/linalg/trace.rst", "functional/ivy/linalg/trace/static_trace_container.rst", "functional/ivy/linalg/trace/trace_array.rst", "functional/ivy/linalg/trace/trace_container.rst", "functional/ivy/linalg/trace/trace_functional.rst", "functional/ivy/linalg/vander.rst", "functional/ivy/linalg/vander/static_vander_container.rst", "functional/ivy/linalg/vander/vander_array.rst", "functional/ivy/linalg/vander/vander_container.rst", "functional/ivy/linalg/vander/vander_functional.rst", "functional/ivy/linalg/vecdot.rst", "functional/ivy/linalg/vecdot/static_vecdot_container.rst", "functional/ivy/linalg/vecdot/vecdot_array.rst", "functional/ivy/linalg/vecdot/vecdot_container.rst", "functional/ivy/linalg/vecdot/vecdot_functional.rst", "functional/ivy/linalg/vector_norm.rst", "functional/ivy/linalg/vector_norm/static_vector_norm_container.rst", "functional/ivy/linalg/vector_norm/vector_norm_array.rst", "functional/ivy/linalg/vector_norm/vector_norm_container.rst", "functional/ivy/linalg/vector_norm/vector_norm_functional.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/static_vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_container.rst", "functional/ivy/linalg/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/concat/static_concat_container.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/constant_pad/static_constant_pad_container.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/expand_dims/static_expand_dims_container.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/flip/static_flip_container.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/permute_dims/static_permute_dims_container.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/repeat/static_repeat_container.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/reshape/static_reshape_container.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/split/split_array.rst", "functional/ivy/manipulation/split/split_container.rst", "functional/ivy/manipulation/split/split_functional.rst", "functional/ivy/manipulation/split/static_split_container.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/squeeze/static_squeeze_container.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/stack/static_stack_container.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/static_swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/static_tile_container.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/unstack.rst", "functional/ivy/manipulation/unstack/static_unstack_container.rst", "functional/ivy/manipulation/unstack/unstack_array.rst", "functional/ivy/manipulation/unstack/unstack_container.rst", "functional/ivy/manipulation/unstack/unstack_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/static_zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_argwhere.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/multinomial/multinomial_array.rst", "functional/ivy/random/multinomial/multinomial_container.rst", "functional/ivy/random/multinomial/multinomial_functional.rst", "functional/ivy/random/multinomial/static_multinomial_container.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_array.rst", "functional/ivy/random/randint/randint_container.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_normal/random_normal_array.rst", "functional/ivy/random/random_normal/random_normal_container.rst", "functional/ivy/random/random_normal/random_normal_functional.rst", "functional/ivy/random/random_normal/static_random_normal_container.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_array.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/random/shuffle/shuffle_array.rst", "functional/ivy/random/shuffle/shuffle_container.rst", "functional/ivy/random/shuffle/shuffle_functional.rst", "functional/ivy/random/shuffle/static_shuffle_container.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmax/argmax_array.rst", "functional/ivy/searching/argmax/argmax_container.rst", "functional/ivy/searching/argmax/argmax_functional.rst", "functional/ivy/searching/argmax/static_argmax_container.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/argmin/argmin_array.rst", "functional/ivy/searching/argmin/argmin_container.rst", "functional/ivy/searching/argmin/argmin_functional.rst", "functional/ivy/searching/argmin/static_argmin_container.rst", "functional/ivy/searching/argwhere.rst", "functional/ivy/searching/argwhere/argwhere_array.rst", "functional/ivy/searching/argwhere/argwhere_container.rst", "functional/ivy/searching/argwhere/argwhere_functional.rst", "functional/ivy/searching/argwhere/static_argwhere_container.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/nonzero/nonzero_array.rst", "functional/ivy/searching/nonzero/nonzero_container.rst", "functional/ivy/searching/nonzero/nonzero_functional.rst", "functional/ivy/searching/nonzero/static_nonzero_container.rst", "functional/ivy/searching/where.rst", "functional/ivy/searching/where/static_where_container.rst", "functional/ivy/searching/where/where_array.rst", "functional/ivy/searching/where/where_container.rst", "functional/ivy/searching/where/where_functional.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_all/static_unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_array.rst", "functional/ivy/set/unique_all/unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_functional.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_inverse/static_unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_array.rst", "functional/ivy/set/unique_inverse/unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_functional.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/set/unique_values/static_unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_array.rst", "functional/ivy/set/unique_values/unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_functional.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/searchsorted.rst", "functional/ivy/sorting/searchsorted/searchsorted_array.rst", "functional/ivy/sorting/searchsorted/searchsorted_container.rst", "functional/ivy/sorting/searchsorted/searchsorted_functional.rst", "functional/ivy/sorting/searchsorted/static_searchsorted_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/cumprod.rst", "functional/ivy/statistical/cumprod/cumprod_array.rst", "functional/ivy/statistical/cumprod/cumprod_container.rst", "functional/ivy/statistical/cumprod/cumprod_functional.rst", "functional/ivy/statistical/cumprod/static_cumprod_container.rst", "functional/ivy/statistical/cumsum.rst", "functional/ivy/statistical/cumsum/cumsum_array.rst", "functional/ivy/statistical/cumsum/cumsum_container.rst", "functional/ivy/statistical/cumsum/cumsum_functional.rst", "functional/ivy/statistical/cumsum/static_cumsum_container.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/static_sum_container.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/static_var_container.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "glossary.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "related_work.rst", "related_work/api_standards.rst", "related_work/compiler_infrastructure.rst", "related_work/exchange_formats.rst", "related_work/frameworks.rst", "related_work/graph_tracers.rst", "related_work/ml_unifying_companies.rst", "related_work/multi_vendor_compiler_frameworks.rst", "related_work/vendor_specific_apis.rst", "related_work/vendor_specific_compilers.rst", "related_work/what_does_ivy_add.rst", "related_work/wrapper_frameworks.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/Initializer.rst", "stateful/initializers/KaimingNormal.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/module/NewTorchModule.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["&lt;no title&gt;", "Assertions", "check_all", "check_all_or_any_fn", "check_any", "check_elem_in_list", "check_equal", "check_exists", "check_false", "check_fill_value_and_dtype_are_compatible", "check_gather_input_valid", "check_gather_nd_input_valid", "check_greater", "check_inplace_sizes_valid", "check_isinstance", "check_less", "check_one_way_broadcastable", "check_shape", "check_true", "Backend handler", "choose_random_backend", "clear_backend_stack", "current_backend", "fn_name_from_version_specific_fn_name", "get_backend", "set_backend", "set_backend_to_specific_version", "set_jax_backend", "set_numpy_backend", "set_tensorflow_backend", "set_torch_backend", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Data classes", "Array", "Activations", "ArrayWithActivations", "Array", "&lt;no title&gt;", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "Experimental", "Activations", "ArrayWithActivationsExperimental", "Array methods", "avg_pool3d array", "dct array", "diagflat array", "dirichlet array", "exp2 array", "flatten array", "fliplr array", "flipud array", "float_power array", "fmax array", "fmod array", "gcd array", "heaviside array", "hstack array", "i0 array", "isclose array", "isneginf array", "isposinf array", "kron array", "lcm array", "logaddexp2 array", "max_pool1d array", "max_pool2d array", "max_pool3d array", "median array", "moveaxis array", "msort array", "nan_to_num array", "nansum array", "pad array", "rot90 array", "sinc array", "top_k array", "trapz array", "vstack array", "Conversions", "ArrayWithConversionsExperimental", "Creation", "ArrayWithCreationExperimental", "Data type", "ArrayWithData_typeExperimental", "Device", "ArrayWithDeviceExperimental", "Elementwise", "ArrayWithElementWiseExperimental", "General", "ArrayWithGeneralExperimental", "Gradients", "ArrayWithGradientsExperimental", "Image", "ArrayWithImageExperimental", "Layers", "ArrayWithLayersExperimental", "Linalg", "ArrayWithLinalgExperimental", "Losses", "ArrayWithLossesExperimental", "Manipulation", "ArrayWithManipulationExperimental", "Norms", "ArrayWithNormsExperimental", "Random", "ArrayWithRandomExperimental", "Searching", "ArrayWithSearchingExperimental", "Set", "ArrayWithSetExperimental", "Sorting", "ArrayWithSortingExperimental", "Statistical", "ArrayWithStatisticalExperimental", "Utility", "ArrayWithUtilityExperimental", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linalg", "ArrayWithLinalg", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "&lt;no title&gt;", "Conversions", "ContainerWithConversions", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "Experimental", "Activations", "ContainerWithActivationExperimental", "Container methods", "avg_pool2d container", "avg_pool3d container", "dct container", "diagflat container", "dirichlet container", "exp2 container", "flatten container", "fliplr container", "flipud container", "float_power container", "fmax container", "fmod container", "gcd container", "hamming_window container", "hann_window container", "heaviside container", "hstack container", "i0 container", "isclose container", "isneginf container", "isposinf container", "kaiser_bessel_derived_window container", "kaiser_window container", "kron container", "lcm container", "logaddexp2 container", "max_pool1d container", "max_pool2d container", "max_pool3d container", "median container", "moveaxis container", "msort container", "nan_to_num container", "nansum container", "pad container", "rot90 container", "sinc container", "static_avg_pool2d container", "static_avg_pool3d container", "static_dct container", "static_diagflat container", "static_dirichlet container", "static_exp2 container", "static_flatten container", "static_fliplr container", "static_flipud container", "static_float_power container", "static_fmax container", "static_fmod container", "static_gcd container", "static_hamming_window container", "static_hann_window container", "static_heaviside container", "static_hstack container", "static_i0 container", "static_isclose container", "static_isneginf container", "static_isposinf container", "static_kaiser_bessel_derived_window container", "static_kaiser_window container", "static_kron container", "static_lcm container", "static_logaddexp2 container", "static_max_pool1d container", "static_max_pool2d container", "static_max_pool3d container", "static_median container", "static_moveaxis container", "static_msort container", "static_nan_to_num container", "static_nansum container", "static_pad container", "static_rot90 container", "static_sinc container", "static_top_k container", "static_triu_indices container", "static_vstack container", "top_k container", "triu_indices container", "vstack container", "Conversions", "ContainerWithConversionExperimental", "Creation", "ContainerWithCreationExperimental", "Data type", "ContainerWithData_typeExperimental", "Device", "ContainerWithDeviceExperimental", "Elementwise", "ContainerWithElementWiseExperimental", "General", "ContainerWithGeneralExperimental", "Gradients", "ContainerWithGradientsExperimental", "Image", "ContainerWithImageExperimental", "Layers", "ContainerWithLayersExperimental", "Linalg", "ContainerWithLinalgExperimental", "Losses", "ContainerWithLossesExperimental", "Manipulation", "ContainerWithManipulationExperimental", "Norms", "ContainerWithNormsExperimental", "Random", "ContainerWithRandomExperimental", "Searching", "ContainerWithSearchingExperimental", "Set", "ContainerWithSetExperimental", "Sorting", "ContainerWithSortingExperimental", "Statistical", "ContainerWithStatisticalExperimental", "Utility", "ContainerWithUtilityExperimental", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linalg", "ContainerWithLinalg", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "from_zero_dim_arrays_to_float", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "integer_arrays_to_float", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "Experimental", "Activations", "Compilation", "Constants", "Creation", "hamming_window", "hann_window", "kaiser_bessel_derived_window", "kaiser_window", "triu_indices", "vorbis_window", "Data type", "Device", "Elementwise", "exp2", "float_power", "fmax", "fmod", "gcd", "isclose", "isneginf", "isposinf", "lcm", "logaddexp2", "nan_to_num", "nansum", "sinc", "trapz", "General", "Gradients", "Layers", "avg_pool2d", "avg_pool3d", "dct", "max_pool1d", "max_pool2d", "max_pool3d", "Linalg", "diagflat", "kron", "Losses", "Manipulation", "flatten", "fliplr", "flipud", "heaviside", "hstack", "i0", "moveaxis", "ndenumerate", "ndindex", "pad", "rot90", "top_k", "vstack", "Meta", "Nest", "Norms", "Random", "beta", "dirichlet", "gamma", "Searching", "Set", "Sorting", "msort", "Sparse array", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "Statistical", "median", "Utility", "&lt;no title&gt;", "Activations", "deserialize", "gelu", "ivy.Array.gelu", "ivy.Container.gelu", "ivy.gelu", "ivy.Container.static_gelu", "get", "leaky_relu", "ivy.Array.leaky_relu", "ivy.Container.leaky_relu", "ivy.leaky_relu", "ivy.Container.static_leaky_relu", "log_softmax", "ivy.Array.log_softmax", "ivy.Container.log_softmax", "ivy.log_softmax", "ivy.Container.static_log_softmax", "relu", "ivy.Array.relu", "ivy.Container.relu", "ivy.relu", "ivy.Container.static_relu", "sigmoid", "ivy.Array.sigmoid", "ivy.Container.sigmoid", "ivy.sigmoid", "ivy.Container.static_sigmoid", "softmax", "ivy.Array.softmax", "ivy.Container.softmax", "ivy.softmax", "ivy.Container.static_softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "Compilation", "compile", "Constants", "Creation", "NestedSequence", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.asarray", "ivy.Container.static_asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_to_native_arrays_and_back", "copy_array", "ivy.Array.copy_array", "ivy.copy_array", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "one_hot", "ivy.Array.one_hot", "ivy.Container.one_hot", "ivy.one_hot", "ivy.Container.static_one_hot", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "check_float", "closest_valid_dtype", "default_dtype", "default_float_dtype", "ivy.default_float_dtype", "ivy.Container.static_default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "ivy.Container.dtype", "ivy.dtype", "ivy.Container.static_dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "ivy.function_supported_dtypes", "ivy.Container.static_function_supported_dtypes", "function_unsupported_dtypes", "ivy.function_unsupported_dtypes", "ivy.Container.static_function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "ivy.Array.is_bool_dtype", "ivy.Container.is_bool_dtype", "ivy.is_bool_dtype", "ivy.Container.static_is_bool_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "is_uint_dtype", "ivy.Array.is_uint_dtype", "ivy.Container.is_uint_dtype", "ivy.is_uint_dtype", "ivy.Container.static_is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "Device", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "ivy.Array.dev", "ivy.Container.dev", "ivy.dev", "ivy.Container.static_dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "ivy.Container.static_to_device", "ivy.Array.to_device", "ivy.Container.to_device", "ivy.to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "ivy.Container.static_acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "ivy.Container.static_acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "ivy.Container.static_asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "ivy.Container.static_atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "ivy.Container.static_atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "ivy.Container.static_atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "ivy.Container.static_bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "ivy.Container.static_bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "ivy.Container.static_bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "ivy.Container.static_bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "ivy.Container.static_bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ivy.Container.static_bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "ivy.Container.static_ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "ivy.Container.static_cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "ivy.Container.static_cosh", "deg2rad", "ivy.Array.deg2rad", "ivy.Container.deg2rad", "ivy.deg2rad", "ivy.Container.static_deg2rad", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "ivy.Container.static_equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "ivy.Container.static_erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "ivy.Container.static_exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "ivy.Container.static_expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "ivy.Container.static_floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "ivy.Container.static_floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "ivy.Container.static_greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "ivy.Container.static_greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "ivy.Container.static_isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "ivy.Container.static_isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "ivy.Container.static_isnan", "isreal", "ivy.Array.isreal", "ivy.Container.isreal", "ivy.isreal", "ivy.Container.static_isreal", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "ivy.Container.static_less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "ivy.Container.static_less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "ivy.Container.static_log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "ivy.Container.static_log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "ivy.Container.static_log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "ivy.Container.static_log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "ivy.Container.static_logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "ivy.Container.static_logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "ivy.Container.static_logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "ivy.Container.static_logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "ivy.Container.static_logical_xor", "maximum", "ivy.Array.maximum", "ivy.Container.maximum", "ivy.maximum", "ivy.Container.static_maximum", "minimum", "ivy.Array.minimum", "ivy.Container.minimum", "ivy.minimum", "ivy.Container.static_minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "ivy.Container.static_negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "ivy.Container.static_not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "ivy.Container.static_positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "ivy.Container.static_pow", "rad2deg", "ivy.Array.rad2deg", "ivy.Container.rad2deg", "ivy.rad2deg", "ivy.Container.static_rad2deg", "reciprocal", "ivy.Array.reciprocal", "ivy.Container.reciprocal", "ivy.reciprocal", "ivy.Container.static_reciprocal", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "ivy.Container.static_remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "ivy.Container.static_round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "ivy.Container.static_sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "ivy.Container.static_sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "ivy.Container.static_square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Container.static_trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "trunc_divide", "ivy.Container.static_trunc_divide", "ivy.Array.trunc_divide", "ivy.Container.trunc_divide", "ivy.trunc_divide", "&lt;no title&gt;", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "ivy.Array.array_equal", "ivy.array_equal", "assert_supports_inplace", "ivy.Array.assert_supports_inplace", "ivy.Container.assert_supports_inplace", "ivy.assert_supports_inplace", "ivy.Container.static_assert_supports_inplace", "cache_fn", "clip_matrix_norm", "ivy.Array.clip_matrix_norm", "ivy.Container.clip_matrix_norm", "ivy.clip_matrix_norm", "ivy.Container.static_clip_matrix_norm", "clip_vector_norm", "ivy.Array.clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "ivy.Container.static_clip_vector_norm", "container_types", "current_backend_str", "default", "ivy.Array.default", "ivy.default", "einops_rearrange", "ivy.Array.einops_rearrange", "ivy.Container.einops_rearrange", "ivy.einops_rearrange", "ivy.Container.static_einops_rearrange", "einops_reduce", "ivy.Array.einops_reduce", "ivy.Container.einops_reduce", "ivy.einops_reduce", "ivy.Container.static_einops_reduce", "einops_repeat", "ivy.Array.einops_repeat", "ivy.Container.einops_repeat", "ivy.einops_repeat", "ivy.Container.static_einops_repeat", "exists", "ivy.Array.exists", "ivy.exists", "fourier_encode", "ivy.Array.fourier_encode", "ivy.Container.fourier_encode", "ivy.fourier_encode", "ivy.Container.static_fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "ivy.Array.gather", "ivy.Container.gather", "ivy.gather", "ivy.Container.static_gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_array_mode", "get_exception_trace_mode", "get_item", "get_min_base", "get_min_denominator", "get_nestable_mode", "get_num_dims", "ivy.Array.get_num_dims", "ivy.Container.get_num_dims", "ivy.get_num_dims", "ivy.Container.static_get_num_dims", "get_queue_timeout", "get_referrers_recursive", "get_tmp_dir", "has_nans", "ivy.Array.has_nans", "ivy.Container.has_nans", "ivy.has_nans", "ivy.Container.static_has_nans", "inplace_arrays_supported", "inplace_decrement", "ivy.Array.inplace_decrement", "ivy.Container.inplace_decrement", "ivy.inplace_decrement", "ivy.Container.static_inplace_decrement", "inplace_increment", "ivy.Array.inplace_increment", "ivy.Container.inplace_increment", "ivy.inplace_increment", "ivy.Container.static_inplace_increment", "inplace_update", "ivy.Array.inplace_update", "ivy.Container.inplace_update", "ivy.inplace_update", "ivy.Container.static_inplace_update", "inplace_variables_supported", "is_array", "ivy.Array.is_array", "ivy.Container.is_array", "ivy.is_array", "ivy.Container.static_is_array", "is_frontend_array", "is_ivy_array", "ivy.Array.is_ivy_array", "ivy.Container.is_ivy_array", "ivy.is_ivy_array", "ivy.Container.static_is_ivy_array", "is_ivy_container", "ivy.Array.is_ivy_container", "ivy.Container.is_ivy_container", "ivy.is_ivy_container", "ivy.Container.static_is_ivy_container", "is_native_array", "ivy.Array.is_native_array", "ivy.Container.is_native_array", "ivy.is_native_array", "ivy.Container.static_is_native_array", "isscalar", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "ivy.Array.scatter_flat", "ivy.Container.scatter_flat", "ivy.scatter_flat", "ivy.Container.static_scatter_flat", "scatter_nd", "ivy.Array.scatter_nd", "ivy.Container.scatter_nd", "ivy.scatter_nd", "ivy.Container.static_scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "stable_divide", "ivy.Array.stable_divide", "ivy.Container.stable_divide", "ivy.stable_divide", "ivy.Container.static_stable_divide", "stable_pow", "ivy.Array.stable_pow", "ivy.Container.stable_pow", "ivy.stable_pow", "ivy.Container.static_stable_pow", "supports_inplace_updates", "ivy.Container.static_supports_inplace_updates", "ivy.Array.supports_inplace_updates", "ivy.Container.supports_inplace_updates", "ivy.supports_inplace_updates", "to_ivy_shape", "to_list", "ivy.Container.static_to_list", "ivy.Array.to_list", "ivy.Container.to_list", "ivy.to_list", "to_native_shape", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Array.to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "ivy.Container.static_to_scalar", "ivy.Array.to_scalar", "ivy.Container.to_scalar", "ivy.to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_nestable_mode", "unset_queue_timeout", "unset_shape_array_mode", "value_is_nan", "ivy.Container.static_value_is_nan", "ivy.Array.value_is_nan", "ivy.Container.value_is_nan", "ivy.value_is_nan", "vmap", "Gradients", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "adam_update", "ivy.Array.adam_update", "ivy.Container.adam_update", "ivy.adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "ivy.Array.gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "is_variable", "ivy.Array.is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "jac", "lamb_update", "ivy.Array.lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "lars_update", "ivy.Array.lars_update", "ivy.Container.lars_update", "ivy.lars_update", "optimizer_update", "ivy.Array.optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "set_with_grads", "stop_gradient", "ivy.Container.static_stop_gradient", "ivy.Array.stop_gradient", "ivy.Container.stop_gradient", "ivy.stop_gradient", "unset_with_grads", "value_and_grad", "variable", "ivy.Container.static_variable", "ivy.Array.variable", "ivy.Container.variable", "ivy.variable", "variable_data", "ivy.Container.static_variable_data", "ivy.Array.variable_data", "ivy.Container.variable_data", "ivy.variable_data", "with_grads", "Layers", "conv", "conv1d", "ivy.Array.conv1d", "ivy.Container.conv1d", "ivy.conv1d", "ivy.Container.static_conv1d", "conv1d_transpose", "ivy.Array.conv1d_transpose", "ivy.Container.conv1d_transpose", "ivy.conv1d_transpose", "ivy.Container.static_conv1d_transpose", "conv2d", "ivy.Array.conv2d", "ivy.Container.conv2d", "ivy.conv2d", "ivy.Container.static_conv2d", "conv2d_transpose", "ivy.Container.conv2d_transpose", "ivy.conv2d_transpose", "ivy.Container.static_conv2d_transpose", "conv3d", "ivy.Array.conv3d", "ivy.Container.conv3d", "ivy.conv3d", "ivy.Container.static_conv3d", "conv3d_transpose", "ivy.Array.conv3d_transpose", "ivy.Container.conv3d_transpose", "ivy.conv3d_transpose", "ivy.Container.static_conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "deconv_length", "depthwise_conv2d", "ivy.Array.depthwise_conv2d", "ivy.Container.depthwise_conv2d", "ivy.depthwise_conv2d", "ivy.Container.static_depthwise_conv2d", "dropout", "ivy.Array.dropout", "ivy.Container.dropout", "ivy.dropout", "ivy.Container.static_dropout", "get_x_data_format", "handle_padding", "linear", "ivy.Array.linear", "ivy.Container.linear", "ivy.linear", "ivy.Container.static_linear", "lstm_update", "ivy.Array.lstm_update", "ivy.Container.lstm_update", "ivy.lstm_update", "ivy.Container.static_lstm_update", "multi_head_attention", "ivy.Array.multi_head_attention", "ivy.Container.multi_head_attention", "ivy.multi_head_attention", "ivy.Container.static_multi_head_attention", "scaled_dot_product_attention", "ivy.Array.scaled_dot_product_attention", "ivy.Container.scaled_dot_product_attention", "ivy.scaled_dot_product_attention", "ivy.Container.static_scaled_dot_product_attention", "Linalg", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.Container.cross", "ivy.cross", "ivy.Container.static_cross", "det", "ivy.Array.det", "ivy.Container.det", "ivy.det", "ivy.Container.static_det", "diag", "ivy.Array.diag", "ivy.Container.diag", "ivy.diag", "ivy.Container.static_diag", "diagonal", "ivy.Array.diagonal", "ivy.Container.diagonal", "ivy.diagonal", "ivy.Container.static_diagonal", "eigh", "ivy.Array.eigh", "ivy.Container.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inner", "ivy.Array.inner", "ivy.Container.inner", "ivy.inner", "ivy.Container.static_inner", "inv", "ivy.Array.inv", "ivy.Container.inv", "ivy.inv", "ivy.Container.static_inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "ivy.Container.static_matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.Container.matrix_norm", "ivy.matrix_norm", "ivy.Container.static_matrix_norm", "matrix_power", "ivy.Container.matrix_power", "ivy.matrix_power", "ivy.Container.static_matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.Container.matrix_rank", "ivy.matrix_rank", "ivy.Container.static_matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.Container.matrix_transpose", "ivy.matrix_transpose", "ivy.Container.static_matrix_transpose", "outer", "ivy.Array.outer", "ivy.Container.outer", "ivy.outer", "ivy.Container.static_outer", "pinv", "ivy.Array.pinv", "ivy.Container.pinv", "ivy.pinv", "ivy.Container.static_pinv", "qr", "ivy.Array.qr", "ivy.Container.qr", "ivy.qr", "ivy.Container.static_qr", "slogdet", "ivy.Array.slogdet", "ivy.Container.slogdet", "ivy.slogdet", "ivy.Container.static_slogdet", "solve", "ivy.Array.solve", "ivy.Container.solve", "ivy.solve", "ivy.Container.static_solve", "svd", "ivy.Container.static_svd", "ivy.Array.svd", "ivy.Container.svd", "ivy.svd", "svdvals", "ivy.Container.static_svdvals", "ivy.Array.svdvals", "ivy.Container.svdvals", "ivy.svdvals", "tensordot", "ivy.Container.static_tensordot", "ivy.Array.tensordot", "ivy.Container.tensordot", "ivy.tensordot", "trace", "ivy.Container.static_trace", "ivy.Array.trace", "ivy.Container.trace", "ivy.trace", "vander", "ivy.Container.static_vander", "ivy.Array.vander", "ivy.Container.vander", "ivy.vander", "vecdot", "ivy.Container.static_vecdot", "ivy.Array.vecdot", "ivy.Container.vecdot", "ivy.vecdot", "vector_norm", "ivy.Container.static_vector_norm", "ivy.Array.vector_norm", "ivy.Container.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Container.static_vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.Container.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "&lt;no title&gt;", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "ivy.Container.static_concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "ivy.Container.static_constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "ivy.Container.static_expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "ivy.Container.static_flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "ivy.Container.static_permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "ivy.Container.static_repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "ivy.Container.static_reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "ivy.Array.split", "ivy.Container.split", "ivy.split", "ivy.Container.static_split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "ivy.Container.static_squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "ivy.Container.static_stack", "swapaxes", "ivy.Container.static_swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Container.static_tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "unstack", "ivy.Container.static_unstack", "ivy.Array.unstack", "ivy.Container.unstack", "ivy.unstack", "zero_pad", "ivy.Container.static_zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "ivy.Array.multinomial", "ivy.Container.multinomial", "ivy.multinomial", "ivy.Container.static_multinomial", "randint", "ivy.Array.randint", "ivy.Container.randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "ivy.Array.random_normal", "ivy.Container.random_normal", "ivy.random_normal", "ivy.Container.static_random_normal", "random_uniform", "ivy.Array.random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "ivy.Array.shuffle", "ivy.Container.shuffle", "ivy.shuffle", "ivy.Container.static_shuffle", "Searching", "argmax", "ivy.Array.argmax", "ivy.Container.argmax", "ivy.argmax", "ivy.Container.static_argmax", "argmin", "ivy.Array.argmin", "ivy.Container.argmin", "ivy.argmin", "ivy.Container.static_argmin", "argwhere", "ivy.Array.argwhere", "ivy.Container.argwhere", "ivy.argwhere", "ivy.Container.static_argwhere", "nonzero", "ivy.Array.nonzero", "ivy.Container.nonzero", "ivy.nonzero", "ivy.Container.static_nonzero", "where", "ivy.Container.static_where", "ivy.Array.where", "ivy.Container.where", "ivy.where", "Set", "unique_all", "ivy.Container.static_unique_all", "ivy.Array.unique_all", "ivy.Container.unique_all", "ivy.unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "ivy.Container.static_unique_inverse", "ivy.Array.unique_inverse", "ivy.Container.unique_inverse", "ivy.unique_inverse", "unique_values", "ivy.Container.static_unique_values", "ivy.Array.unique_values", "ivy.Container.unique_values", "ivy.unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "searchsorted", "ivy.Array.searchsorted", "ivy.Container.searchsorted", "ivy.searchsorted", "ivy.Container.static_searchsorted", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "cumprod", "ivy.Array.cumprod", "ivy.Container.cumprod", "ivy.cumprod", "ivy.Container.static_cumprod", "cumsum", "ivy.Array.cumsum", "ivy.Container.cumsum", "ivy.cumsum", "ivy.Container.static_cumsum", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Container.static_sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Container.static_var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Glossary", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "Constant", "FirstLayerSiren", "GlorotUniform", "Initializer", "KaimingNormal", "Ones", "Siren", "Uniform", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "NewTorchModule", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"version": [0, 19, 23, 26, 33, 34, 35, 41, 42, 135, 136, 304, 305, 344, 347, 355, 360, 378, 1750, 1766, 1767], "ivi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 347, 349, 350, 351, 352, 353, 358, 359, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1749, 1750, 1756, 1767, 1810, 1811], "check_al": 1, "result": [1, 2, 4, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 339, 340, 342, 343, 344, 346, 347, 350, 352, 353, 354, 355, 356, 357, 360, 363, 377, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1761, 1763], "messag": [1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 15, 17, 18, 34, 42, 343, 346, 348, 349, 354, 360, 362, 1810, 1811], "one": [1, 2, 19, 24, 26, 34, 35, 40, 41, 42, 54, 55, 109, 110, 135, 136, 139, 140, 147, 148, 151, 152, 157, 158, 159, 160, 172, 173, 178, 179, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 304, 305, 308, 309, 310, 311, 316, 317, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 341, 342, 344, 346, 349, 350, 351, 352, 353, 354, 356, 358, 359, 362, 363, 365, 377, 402, 405, 408, 414, 1750, 1760, 1761, 1763, 1766], "arg": [1, 2, 3, 4, 19, 22, 38, 49, 50, 51, 172, 173, 348, 354, 360, 364], "i": [1, 2, 19, 22, 23, 24, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 376, 377, 393, 395, 398, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 1749, 1750, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "fals": [1, 2, 4, 6, 7, 8, 12, 15, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 123, 124, 135, 136, 139, 140, 141, 142, 147, 148, 151, 152, 157, 158, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 346, 348, 353, 354, 355, 356, 360, 363, 364, 365, 393, 394, 395, 396, 397, 402, 408, 409, 410, 413, 414], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 342, 343, 354, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1759, 1760, 1761, 1762, 1763, 1810, 1811], "check_all_or_any_fn": 1, "fn": [1, 3, 180, 181, 348, 354, 360, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "type": [1, 3, 19, 25, 31, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 349, 350, 352, 353, 355, 356, 357, 358, 360, 362, 363, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1760, 1761, 1764], "all": [1, 3, 4, 33, 34, 35, 36, 37, 38, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 139, 140, 147, 148, 151, 152, 155, 156, 165, 166, 167, 168, 172, 173, 176, 177, 184, 185, 308, 309, 316, 317, 320, 321, 324, 325, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 376, 377, 378, 388, 393, 398, 402, 403, 1749, 1750, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1766, 1767], "limit": [1, 3, 42, 169, 172, 173, 174, 175, 346, 348, 349, 354, 356, 358, 363, 377, 1759, 1760, 1761], "0": [1, 3, 19, 22, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 342, 344, 346, 347, 348, 354, 355, 356, 357, 360, 362, 363, 364, 365, 377, 393, 394, 395, 396, 397, 398, 399, 402, 405, 406, 408, 413, 414, 415, 416, 1750], "must": [1, 3, 8, 18, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 344, 345, 346, 347, 348, 350, 351, 354, 357, 358, 360, 364, 365, 393, 395, 402, 404, 415, 1761, 1767], "exist": [1, 3, 33, 34, 38, 40, 41, 139, 140, 151, 152, 172, 173, 320, 321, 339, 341, 346, 347, 351, 352, 353, 354, 356, 358, 360, 377, 1749, 1758, 1760, 1763, 1766], "accord": [1, 3, 38, 40, 41, 56, 57, 139, 140, 163, 164, 180, 181, 332, 333, 339, 344, 351, 354, 356], "given": [1, 3, 34, 35, 38, 40, 41, 42, 44, 117, 118, 127, 128, 139, 140, 149, 150, 151, 152, 155, 156, 169, 172, 173, 308, 309, 310, 311, 318, 319, 320, 321, 324, 325, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 364, 376, 402, 408, 414, 416, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1762, 1763, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "check_ani": 1, "ar": [1, 4, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 50, 51, 60, 61, 109, 110, 123, 124, 127, 128, 135, 136, 139, 140, 147, 148, 151, 152, 155, 156, 157, 158, 169, 172, 173, 174, 175, 178, 179, 184, 185, 278, 279, 304, 305, 308, 309, 316, 317, 320, 321, 324, 325, 326, 327, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 377, 378, 388, 393, 398, 402, 404, 408, 414, 416, 1749, 1750, 1756, 1757, 1758, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "check_elem_in_list": [1, 354], "elem": [1, 5], "list": [1, 5, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 55, 56, 57, 109, 110, 117, 118, 139, 140, 145, 146, 151, 152, 153, 154, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 302, 303, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 342, 344, 345, 346, 349, 350, 354, 355, 356, 357, 360, 363, 364, 365, 377, 402, 403, 404, 407, 409, 410, 412, 1750, 1760, 1761, 1766], "check_equ": [1, 354], "x1": [1, 6, 12, 15, 16, 17, 44, 47, 48, 56, 57, 60, 61, 109, 110, 123, 124, 147, 148, 157, 158, 180, 181, 184, 185, 278, 279, 292, 293, 308, 309, 316, 317, 326, 327, 330, 331, 339, 344, 346, 348, 350, 354, 402, 404, 405, 406, 407, 411, 412], "x2": [1, 6, 12, 15, 16, 17, 56, 57, 60, 61, 109, 110, 123, 124, 139, 140, 147, 148, 157, 158, 180, 181, 184, 185, 278, 279, 292, 293, 308, 309, 316, 317, 326, 327, 339, 344, 346, 348, 350, 354, 402, 404, 405, 406, 407, 411, 412], "invers": [1, 6, 7, 60, 61, 184, 185, 316, 317, 344, 376], "check_exist": 1, "x": [1, 7, 14, 19, 22, 31, 38, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 342, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 393, 398, 402, 403, 409, 410, 413, 414, 415, 416, 1750], "check_fals": 1, "express": [1, 8, 18, 60, 61, 109, 110, 184, 185, 278, 279, 347, 349, 354, 360, 365, 402, 415, 1760, 1761], "check_fill_value_and_dtype_are_compat": 1, "fill_valu": [1, 9, 54, 55, 157, 158, 178, 179, 326, 327, 344, 355, 357], "dtype": [1, 9, 44, 47, 48, 54, 55, 56, 57, 109, 110, 127, 128, 145, 146, 147, 148, 155, 156, 157, 158, 163, 164, 178, 179, 180, 181, 272, 273, 278, 279, 296, 297, 308, 309, 314, 315, 316, 317, 324, 325, 326, 327, 332, 333, 339, 341, 344, 345, 346, 349, 351, 352, 354, 355, 356, 357, 360, 362, 393, 394, 395, 396, 397, 399, 402, 414, 1750], "check_gather_input_valid": 1, "param": [1, 10, 11, 169, 172, 173, 174, 175, 308, 309, 365], "indic": [1, 10, 11, 38, 54, 55, 117, 118, 123, 124, 139, 140, 145, 146, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 172, 173, 178, 179, 180, 181, 286, 287, 292, 293, 308, 309, 314, 315, 316, 317, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 343, 349, 350, 365, 393, 398, 1750], "axi": [1, 10, 45, 46, 54, 55, 109, 110, 117, 118, 123, 124, 135, 136, 139, 140, 147, 148, 149, 150, 151, 152, 157, 158, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 178, 179, 184, 185, 278, 279, 286, 287, 292, 293, 304, 305, 308, 309, 316, 317, 318, 319, 320, 321, 326, 327, 330, 331, 332, 333, 334, 335, 342, 344, 346, 348, 350, 351, 353, 354, 356, 358, 360, 362, 365, 376, 402, 414, 416], "batch_dim": [1, 10, 11, 139, 140, 308, 309], "check_gather_nd_input_valid": 1, "check_great": 1, "allow_equ": [1, 12, 15, 348], "check_inplace_sizes_valid": 1, "var": [1, 13, 163, 164, 332, 333, 336, 337, 346, 360], "data": [1, 13, 32, 34, 41, 44, 47, 48, 54, 55, 57, 60, 61, 109, 110, 127, 128, 139, 140, 141, 142, 147, 148, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 178, 179, 181, 184, 185, 272, 273, 278, 279, 296, 297, 308, 309, 310, 311, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 342, 345, 347, 350, 351, 352, 353, 355, 357, 358, 360, 362, 393, 394, 395, 396, 397, 399, 402, 415, 1749, 1750, 1760, 1761, 1762, 1764, 1765, 1766], "check_isinst": 1, "allowed_typ": [1, 14], "check_less": [1, 348], "check_one_way_broadcast": 1, "check_shap": [1, 172, 173], "check_tru": 1, "true": [1, 18, 44, 45, 46, 47, 48, 56, 57, 58, 59, 60, 61, 109, 110, 123, 124, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 344, 346, 348, 349, 350, 351, 353, 354, 355, 356, 358, 360, 363, 364, 365, 393, 394, 395, 396, 397, 402, 408, 409, 410, 413, 414], "assert": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 172, 173, 338, 339, 349, 354, 356, 357, 362, 363], "support": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 41, 46, 48, 50, 51, 52, 53, 55, 57, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 139, 140, 141, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 171, 173, 175, 177, 179, 181, 182, 183, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 308, 309, 310, 311, 313, 315, 316, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 340, 342, 345, 346, 347, 350, 351, 352, 353, 355, 356, 358, 359, 360, 362, 363, 365, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 454, 456, 457, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1577, 1578, 1579, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1599, 1600, 1601, 1602, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1754, 1755, 1757, 1759, 1760, 1763, 1765, 1766, 1767, 1770, 1771, 1773, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1797, 1798, 1800, 1802, 1803, 1804, 1805, 1806, 1808, 1809, 1811], "framework": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 40, 41, 46, 48, 49, 50, 51, 52, 53, 55, 57, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 139, 140, 141, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 171, 173, 175, 177, 179, 181, 183, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 310, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 338, 339, 340, 341, 344, 345, 346, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 365, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 454, 456, 457, 458, 459, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1577, 1578, 1579, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1599, 1600, 1601, 1602, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1754, 1755, 1756, 1757, 1758, 1759, 1761, 1764, 1770, 1771, 1773, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1797, 1798, 1800, 1802, 1803, 1804, 1805, 1806, 1808, 1809, 1811], "class": [19, 25, 31, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 344, 345, 346, 347, 350, 355, 356, 358, 360, 361, 363, 364, 365, 375, 376, 377, 1749, 1750, 1758, 1760, 1761, 1767], "backend_handl": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 341, 360, 1750], "contextmanag": 19, "modul": [19, 22, 24, 26, 35, 38, 41, 167, 168, 169, 172, 173, 174, 175, 336, 337, 340, 341, 349, 351, 353, 354, 356, 360, 361, 363, 365, 376, 377, 1750, 1760, 1761, 1763], "base": [19, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 343, 344, 348, 350, 352, 355, 356, 357, 360, 376, 393, 398, 402, 404, 1760, 1765, 1767], "object": [19, 155, 156, 169, 172, 173, 174, 175, 176, 177, 182, 183, 184, 185, 308, 309, 324, 325, 342, 352, 354, 356, 362, 365, 1760, 1766], "__init__": [19, 22, 24, 40, 44, 47, 48, 169, 172, 173, 174, 175, 341, 344, 348, 354, 357, 360, 362, 363, 364, 365, 1750], "choose_random_backend": 19, "exclud": [19, 20, 163, 164, 332, 333, 346, 360, 393, 398], "none": [19, 20, 24, 31, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "clear_backend_stack": 19, "current_backend": [19, 348, 351, 354, 357, 360], "kwarg": [19, 22, 49, 50, 51, 123, 124, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 348, 354, 360, 364], "return": [19, 22, 23, 24, 26, 31, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1761], "current": [19, 22, 23, 24, 31, 35, 38, 40, 41, 42, 139, 140, 169, 172, 173, 174, 175, 339, 341, 342, 344, 345, 348, 351, 352, 354, 355, 358, 360, 365, 376, 377, 1750, 1760, 1766, 1767], "prioriti": [19, 22, 42, 172, 173, 353], "global_backend": [19, 22], "argument": [19, 22, 24, 33, 40, 49, 50, 51, 52, 53, 60, 61, 139, 140, 169, 172, 173, 174, 175, 176, 177, 184, 185, 308, 309, 338, 339, 340, 341, 342, 346, 347, 349, 351, 352, 355, 356, 357, 358, 360, 362, 363, 393, 398, 1749, 1760], "": [19, 22, 24, 25, 31, 34, 35, 36, 37, 38, 40, 41, 42, 54, 55, 109, 110, 139, 140, 141, 142, 147, 148, 163, 164, 278, 279, 292, 293, 308, 309, 310, 311, 316, 317, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 376, 377, 402, 408, 1749, 1750, 1756, 1759, 1760, 1761, 1763, 1764, 1765, 1766], "paramet": [19, 22, 23, 24, 26, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 347, 348, 350, 352, 356, 357, 360, 362, 363, 376, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1761], "from": [19, 22, 24, 25, 33, 34, 35, 36, 38, 39, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 393, 398, 402, 404, 405, 1749, 1750, 1756, 1758, 1759, 1760, 1761, 1762, 1764, 1765, 1766, 1767], "which": [19, 22, 23, 24, 26, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 54, 55, 56, 57, 109, 110, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 376, 377, 393, 398, 402, 404, 408, 414, 416, 1749, 1750, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1765, 1766, 1767], "try": [19, 22, 32, 34, 35, 38, 40, 41, 42, 172, 173, 340, 342, 344, 348, 349, 360, 362, 377, 1750], "infer": [19, 22, 23, 54, 55, 139, 140, 151, 152, 178, 179, 308, 309, 320, 321, 338, 341, 344, 345, 352, 360, 365, 1758, 1759, 1762, 1764], "when": [19, 22, 33, 34, 36, 37, 39, 40, 41, 42, 54, 55, 56, 57, 109, 110, 147, 148, 149, 150, 155, 156, 157, 158, 163, 164, 169, 172, 173, 174, 175, 178, 179, 180, 181, 184, 185, 316, 317, 318, 319, 324, 325, 326, 327, 332, 333, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 363, 365, 377, 402, 416, 1758, 1760, 1763, 1764, 1765, 1766], "global": [19, 22, 24, 25, 27, 28, 29, 30, 31, 139, 140, 153, 154, 169, 172, 173, 174, 175, 308, 309, 322, 323, 341, 344, 345, 348, 351, 354, 360, 1760], "set": [19, 22, 24, 25, 27, 28, 29, 30, 31, 33, 36, 38, 42, 49, 52, 53, 109, 110, 123, 124, 132, 135, 136, 139, 140, 141, 142, 147, 148, 157, 158, 160, 161, 162, 163, 164, 172, 173, 278, 279, 292, 293, 301, 304, 305, 308, 309, 310, 311, 316, 317, 326, 327, 329, 330, 331, 332, 333, 338, 339, 340, 342, 344, 345, 346, 351, 352, 353, 354, 355, 356, 357, 360, 362, 363, 393, 398, 402, 414, 1758, 1759, 1760, 1761, 1762, 1764, 1767], "ret": [19, 22, 24, 31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 353, 354, 355, 357, 360, 365, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "exampl": [19, 22, 24, 25, 31, 35, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 356, 357, 360, 362, 363, 364, 365, 376, 377, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1757, 1758, 1761, 1763, 1766, 1767], "If": [19, 22, 24, 25, 33, 36, 37, 38, 40, 41, 42, 44, 49, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 141, 142, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 365, 377, 393, 394, 395, 396, 397, 398, 402, 404, 408, 413, 414, 415, 416, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "import": [19, 22, 23, 34, 37, 39, 40, 41, 42, 167, 168, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 349, 353, 354, 355, 357, 360, 362, 363, 365, 377, 1750, 1756, 1758, 1760, 1763, 1764, 1766], "numpi": [19, 22, 24, 25, 28, 33, 34, 39, 40, 41, 42, 139, 140, 308, 309, 339, 341, 343, 344, 345, 348, 350, 353, 355, 356, 357, 358, 360, 362, 365, 393, 398, 1749, 1750, 1762, 1767], "np": [19, 22, 40, 184, 185, 308, 309, 340, 344, 345, 350, 353, 354, 355, 356, 357, 358, 360, 362, 363, 365, 1749, 1750], "arrai": [19, 22, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 377, 378, 388, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1749, 1750, 1758, 1759, 1760, 1762, 1766, 1767], "2": [19, 22, 38, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 342, 344, 346, 348, 350, 353, 354, 355, 356, 359, 360, 362, 363, 364, 365, 377, 393, 394, 398, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 1750, 1766, 1767], "print": [19, 22, 24, 25, 31, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 346, 356, 360, 362, 363, 364, 393, 398, 402, 415, 1750], "function": [19, 22, 23, 24, 25, 26, 33, 38, 41, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 346, 347, 349, 353, 358, 359, 361, 362, 363, 364, 375, 376, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1749, 1750, 1757, 1758, 1759, 1760, 1761, 1766, 1767], "py": [19, 22, 24, 40, 41, 42, 339, 341, 343, 344, 345, 347, 348, 349, 350, 351, 354, 355, 356, 357, 360, 362, 364, 365], "noqa": [19, 22, 24, 60, 61, 184, 185], "The": [19, 22, 24, 26, 32, 33, 35, 36, 37, 38, 40, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 376, 393, 394, 395, 396, 397, 398, 402, 404, 408, 413, 414, 415, 416, 1749, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "set_backend": [19, 22, 24, 27, 28, 29, 30, 31, 339, 341, 344, 351, 352, 360, 362, 365, 1750], "ha": [19, 22, 24, 33, 34, 35, 40, 42, 147, 148, 151, 152, 159, 160, 163, 164, 172, 173, 180, 181, 308, 309, 316, 317, 320, 321, 328, 329, 332, 333, 339, 341, 342, 344, 345, 346, 347, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 376, 377, 1756, 1759, 1760, 1762, 1763, 1766], "over": [19, 22, 33, 35, 41, 42, 123, 124, 147, 148, 163, 164, 165, 166, 167, 168, 180, 181, 286, 287, 316, 317, 332, 333, 334, 335, 336, 337, 341, 346, 347, 353, 356, 360, 362, 377, 402, 414, 1758, 1760], "ani": [19, 22, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 49, 50, 51, 54, 55, 60, 61, 139, 140, 165, 166, 167, 168, 169, 182, 183, 184, 185, 308, 309, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 393, 398, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1749, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "pass": [19, 22, 40, 42, 109, 110, 167, 168, 169, 172, 173, 174, 175, 278, 279, 336, 337, 339, 340, 341, 342, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 377, 402, 413, 1758], "jax": [19, 22, 24, 25, 27, 34, 35, 39, 40, 41, 42, 141, 142, 310, 311, 339, 341, 343, 344, 345, 350, 353, 354, 355, 356, 357, 358, 360, 362, 365, 377, 1750, 1761, 1763, 1766, 1767], "fn_name_from_version_specific_fn_nam": 19, "name": [19, 23, 26, 38, 40, 41, 42, 123, 124, 159, 160, 328, 329, 341, 342, 346, 347, 349, 350, 354, 355, 356, 357, 358, 360, 363, 365, 1760], "specif": [19, 23, 26, 33, 40, 41, 42, 139, 140, 182, 183, 308, 309, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 376, 377, 1749, 1756, 1758, 1759, 1761, 1762, 1763, 1767], "provid": [19, 23, 26, 33, 41, 42, 54, 55, 139, 140, 141, 142, 151, 152, 157, 158, 163, 164, 165, 166, 172, 173, 178, 179, 308, 309, 320, 321, 326, 327, 332, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 356, 358, 362, 364, 376, 377, 402, 416, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1767], "origin": [19, 23, 26, 35, 40, 42, 44, 47, 48, 123, 124, 147, 148, 151, 152, 163, 164, 169, 172, 173, 174, 175, 292, 293, 316, 317, 320, 321, 332, 333, 341, 344, 352, 353, 354, 355, 360, 1760, 1761], "point": [19, 23, 26, 35, 40, 41, 42, 56, 57, 60, 61, 109, 110, 127, 128, 147, 148, 155, 156, 163, 164, 180, 181, 184, 185, 272, 273, 278, 279, 296, 297, 316, 317, 324, 325, 332, 333, 339, 340, 343, 346, 347, 350, 353, 354, 356, 357, 358, 360, 362, 363, 376, 393, 395, 402, 415, 416, 1766], "get_backend": [19, 341, 351], "specifi": [19, 24, 42, 54, 55, 56, 57, 109, 110, 123, 124, 139, 140, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 163, 164, 165, 166, 170, 171, 172, 173, 180, 181, 278, 279, 308, 309, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 332, 333, 334, 335, 338, 344, 345, 350, 351, 353, 354, 355, 356, 358, 360, 363, 364, 402, 414, 1766], "isn": [19, 24, 42, 308, 309, 352, 363, 377, 1762], "t": [19, 24, 26, 34, 35, 37, 38, 40, 41, 42, 44, 47, 48, 167, 168, 308, 309, 336, 337, 338, 341, 342, 343, 344, 346, 352, 353, 356, 358, 360, 362, 363, 364, 365, 377, 1758, 1760, 1762], "associ": [19, 24, 42, 147, 148, 316, 317, 344, 351, 352, 354, 355, 356, 377], "option": [19, 24, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 365, 377, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1760, 1766], "str": [19, 24, 49, 50, 51, 117, 118, 139, 140, 145, 146, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 345, 348, 349, 354, 357, 360, 365], "we": [19, 24, 25, 26, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 123, 124, 167, 168, 292, 293, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 1749, 1750, 1756, 1760, 1761, 1765, 1766], "want": [19, 24, 34, 36, 40, 41, 42, 167, 168, 336, 337, 343, 352, 353, 356, 358, 363, 364, 365, 377], "retriev": [19, 24, 42, 354], "e": [19, 24, 34, 35, 36, 37, 38, 40, 41, 42, 44, 47, 48, 127, 128, 141, 142, 147, 148, 155, 156, 161, 162, 163, 164, 286, 287, 316, 317, 324, 325, 330, 331, 332, 333, 338, 339, 342, 348, 356, 360, 363, 377, 393, 398, 1749, 1756], "default": [19, 24, 40, 41, 42, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 341, 344, 345, 346, 347, 348, 350, 351, 352, 354, 356, 358, 360, 364, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1749, 1760], "torch": [19, 24, 30, 31, 41, 42, 339, 340, 341, 343, 344, 345, 348, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 363, 365, 377, 1749, 1750, 1766], "tensorflow": [19, 24, 29, 31, 34, 35, 39, 40, 41, 42, 139, 140, 308, 309, 339, 343, 344, 345, 350, 353, 354, 355, 356, 357, 358, 360, 365, 377, 393, 398, 1749, 1750, 1758, 1761, 1763, 1764, 1766, 1767], "either": [19, 24, 31, 38, 40, 41, 42, 60, 61, 117, 118, 139, 140, 172, 173, 184, 185, 286, 287, 308, 309, 341, 342, 344, 345, 346, 347, 351, 353, 354, 355, 356, 358, 360, 363, 377, 402, 415, 1760], "doesn": [19, 24, 26, 38, 41, 341, 342, 343, 344, 346, 356, 358, 360, 377, 1758], "matter": [19, 24, 33, 346], "been": [19, 24, 40, 42, 139, 140, 155, 156, 308, 309, 324, 325, 339, 341, 342, 343, 344, 345, 347, 349, 350, 351, 356, 360, 362, 376, 377, 1749, 1760, 1767], "ivy_np": [19, 24, 356], "us": [19, 24, 31, 35, 36, 37, 39, 40, 42, 54, 55, 56, 57, 60, 61, 109, 110, 123, 124, 127, 128, 139, 140, 141, 142, 151, 152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 292, 293, 296, 297, 308, 309, 310, 311, 320, 321, 322, 323, 324, 325, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 376, 377, 393, 394, 395, 396, 397, 402, 413, 414, 416, 1749, 1750, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "ivy_jax": [19, 24], "subsequ": [19, 25, 41, 340, 344, 346, 350, 351, 353, 356, 358, 364, 1761], "call": [19, 25, 31, 34, 38, 42, 169, 174, 175, 180, 181, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 377, 1760, 1761, 1764], "nativ": [19, 25, 44, 47, 48, 49, 51, 52, 53, 54, 55, 139, 140, 176, 177, 308, 309, 344, 348, 352, 353, 354, 355, 356, 360, 362, 363, 1749, 1758, 1767], "native_arrai": [19, 25, 31, 54, 55, 56, 57, 60, 61, 151, 152, 178, 179, 182, 183, 184, 185, 308, 309, 330, 331, 352, 355, 356], "1": [19, 25, 31, 34, 35, 38, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 342, 344, 346, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 377, 393, 394, 395, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 1750], "ndarrai": [19, 25, 40, 54, 55, 139, 140, 340, 344, 345, 350, 353, 354, 355, 357, 358, 360, 362, 365, 1749], "Or": [19, 25, 363], "jaxlib": [19, 25, 41, 340, 344, 345, 350, 357, 360, 362], "xla_extens": [19, 25, 340, 344, 345, 350, 357, 360, 362], "devicearrai": [19, 25, 340, 355, 360, 362], "set_backend_to_specific_vers": 19, "anyth": [19, 26, 356, 357, 1760, 1761], "updat": [19, 26, 38, 40, 41, 42, 49, 51, 53, 139, 140, 141, 142, 172, 173, 308, 309, 310, 311, 338, 339, 340, 342, 343, 344, 346, 350, 352, 355, 358, 360, 362, 363, 365, 377], "__dict__": [19, 26, 341, 360], "make": [19, 26, 34, 35, 40, 41, 42, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 365, 1758, 1760, 1761, 1762, 1763, 1766, 1767], "set_jax_backend": 19, "equival": [19, 27, 28, 29, 30, 147, 148, 316, 317, 353, 354, 358, 363, 365], "set_numpy_backend": 19, "set_tensorflow_backend": 19, "set_torch_backend": 19, "unset_backend": [19, 341], "unset": [19, 31, 341, 360], "adjust": [19, 31, 163, 164, 332, 333], "dict": [19, 31, 49, 50, 51, 52, 53, 139, 140, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 349, 363, 364, 1749], "previous": [19, 31, 38, 41, 351, 356, 360], "otherwis": [19, 31, 49, 50, 51, 52, 53, 56, 57, 60, 61, 139, 140, 141, 142, 147, 148, 151, 152, 157, 158, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 343, 344, 345, 346, 356, 360], "implement": [19, 31, 40, 56, 57, 161, 162, 180, 181, 182, 183, 330, 331, 338, 339, 340, 341, 342, 343, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 376, 377, 402, 415, 1749, 1750, 1757, 1758, 1759, 1760, 1763, 1766, 1767], "wa": [19, 31, 34, 42, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 346, 354, 360, 362, 1759, 1760, 1762], "last": [19, 31, 35, 42, 44, 47, 48, 54, 55, 123, 124, 147, 148, 149, 150, 151, 152, 161, 162, 163, 164, 165, 166, 172, 173, 292, 293, 316, 317, 318, 319, 320, 321, 330, 331, 332, 333, 334, 335, 339, 341, 344, 346, 349, 353, 355, 356, 358, 360, 377, 1760], "henc": [19, 31, 41, 342, 356], "here": [19, 31, 39, 40, 41, 42, 339, 342, 343, 346, 350, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 376, 377, 1760, 1761], "tensor": [19, 31, 33, 54, 55, 60, 61, 117, 118, 139, 140, 151, 152, 155, 156, 172, 173, 178, 179, 184, 185, 308, 309, 320, 321, 324, 325, 340, 341, 344, 345, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 363, 365, 377, 393, 398, 1749, 1750, 1757, 1758, 1761, 1763, 1764, 1767], "howev": [19, 31, 34, 40, 41, 42, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 377, 1759, 1760, 1766], "befor": [19, 31, 40, 41, 42, 151, 152, 172, 173, 339, 340, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 360, 363, 377, 1760], "becom": [19, 31, 33, 35, 42, 109, 110, 342, 346, 354, 377, 402, 404], "swap": [19, 31], "python": [19, 31, 32, 33, 34, 38, 39, 41, 42, 127, 128, 155, 156, 296, 297, 324, 325, 339, 342, 348, 349, 354, 356, 358, 360, 362, 363, 377, 1749, 1750, 1757, 1760, 1761, 1762, 1766, 1767], "op": [19, 31, 357, 360, 377], "eagertensor": [19, 31], "backend": [22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 42, 49, 51, 53, 139, 140, 141, 142, 172, 173, 308, 309, 338, 339, 340, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 365, 1749, 1750, 1760, 1763, 1766, 1767], "ml": [32, 34, 35, 36, 39, 354, 359, 360, 361, 363, 364, 365, 376, 1750, 1756, 1757, 1758, 1759, 1760, 1763, 1765, 1767], "explos": [32, 34, 1750], "A": [32, 33, 34, 35, 38, 39, 40, 41, 54, 55, 56, 57, 109, 110, 123, 124, 127, 128, 139, 140, 151, 152, 155, 156, 165, 166, 169, 172, 173, 174, 175, 180, 181, 278, 279, 296, 297, 308, 309, 310, 311, 320, 321, 324, 325, 334, 335, 338, 342, 344, 345, 350, 351, 354, 356, 360, 363, 377, 393, 398, 402, 414, 1749, 1750, 1760, 1761], "huge": [32, 34, 363, 1750, 1760, 1766], "number": [32, 33, 41, 42, 44, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 123, 124, 139, 140, 147, 148, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 172, 173, 174, 175, 178, 179, 180, 181, 184, 185, 278, 279, 292, 293, 308, 309, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 342, 344, 345, 346, 353, 355, 356, 358, 360, 363, 393, 398, 402, 408, 413, 414, 1750], "tool": [32, 35, 42, 346, 361, 365, 376, 377, 1750, 1758, 1759, 1760, 1761, 1763, 1766, 1767], "have": [32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 402, 415, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1749, 1750, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "explod": [32, 33, 1750], "onto": [32, 33, 1750, 1760], "scene": [32, 33, 141, 142, 338, 359, 361, 1750, 1760], "b": [32, 35, 36, 44, 47, 48, 60, 61, 109, 110, 119, 120, 139, 140, 145, 146, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 338, 341, 342, 343, 346, 351, 359, 360, 361, 363, 364, 365, 375, 402, 408, 415, 1750, 1756], "why": [32, 34, 42, 353, 362, 1750], "unifi": [32, 34, 172, 173, 338, 339, 340, 344, 348, 354, 358, 360, 377, 1750, 1756, 1757, 1758, 1760, 1764, 1767], "should": [32, 34, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 60, 61, 109, 110, 123, 124, 139, 140, 141, 142, 147, 148, 151, 152, 155, 156, 157, 158, 163, 164, 169, 170, 171, 172, 173, 174, 175, 178, 179, 184, 185, 278, 279, 292, 293, 310, 311, 316, 317, 320, 321, 324, 325, 326, 327, 330, 331, 332, 333, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 402, 415, 416, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1756, 1757, 1760, 1762, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "them": [32, 33, 34, 35, 38, 40, 42, 339, 340, 341, 342, 348, 352, 353, 354, 355, 356, 360, 362, 363, 364, 377, 1749, 1750, 1757, 1758, 1760, 1762, 1766], "c": [32, 34, 35, 36, 41, 139, 140, 141, 142, 145, 146, 163, 164, 180, 181, 184, 185, 292, 293, 308, 309, 310, 311, 320, 321, 332, 333, 338, 342, 346, 351, 358, 359, 360, 361, 363, 377, 1749, 1750, 1756, 1760, 1764, 1765, 1767], "standard": [32, 60, 61, 153, 154, 155, 156, 163, 164, 184, 185, 322, 323, 324, 325, 332, 333, 338, 339, 340, 342, 344, 347, 350, 353, 356, 357, 377, 1750, 1756, 1758, 1759, 1762, 1763, 1765], "re": [32, 33, 34, 36, 40, 41, 42, 139, 140, 338, 344, 357, 358, 362, 365, 377, 1750, 1760], "collabor": [32, 33, 34, 1750], "consortium": [32, 34, 1750], "api": [32, 33, 41, 60, 61, 184, 185, 338, 340, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 363, 377, 1749, 1750, 1756, 1758, 1760, 1762, 1765, 1767], "open": [33, 34, 35, 36, 38, 41, 42, 155, 156, 324, 325, 343, 344, 347, 354, 355, 358, 376, 1750, 1758, 1759, 1760, 1762, 1763], "project": [33, 34, 35, 38, 41, 42, 341, 356, 364, 376, 377, 1756, 1758, 1760, 1763, 1767], "grown": 33, "consider": [33, 346, 350, 358, 1757, 1758], "recent": [33, 34, 41, 42, 356], "year": [33, 35, 339, 377, 1750, 1760], "especi": [33, 41, 339, 358, 1760], "deep": [33, 36, 39, 40, 42, 172, 173, 342, 344, 355, 359, 362, 363, 1750, 1758, 1760, 1763, 1764, 1766, 1767], "learn": [33, 34, 36, 39, 40, 41, 141, 142, 310, 311, 338, 339, 351, 359, 376, 1749, 1750, 1758, 1762, 1763, 1764, 1765, 1766, 1767], "can": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 54, 55, 56, 57, 147, 148, 151, 152, 155, 156, 180, 181, 316, 317, 320, 321, 324, 325, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 377, 1749, 1750, 1757, 1758, 1759, 1760, 1761, 1763, 1764, 1766, 1767], "seen": [33, 34, 343, 346, 348, 354, 356, 360, 362, 363, 1766], "rapidli": 33, "increas": [33, 147, 148, 316, 317, 344, 348, 357, 358, 1760], "github": [33, 37, 39, 40, 42, 339, 344, 346, 347, 356], "repo": [33, 37, 38, 39, 41, 42, 339, 344, 354, 357], "contain": [33, 37, 38, 40, 41, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 139, 140, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 163, 164, 165, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 346, 347, 350, 351, 352, 353, 356, 359, 360, 361, 364, 377, 393, 394, 395, 396, 397, 398, 399, 402, 415, 1749, 1750, 1760, 1761, 1766], "term": [33, 42, 342, 360, 1749, 1760], "time": [33, 34, 35, 40, 41, 42, 123, 124, 141, 142, 159, 160, 292, 293, 310, 311, 328, 329, 341, 342, 343, 344, 346, 350, 351, 352, 353, 354, 356, 357, 360, 363, 365, 377, 1758, 1760, 1761, 1764, 1765, 1766], "These": [33, 34, 35, 37, 39, 40, 41, 42, 123, 124, 292, 293, 339, 342, 343, 344, 346, 347, 349, 350, 351, 353, 355, 356, 357, 360, 361, 363, 364, 365, 377, 1749, 1760, 1764, 1766, 1767], "written": [33, 41, 340, 347, 350, 353, 354, 356, 357, 360, 362, 365, 377, 1758, 1760, 1764, 1766, 1767], "mani": [33, 34, 35, 40, 41, 42, 151, 152, 172, 173, 320, 321, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 377, 393, 398, 1756, 1760, 1763, 1766, 1767], "differ": [33, 34, 35, 39, 41, 42, 44, 47, 48, 60, 61, 123, 124, 139, 140, 169, 172, 173, 174, 175, 292, 293, 308, 309, 332, 333, 338, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 377, 402, 404, 405, 408, 1750, 1757, 1758, 1759, 1760, 1763, 1766, 1767], "while": [33, 34, 40, 41, 42, 169, 172, 173, 174, 175, 341, 344, 346, 349, 350, 353, 354, 356, 358, 362, 364, 365, 377, 402, 405, 1760, 1766, 1767], "thi": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 377, 393, 398, 402, 403, 404, 413, 414, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "wonder": [33, 35, 362], "thing": [33, 34, 35, 39, 40, 41, 42, 341, 349, 354, 356, 358, 362, 363, 1760], "research": [33, 376, 1760, 1767], "develop": [33, 34, 35, 36, 37, 39, 40, 41, 42, 339, 343, 357, 376, 377, 1749, 1750, 1758, 1759, 1760, 1761, 1762, 1765, 1766, 1767], "also": [33, 34, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 376, 377, 393, 398, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1765, 1766, 1767], "consid": [33, 34, 109, 110, 147, 148, 278, 279, 316, 317, 351, 357, 361, 362, 363, 393, 398, 402, 408, 1757, 1761, 1765, 1767], "speed": [33, 356, 1763], "evolv": [33, 1760], "shareabl": 33, "code": [33, 34, 35, 38, 39, 40, 41, 42, 60, 61, 169, 172, 173, 174, 175, 182, 183, 184, 185, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 375, 377, 1749, 1750, 1756, 1758, 1759, 1760, 1761, 1763, 1764, 1765, 1766, 1767], "significantli": [33, 1758], "hinder": [33, 350], "librari": [33, 34, 35, 36, 40, 182, 183, 339, 358, 365, 375, 377, 1749, 1750, 1756, 1757, 1758, 1760, 1764, 1767], "outdat": 33, "month": [33, 41], "rigor": [33, 356], "maintain": [33, 42, 161, 162, 330, 331, 339, 343, 1759], "against": [33, 56, 57, 147, 148, 157, 158, 180, 181, 184, 185, 316, 317, 326, 327, 356, 360, 377, 402, 408, 1760], "newest": 33, "For": [33, 34, 35, 37, 38, 40, 41, 42, 141, 142, 147, 148, 310, 311, 316, 317, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 376, 377, 402, 415, 1757, 1758, 1761, 1766, 1767], "softwar": [33, 34, 41, 42, 1758, 1763, 1764, 1765], "pipelin": [33, 340, 365, 1749, 1760, 1761, 1766], "where": [33, 34, 35, 36, 38, 41, 42, 54, 55, 60, 61, 109, 110, 123, 124, 139, 140, 147, 148, 151, 152, 155, 156, 157, 158, 163, 164, 165, 166, 172, 173, 178, 179, 184, 185, 278, 279, 292, 293, 316, 317, 320, 321, 324, 325, 326, 327, 332, 333, 334, 335, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 377, 393, 398, 402, 405, 408, 409, 410, 1750, 1758, 1767], "rapid": [33, 34, 41, 1760], "prototyp": [33, 1760], "vital": [33, 365], "signific": [33, 34, 377, 1760], "bottleneck": 33, "As": [33, 42, 167, 168, 336, 337, 340, 342, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 377, 1760, 1765], "new": [33, 34, 35, 36, 38, 40, 41, 42, 109, 110, 139, 140, 141, 142, 151, 152, 153, 154, 172, 173, 178, 179, 278, 279, 308, 309, 310, 311, 320, 321, 322, 323, 338, 341, 342, 343, 344, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 359, 362, 365, 376, 402, 414, 1749, 1750, 1758, 1762, 1766, 1767], "futur": [33, 35, 41, 42, 344, 354, 357, 358, 362, 377, 1766], "avail": [33, 41, 42, 139, 140, 308, 309, 342, 343, 345, 347, 354, 377, 1765, 1766], "quickli": [33, 35, 41, 42, 363, 364, 1760, 1767], "obsolet": [33, 35], "user": [33, 34, 37, 38, 41, 42, 338, 341, 342, 344, 352, 353, 354, 356, 358, 359, 360, 377, 402, 413, 1758, 1760, 1766, 1767], "constantli": [33, 357, 358], "invent": 33, "wheel": 33, "our": [33, 34, 36, 39, 40, 41, 42, 44, 167, 168, 169, 336, 337, 339, 342, 343, 344, 346, 348, 349, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 377, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1765, 1766, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "desir": [33, 42, 56, 57, 157, 158, 172, 173, 180, 181, 182, 183, 326, 327, 341, 344, 354, 360, 1760], "simultan": [33, 35], "modern": [33, 34, 1765], "simpl": [33, 40, 41, 42, 340, 342, 344, 345, 346, 347, 351, 353, 354, 356, 357, 358, 362, 364, 365, 377, 1749, 1759, 1760, 1761, 1762], "scalabl": [33, 360, 1765, 1766], "manner": [33, 41, 49, 52, 53, 176, 177, 345, 347, 354, 357, 363, 376, 377, 1756, 1758, 1766, 1767], "determin": [33, 44, 47, 48, 60, 61, 109, 110, 147, 148, 151, 152, 165, 166, 169, 172, 173, 174, 175, 184, 185, 278, 279, 308, 309, 316, 317, 330, 331, 334, 335, 342, 344, 345, 347, 351, 354, 355, 358, 402, 415], "exactli": [33, 35, 342, 344, 345, 346, 358], "common": [33, 40, 60, 61, 109, 110, 172, 173, 278, 279, 342, 344, 345, 346, 349, 351, 352, 354, 357, 358, 377, 402, 404, 407, 411, 1757, 1760, 1767], "ground": [33, 354, 356], "li": 33, "between": [33, 109, 110, 149, 150, 151, 152, 169, 172, 173, 174, 175, 184, 185, 318, 319, 320, 321, 340, 341, 342, 346, 350, 351, 354, 355, 356, 358, 359, 361, 362, 363, 365, 376, 402, 408, 416, 1750, 1756, 1757, 1759, 1760, 1761, 1766], "find": [33, 36, 38, 39, 40, 41, 42, 172, 173, 339, 343, 356, 358, 360, 363, 1749, 1750], "essenti": [33, 34, 40, 342, 345, 346, 351, 357, 1766], "order": [33, 38, 40, 41, 42, 44, 47, 48, 123, 124, 141, 142, 147, 148, 161, 162, 169, 172, 173, 174, 175, 292, 293, 316, 317, 330, 331, 340, 341, 342, 343, 344, 345, 346, 347, 350, 353, 354, 355, 356, 357, 358, 363, 365, 377, 393, 398, 1756, 1759, 1760, 1761, 1763, 1766], "design": [33, 34, 272, 273, 338, 344, 353, 354, 355, 358, 360, 362, 377, 393, 396, 397, 1756, 1758, 1760, 1763, 1764, 1765], "univers": 33, "abstract": [33, 342, 344, 354, 356, 358, 364, 377, 1758, 1760, 1762, 1763, 1767], "In": [33, 35, 37, 40, 41, 42, 139, 140, 151, 152, 182, 183, 320, 321, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 365, 376, 377, 1750, 1756, 1758, 1760, 1761, 1763, 1766], "search": [33, 39, 41, 49, 52, 53, 130, 158, 176, 177, 299, 327, 342, 346, 356, 357], "languag": [33, 35, 354, 358, 360, 1749, 1758, 1761, 1763, 1764, 1765, 1766], "first": [33, 34, 37, 38, 39, 40, 41, 42, 44, 47, 48, 60, 61, 109, 110, 123, 124, 147, 148, 155, 156, 157, 158, 159, 160, 163, 164, 169, 174, 175, 184, 185, 278, 279, 288, 289, 292, 293, 316, 317, 324, 325, 328, 329, 332, 333, 339, 340, 342, 346, 350, 351, 352, 353, 354, 356, 358, 360, 362, 363, 365, 393, 398, 402, 405, 406, 407, 408, 411, 412, 1758, 1760, 1761, 1765], "see": [33, 36, 38, 40, 41, 42, 44, 47, 48, 56, 57, 60, 61, 147, 148, 157, 158, 163, 164, 165, 166, 169, 174, 175, 184, 185, 316, 317, 326, 327, 332, 333, 334, 335, 339, 342, 343, 345, 346, 350, 351, 354, 355, 356, 357, 358, 360, 362, 363, 376, 377, 393, 398, 1750, 1756], "clear": [33, 34, 35, 40, 42, 344, 345, 346, 354, 358, 360, 362, 1760], "front": [33, 359, 360, 363, 1750, 1758, 1760], "runner": 33, "look": [33, 37, 38, 41, 42, 341, 342, 344, 345, 346, 348, 350, 351, 354, 355, 356, 357, 358, 360, 362, 364, 365, 1750, 1756, 1760], "littl": [33, 355, 362, 1762], "deeper": [33, 42, 338, 356, 359], "follow": [33, 34, 38, 40, 41, 42, 139, 140, 141, 142, 172, 173, 308, 309, 310, 311, 316, 317, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 377, 1750, 1757, 1760, 1763], "same": [33, 35, 37, 38, 41, 42, 44, 47, 48, 49, 50, 51, 54, 55, 56, 57, 60, 61, 117, 118, 133, 134, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 172, 173, 178, 179, 180, 181, 184, 185, 286, 287, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 324, 325, 328, 329, 332, 333, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 377, 393, 398, 402, 404, 1750, 1757, 1759, 1766, 1767], "core": [33, 40, 41, 345, 356, 365, 1750, 1758, 1759, 1760, 1761, 1765, 1767], "principl": [33, 1758, 1760, 1763], "oper": [33, 40, 41, 56, 57, 109, 110, 117, 118, 139, 140, 141, 142, 145, 146, 169, 172, 173, 174, 175, 180, 181, 278, 279, 286, 287, 308, 309, 314, 315, 339, 340, 342, 344, 345, 346, 347, 351, 353, 354, 356, 358, 360, 363, 364, 402, 413, 1749, 1756, 1757, 1758, 1759, 1760, 1761, 1763, 1764, 1765, 1766, 1767], "expos": [33, 360, 364], "almost": [33, 39, 342, 355, 361, 363], "ident": [33, 35, 172, 173, 342, 351, 352, 354, 355, 357, 358, 362, 363, 377, 1749, 1750], "uniqu": [33, 123, 124, 159, 160, 292, 293, 328, 329, 342, 351, 354, 355, 356, 358, 377, 1763], "syntax": [33, 34, 344, 349, 1760], "There": [33, 40, 41, 42, 339, 340, 342, 344, 346, 348, 349, 351, 354, 355, 360, 363, 377, 1761, 1762, 1766, 1767], "onli": [33, 36, 40, 41, 42, 44, 47, 48, 109, 110, 151, 152, 155, 156, 172, 173, 278, 279, 320, 321, 324, 325, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 375, 377, 402, 413, 1750, 1759, 1760, 1761, 1766, 1767], "so": [33, 34, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 377, 378, 388, 402, 404, 1750, 1760, 1761, 1762, 1764], "wai": [33, 34, 39, 40, 41, 339, 341, 344, 353, 355, 356, 358, 362, 363, 364, 365, 377, 1762, 1766, 1767], "manipul": [33, 124, 152, 293, 321, 357, 360, 365, 376, 1760], "unsurprisingli": [33, 346], "fundament": [33, 354, 358, 360, 1760], "consist": [33, 172, 173, 339, 340, 344, 348, 353, 360, 1761], "each": [33, 34, 35, 37, 40, 41, 42, 44, 47, 48, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 157, 158, 159, 160, 163, 164, 169, 172, 173, 174, 175, 180, 181, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 326, 327, 328, 329, 332, 333, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 365, 376, 377, 402, 404, 415, 1750, 1756, 1757, 1761, 1763, 1766], "veri": [33, 34, 39, 40, 41, 42, 109, 110, 278, 279, 342, 344, 345, 346, 350, 351, 353, 354, 355, 356, 357, 358, 361, 363, 364, 365, 377, 402, 408, 413, 1750, 1756, 1757, 1758, 1760, 1761, 1762, 1765, 1766, 1767], "similar": [33, 40, 41, 342, 343, 344, 345, 348, 352, 354, 355, 356, 357, 363, 377, 1756, 1757, 1758, 1759, 1766], "convent": [33, 341, 350, 357, 376, 1766], "those": [33, 40, 41, 42, 151, 152, 172, 173, 320, 321, 342, 344, 352, 354, 356, 358, 1757], "introduc": [33, 342, 343, 344, 355, 363], "2006": 33, "layer": [33, 118, 146, 153, 154, 287, 315, 322, 323, 347, 354, 357, 358, 360, 361, 364, 1750, 1758, 1760, 1764, 1767], "therefor": [33, 37, 40, 42, 60, 61, 184, 185, 339, 340, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 364, 377, 393, 398, 1757, 1760, 1766], "present": [33, 40, 42, 172, 173, 342, 344, 345, 350, 353, 360, 1757, 1758, 1767], "itself": [33, 41, 42, 109, 110, 339, 342, 353, 354, 364, 376, 377, 402, 413, 1759, 1760, 1761, 1766], "cut": [33, 1766], "cloth": 33, "adher": [33, 34, 339, 344, 347, 350, 358, 360, 365, 1756, 1757, 1766], "semant": [33, 360, 365, 1761], "round": [33, 34, 35, 37, 38, 40, 41, 42, 60, 61, 184, 185, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "up": [33, 34, 35, 36, 37, 38, 40, 42, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "hopefulli": [33, 34, 35, 37, 38, 40, 41, 42, 44, 169, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "paint": [33, 360], "pictur": [33, 40, 360], "how": [33, 35, 36, 38, 39, 40, 41, 42, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 376, 377, 1750, 1756, 1760], "pleas": [33, 34, 35, 37, 38, 40, 41, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "reach": [33, 34, 35, 37, 38, 40, 41, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "out": [33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "discord": [33, 34, 35, 37, 38, 40, 41, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "you": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 139, 140, 169, 308, 309, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 377, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1749, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "question": [33, 34, 35, 37, 38, 40, 41, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 376, 377, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "With": [34, 35, 41, 44, 47, 48, 54, 55, 56, 57, 60, 61, 123, 124, 139, 140, 141, 142, 147, 148, 157, 158, 163, 164, 169, 174, 175, 178, 179, 180, 181, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 302, 303, 304, 305, 308, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 346, 352, 354, 356, 358, 360, 402, 411, 415, 1760, 1763], "central": [34, 40, 358, 1766], "goal": [34, 40, 1760, 1766], "being": [34, 35, 41, 42, 44, 47, 48, 172, 173, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 352, 353, 354, 355, 356, 358, 360, 363, 376, 377, 1750, 1756, 1758, 1759, 1760, 1761, 1766, 1767], "would": [34, 36, 38, 40, 41, 42, 151, 152, 182, 183, 320, 321, 338, 339, 340, 341, 342, 344, 346, 347, 349, 350, 352, 353, 354, 355, 356, 358, 359, 360, 362, 364, 365, 377, 1750, 1760, 1766], "entir": [34, 35, 40, 41, 42, 163, 164, 165, 166, 172, 173, 308, 309, 332, 333, 334, 335, 339, 340, 342, 344, 346, 353, 354, 356, 358, 360, 363, 364, 365, 377, 1760, 1766, 1767], "forgiven": 34, "rais": [34, 42, 109, 110, 139, 140, 151, 152, 155, 156, 165, 166, 172, 173, 278, 279, 308, 309, 320, 321, 324, 325, 334, 335, 339, 341, 348, 349, 353, 354, 360, 362, 402, 404], "an": [34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 139, 140, 141, 142, 147, 148, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 308, 309, 310, 311, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 376, 377, 393, 394, 396, 397, 398, 399, 402, 411, 413, 415, 416, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1749, 1750, 1756, 1758, 1759, 1760, 1761, 1763, 1764, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "eyebrow": 34, "somehow": 34, "pytorch": [34, 35, 39, 40, 141, 142, 343, 344, 345, 348, 350, 351, 353, 354, 355, 357, 358, 360, 365, 377, 1749, 1750, 1761, 1763, 1764, 1766, 1767], "other": [34, 37, 40, 41, 42, 44, 47, 48, 56, 57, 139, 140, 163, 164, 169, 172, 173, 174, 175, 180, 181, 184, 185, 308, 309, 332, 333, 339, 340, 342, 343, 346, 347, 349, 351, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 375, 376, 377, 1749, 1750, 1756, 1758, 1759, 1760, 1766, 1767], "strong": [34, 377, 1760], "industri": [34, 1760, 1762], "back": [34, 41, 42, 340, 344, 352, 359, 377, 1758, 1762], "momentum": 34, "won": [34, 35, 41, 42, 342, 356, 365], "ad": [34, 39, 40, 41, 42, 151, 152, 320, 321, 336, 337, 340, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 377, 402, 408, 1759, 1760], "just": [34, 35, 41, 42, 339, 341, 344, 346, 347, 351, 352, 353, 354, 355, 356, 360, 362, 363, 377, 393, 398, 1760, 1761, 1766], "problem": [34, 42, 340, 354, 362, 1756, 1762, 1766], "even": [34, 35, 41, 42, 123, 124, 292, 293, 339, 344, 345, 347, 350, 351, 354, 358, 362, 363, 364, 365, 377, 1766], "wors": 34, "rather": [34, 42, 139, 140, 141, 142, 172, 173, 308, 309, 310, 311, 339, 342, 344, 347, 353, 354, 355, 356, 357, 365, 377, 1756, 1759, 1760], "funni": 34, "comic": 34, "strip": 34, "easi": [34, 41, 42, 342, 351, 355, 358, 1758, 1760, 1766, 1767], "feasibl": [34, 40], "space": [34, 109, 110, 139, 140, 184, 185, 308, 309, 356, 358, 402, 416], "case": [34, 40, 41, 42, 49, 52, 53, 127, 128, 139, 140, 151, 152, 163, 164, 169, 172, 173, 174, 175, 308, 309, 320, 321, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 377, 402, 405, 415, 1759, 1763], "unlik": [34, 342, 346, 353, 1765, 1767], "charger": 34, "charact": [34, 349], "encod": [34, 139, 140, 308, 309, 363], "instant": [34, 1750], "much": [34, 40, 41, 42, 340, 342, 344, 353, 354, 355, 357, 360, 362, 363, 402, 408, 1758, 1760, 1766, 1767], "doe": [34, 38, 40, 42, 109, 110, 151, 152, 172, 173, 278, 279, 320, 321, 338, 341, 344, 346, 347, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 363, 377, 393, 398, 402, 413, 1749, 1756, 1760, 1761, 1767], "mandat": [34, 344, 353, 356, 357], "adopt": [34, 42, 340, 350, 358, 1759, 1760, 1765], "continu": [34, 35, 39, 40, 41, 338, 339, 349, 356, 377, 1760], "own": [34, 35, 41, 339, 344, 347, 348, 354, 356, 357, 360, 377, 1749, 1756, 1759, 1760, 1765, 1766], "signatur": [34, 60, 61, 184, 185, 344, 345, 346, 347, 350, 353, 356, 357, 358, 1757, 1766], "replac": [34, 38, 42, 60, 61, 109, 110, 139, 140, 151, 152, 155, 156, 172, 173, 278, 279, 308, 309, 320, 321, 324, 325, 342, 344, 345, 346, 352, 354, 356, 362, 365, 377, 402, 413, 1767], "your": [34, 35, 36, 37, 38, 39, 40, 41, 339, 347, 357, 358, 363, 364, 377, 1750, 1760], "10": [34, 38, 41, 60, 61, 109, 110, 117, 118, 123, 124, 133, 134, 135, 136, 139, 140, 141, 142, 147, 148, 155, 156, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 342, 344, 346, 355, 356, 360, 362, 363, 402, 407, 408, 411, 414, 1765], "100": [34, 35, 109, 110, 278, 279, 308, 309, 356, 363, 364, 365, 377, 393, 398, 402, 408, 413, 1750], "despit": [34, 342, 344, 345, 358, 360, 1757, 1760], "distinct": [34, 41, 342, 347, 353, 354, 359, 1750, 1760], "still": [34, 40, 42, 172, 173, 344, 347, 353, 354, 356, 358, 364, 377, 1750, 1757, 1760, 1766], "believ": [34, 42], "share": [34, 172, 173, 341, 342, 346, 351, 355, 356, 358, 360, 1758, 1759, 1766], "bring": [34, 339, 356, 360, 361, 1749], "benefit": [34, 35, 41, 340, 342, 353, 358, 362, 363, 377, 1758, 1762, 1765], "unrel": [34, 42], "what": [34, 35, 37, 42, 338, 342, 346, 347, 350, 352, 354, 356, 359, 360, 362, 363, 364, 365, 376, 377, 1750, 1756, 1761, 1762, 1765], "again": [34, 35, 42, 341, 342, 346, 353, 354, 356, 357, 358, 363, 365, 377, 1765, 1766], "contrari": 34, "bumpi": 34, "road": 34, "allud": [34, 363], "most": [34, 39, 40, 41, 172, 173, 178, 179, 340, 342, 344, 345, 349, 350, 351, 353, 354, 356, 357, 358, 360, 362, 363, 364, 377, 1760, 1761, 1763, 1764, 1766, 1767], "technologi": [34, 1758, 1762], "sector": [34, 60, 61, 184, 185], "full": [34, 35, 42, 147, 148, 344, 347, 350, 354, 356, 358, 360, 377, 1758, 1760, 1766], "success": 34, "reason": [34, 40, 42, 339, 340, 342, 344, 346, 351, 353, 354, 357, 358, 360, 362, 1766], "build": [34, 36, 37, 41, 343, 344, 351, 359, 361, 364, 365, 377, 1749, 1750, 1758, 1760, 1762, 1765, 1766, 1767], "custom": [34, 343, 348, 355, 356, 364, 1760, 1764, 1765, 1766], "comput": [34, 35, 41, 45, 46, 60, 61, 109, 110, 117, 118, 123, 124, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 163, 164, 170, 171, 172, 173, 184, 185, 278, 279, 288, 289, 292, 293, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 332, 333, 342, 344, 351, 354, 356, 358, 360, 363, 377, 393, 394, 396, 397, 402, 405, 406, 411, 414, 1749, 1756, 1758, 1760, 1761, 1763, 1764, 1766], "thank": [34, 363], "interoper": [34, 1757, 1758, 1760, 1763], "compon": [34, 360, 1756, 1761, 1763], "bio": [34, 41], "hardwar": [34, 41, 44, 47, 48, 358, 1756, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766], "initi": [34, 42, 169, 172, 173, 174, 175, 341, 344, 345, 356, 360, 1760, 1766, 1767], "pcie": 34, "interfac": [34, 362, 365, 377, 1749, 1756, 1757, 1758, 1759, 1760, 1764, 1767], "motherboard": 34, "raid": 34, "storag": [34, 363], "virtual": [34, 37, 38, 42, 1763, 1764], "bluetooth": 34, "wireless": 34, "exchang": [34, 39, 1756, 1758], "btx": 34, "form": [34, 36, 49, 50, 51, 52, 53, 54, 55, 141, 142, 147, 148, 172, 173, 316, 317, 351, 356, 358, 364, 365, 393, 395, 1760, 1761, 1766], "factor": [34, 141, 142, 145, 146, 147, 148, 286, 287, 310, 311, 314, 315, 316, 317, 348], "sata": 34, "connect": [34, 41, 364, 365, 1758], "host": [34, 377, 1765], "bu": 34, "adapt": [34, 310, 311], "devic": [34, 42, 44, 47, 48, 54, 55, 59, 108, 155, 156, 172, 173, 178, 179, 183, 272, 273, 277, 308, 309, 324, 325, 338, 341, 344, 348, 351, 352, 355, 357, 358, 360, 365, 377, 393, 398, 1749, 1759, 1760, 1762, 1763, 1764, 1765], "html": [34, 38, 60, 61, 184, 185, 347, 393, 398], "enabl": [34, 41, 42, 169, 172, 173, 174, 175, 340, 342, 351, 352, 353, 354, 356, 358, 359, 361, 363, 365, 377, 1749, 1758, 1759, 1760, 1761, 1762, 1763, 1766, 1767], "anyon": [34, 36, 42, 377, 1766], "websit": [34, 339], "tcp": 34, "ip": 34, "node": [34, 172, 173, 308, 309, 342, 354, 1761], "commun": [34, 36, 40, 41, 42, 377, 1750, 1759, 1760, 1762], "network": [34, 342, 351, 360, 364, 376, 1750, 1756, 1758, 1759, 1760, 1764, 1766, 1767], "smtp": 34, "possibl": [34, 36, 40, 41, 42, 151, 152, 320, 321, 342, 343, 344, 346, 347, 353, 354, 355, 356, 358, 360, 363, 376, 377, 1758, 1760, 1766], "send": [34, 1765], "gmail": 34, "outlook": 34, "pop": [34, 41], "u": [34, 36, 41, 42, 147, 148, 316, 317, 342, 352, 353, 354, 355, 356, 357, 358, 364, 377], "email": 34, "ieee": 34, "754": 34, "allow": [34, 37, 40, 42, 343, 348, 349, 352, 354, 355, 356, 360, 362, 377, 1749, 1758, 1760, 1764, 1765], "calcul": [34, 40, 60, 61, 149, 150, 163, 164, 169, 172, 173, 174, 175, 184, 185, 318, 319, 332, 333, 347, 355, 360, 402, 403, 412, 415], "live": [34, 35, 344, 1756, 1758], "depend": [34, 37, 40, 41, 42, 56, 57, 139, 140, 161, 162, 180, 181, 330, 331, 332, 333, 344, 347, 352, 353, 354, 356, 358, 360, 377, 402, 415, 1758, 1760, 1761], "did": [34, 40, 365, 1766], "aris": [34, 344, 377], "until": [34, 42, 349, 357, 360, 377, 1750, 1767], "substanti": [34, 42, 340, 344, 356, 1760], "innov": 34, "growth": [34, 1763], "usag": [34, 344, 360, 377, 1763], "relev": [34, 40, 41, 42, 342, 343, 344, 346, 355, 363, 1758, 1765, 1766], "area": [34, 60, 61, 184, 185, 353, 375, 1750, 1756], "necess": 34, "parti": [34, 377, 1759, 1760, 1766], "could": [34, 35, 40, 41, 42, 339, 344, 346, 352, 353, 354, 355, 356, 360, 362, 363, 364, 1760, 1765, 1766], "easili": [34, 41, 343, 354, 358, 363, 364, 365, 377, 1750, 1760, 1766, 1767], "engag": [34, 36, 42], "regard": [34, 39, 342, 354, 355, 358], "effect": [34, 40, 141, 142, 163, 164, 310, 311, 332, 333, 340, 342, 347, 350, 353, 377], "2015": [34, 1760], "sinc": [34, 41, 42, 109, 110, 278, 279, 339, 342, 353, 354, 356, 377, 402, 1760, 1766], "alongsid": 34, "machin": [34, 41, 147, 148, 316, 317, 339, 351, 376, 1749, 1758, 1760, 1762, 1763, 1764, 1765, 1766], "frame": [34, 376, 1760], "less": [34, 42, 44, 47, 48, 60, 61, 117, 118, 147, 148, 155, 156, 163, 164, 184, 185, 286, 287, 316, 317, 324, 325, 342, 344, 346, 348, 350, 353, 354, 358, 359, 360, 1760, 1762], "matur": [34, 377, 1760], "state": [34, 41, 344, 347, 348, 350, 354, 356, 359, 360, 361, 363, 376, 1750, 1766, 1767], "than": [34, 37, 42, 44, 47, 48, 60, 61, 109, 110, 117, 118, 139, 140, 141, 142, 147, 148, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 169, 172, 173, 174, 175, 184, 185, 286, 287, 308, 309, 310, 311, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 339, 342, 343, 344, 346, 348, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 377, 402, 408, 416, 1757, 1758, 1759, 1760, 1766, 1767], "preced": [34, 364], "mention": [34, 40, 41, 42, 346, 350, 351, 353, 358, 1760], "aros": 34, "70": [34, 308, 309], "80": 34, "90": [34, 60, 61, 123, 124, 184, 185, 292, 293], "effort": [34, 36, 377, 1756, 1760, 1766], "stage": [34, 36, 38, 42, 338, 349, 356, 1750, 1760], "complet": [34, 40, 42, 172, 173, 339, 340, 342, 343, 346, 354, 355, 356, 362, 363, 1758], "natur": [34, 147, 148, 316, 317, 340, 346, 355, 376], "like": [34, 38, 40, 41, 42, 109, 110, 141, 142, 278, 279, 302, 303, 310, 311, 338, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 376, 377, 402, 403, 404, 407, 409, 410, 412, 1750, 1760, 1765], "certainli": [34, 1766], "mission": [34, 1750, 1762], "creat": [34, 36, 37, 38, 40, 41, 42, 54, 55, 109, 110, 127, 128, 155, 156, 172, 173, 178, 179, 278, 279, 296, 297, 308, 309, 324, 325, 344, 345, 348, 352, 353, 354, 355, 356, 358, 360, 361, 364, 375, 376, 393, 398, 402, 413, 1749, 1750, 1760, 1761, 1766], "At": [34, 40, 41, 339, 354, 356, 357, 1760], "process": [34, 35, 36, 38, 41, 42, 342, 351, 354, 355, 356, 358, 360, 365, 1758, 1759, 1760, 1763, 1764, 1766, 1767], "ourselv": [34, 1766], "lead": [34, 35, 169, 172, 173, 174, 175, 346, 377], "quansight": [34, 1766], "compani": [34, 1756], "made": [34, 37, 40, 42, 339, 343, 353, 357, 360, 362, 1760], "organ": [34, 340, 342, 351, 354, 357, 1749], "panda": 34, "scipi": [34, 1762, 1767], "conda": [34, 38, 41, 1762], "dask": 34, "apach": [34, 1762, 1766], "mxnet": [34, 1767], "onnx": [34, 1758, 1766], "scikit": 34, "jupyt": [34, 1762], "aw": 34, "cupi": [34, 1760, 1767], "net": [34, 35, 360, 365], "sympi": 34, "rai": 34, "modin": 34, "spyder": 34, "includ": [34, 40, 42, 54, 55, 109, 110, 139, 140, 157, 158, 163, 164, 165, 166, 172, 173, 184, 185, 272, 273, 278, 279, 288, 289, 292, 293, 296, 297, 304, 305, 308, 309, 316, 317, 326, 327, 332, 333, 334, 335, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 376, 377, 393, 398, 402, 411, 1757, 1758, 1760, 1762, 1765, 1766, 1767], "member": [34, 40, 42, 354], "googl": [34, 1750], "octoml": [34, 1766], "einop": [34, 139, 140, 308, 309], "further": [34, 35, 38, 42, 339, 340, 346, 348, 354, 356, 359, 360, 363, 364, 1750, 1765, 1766], "sponsor": 34, "lg": 34, "electron": 34, "microsoft": [34, 1760, 1765, 1767], "d": [34, 35, 36, 41, 117, 118, 123, 124, 145, 146, 147, 148, 286, 287, 292, 293, 314, 315, 316, 317, 338, 342, 356, 363, 393, 398, 1750, 1756], "shaw": 34, "co": [34, 39, 60, 61, 139, 140, 184, 185, 344, 360, 376, 1750], "intel": [34, 1758, 1765], "togeth": [34, 172, 173, 340, 342, 349, 354, 357, 358, 364, 365, 377, 402, 408, 1758, 1760, 1761, 1766], "major": [34, 344, 345, 356, 377, 1757, 1760], "involv": [34, 36, 38, 56, 57, 180, 181, 338, 344, 346, 358, 365, 1760, 1766], "anoth": [34, 40, 41, 42, 342, 344, 351, 352, 354, 355, 356, 358, 360, 362, 365, 1749, 1760, 1766], "promis": 34, "sign": [34, 41, 60, 61, 147, 148, 184, 185, 316, 317, 360, 365], "pursuit": 34, "unif": [34, 36, 362, 1756, 1766], "clearli": [34, 40, 42, 346, 355, 356, 1764], "lot": [34, 35, 344, 352, 356, 377, 1759], "thought": [34, 41, 42, 350, 1758], "care": [34, 42, 356, 358, 365], "attent": [34, 42, 340], "gone": [34, 359], "simplifi": [34, 348, 354, 360, 361, 364, 1756, 1758, 1759, 1760, 1763, 1766, 1767], "compat": [34, 44, 47, 48, 60, 61, 147, 148, 151, 152, 157, 158, 163, 164, 165, 166, 169, 174, 175, 184, 185, 316, 317, 320, 321, 326, 327, 332, 333, 334, 335, 341, 350, 354, 355, 357, 360, 377, 1750], "excit": [34, 36, 338, 1750], "complianc": 34, "hope": [34, 377, 1766], "due": [34, 37, 41, 339, 353, 354, 1760], "suit": [34, 41, 338, 339, 343, 356, 363, 376, 1749, 1760, 1766], "some": [34, 35, 40, 41, 42, 172, 173, 310, 311, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 362, 363, 364, 376, 377, 1749, 1750, 1756, 1757, 1759, 1760, 1761, 1766, 1767], "motiv": [34, 362], "great": [34, 35, 42, 356, 360, 362, 1766], "convinc": 34, "celebr": 34, "encourag": [34, 376, 377], "foundat": [34, 1763], "mai": [35, 39, 40, 41, 42, 60, 61, 109, 110, 161, 162, 182, 183, 184, 185, 330, 331, 339, 342, 344, 353, 354, 356, 361, 362, 364, 402, 413, 1767], "ask": [35, 40, 41, 346, 360, 362, 377], "perfectli": 35, "happi": [35, 41, 377], "abund": 35, "better": [35, 37, 338, 354, 355, 357, 358, 359, 362, 363, 364, 1763], "ll": [35, 36, 41, 42, 346, 353, 363], "give": [35, 37, 41, 42, 338, 341, 346, 347, 350, 1760, 1764], "two": [35, 40, 41, 44, 47, 48, 54, 55, 123, 124, 147, 148, 169, 174, 175, 292, 293, 316, 317, 339, 340, 344, 346, 347, 354, 356, 358, 359, 363, 365, 393, 398, 402, 405, 406, 408, 1750, 1757, 1765], "streamlin": [35, 1763], "workflow": [35, 40, 42, 341, 343, 344, 354, 363, 375, 1749, 1750, 1759, 1766, 1767], "save": [35, 37, 172, 173, 349, 356, 377, 1759], "week": [35, 42, 1750], "let": [35, 37, 139, 140, 163, 164, 308, 309, 342, 344, 345, 346, 347, 348, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 1750, 1767], "sai": [35, 41, 352, 362], "deepmind": 35, "releas": [35, 40, 41, 42, 344, 354, 357, 358, 377, 1750, 1760, 1766], "awesom": 35, "paper": 35, "love": 35, "choic": [35, 41, 163, 164, 332, 333, 353, 354, 363, 1760], "perceiverio": 35, "happen": [35, 41, 42, 356, 363, 402, 416], "slew": 35, "rush": 35, "f": [35, 36, 38, 42, 338, 342, 349, 360, 363, 1756], "g": [35, 36, 40, 41, 127, 128, 155, 156, 324, 325, 338, 339, 342, 356, 360, 377, 1749, 1756], "inevit": [35, 1761], "deviat": [35, 153, 154, 155, 156, 322, 323, 324, 325, 339], "often": [35, 39, 339, 348, 349, 350, 351, 354, 356, 377, 1761, 1764, 1767], "erron": 35, "train": [35, 141, 142, 310, 311, 342, 345, 351, 363, 364, 365, 375, 376, 377, 1749, 1750, 1758, 1759, 1764, 1766, 1767], "poor": 35, "converg": 35, "perform": [35, 141, 142, 163, 164, 165, 166, 308, 309, 332, 333, 334, 335, 340, 341, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 377, 1757, 1760, 1761, 1762, 1763, 1764, 1765, 1767], "issu": [35, 36, 39, 40, 339, 341, 344, 346, 348, 354, 356, 360, 364, 377], "etc": [35, 40, 41, 42, 54, 55, 155, 156, 167, 168, 308, 309, 324, 325, 336, 337, 339, 340, 342, 343, 344, 346, 348, 350, 354, 355, 356, 357, 360, 362, 363, 377, 1749, 1758, 1760, 1766], "publish": [35, 377], "manag": [35, 36, 353, 377, 1762, 1764], "get": [35, 36, 39, 40, 41, 60, 61, 172, 173, 338, 343, 344, 345, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 1749, 1760, 1766], "work": [35, 39, 40, 41, 42, 338, 339, 342, 344, 345, 346, 348, 354, 355, 356, 357, 359, 360, 362, 364, 365, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "repositori": [35, 37, 38, 41, 42, 338, 339, 343, 349], "pull": [35, 36, 37, 38, 40, 41, 339, 346, 357, 358, 377], "request": [35, 36, 40, 346, 357, 358], "confus": [35, 344, 348, 353, 358, 1749], "do": [35, 40, 41, 42, 139, 140, 141, 142, 172, 173, 310, 311, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 357, 358, 360, 362, 363, 364, 365, 377, 1749, 1761, 1766, 1767], "don": [35, 40, 41, 42, 167, 168, 336, 337, 344, 356, 364, 377], "expect": [35, 42, 344, 348, 356, 377, 1750], "codebas": [35, 36, 338, 344, 353, 356, 357, 359, 1750], "total": [35, 36, 42, 163, 164, 169, 172, 173, 174, 175, 332, 333, 344, 345, 346, 356, 358, 363, 364, 377], "hour": [35, 343], "spent": 35, "spin": 35, "off": [35, 41, 359, 1766], "test": [35, 39, 40, 60, 61, 165, 166, 184, 185, 334, 335, 338, 344, 346, 348, 349, 352, 354, 357, 377, 402, 409, 410, 1760], "discuss": [35, 41, 42, 344, 345, 353, 354, 356, 358, 361, 362, 363, 377, 1750, 1756, 1761], "error": [35, 39, 41, 42, 60, 61, 172, 173, 184, 185, 340, 341, 343, 344, 345, 346, 348, 349, 350, 354, 356, 357, 362, 377, 1760], "iter": [35, 49, 50, 51, 52, 53, 139, 140, 167, 168, 169, 172, 173, 174, 175, 308, 309, 336, 337, 342, 360, 363], "address": [35, 40, 42, 339, 340, 360, 1756, 1758, 1760, 1766], "sake": 35, "singl": [35, 40, 41, 42, 109, 110, 155, 156, 172, 173, 184, 185, 324, 325, 339, 342, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 363, 364, 365, 377, 402, 408, 416], "multipl": [35, 42, 109, 110, 153, 154, 163, 164, 165, 166, 172, 173, 184, 185, 272, 273, 278, 279, 286, 287, 308, 309, 310, 311, 316, 317, 320, 321, 322, 323, 332, 333, 334, 335, 341, 342, 346, 348, 351, 353, 358, 360, 377, 402, 411, 1758, 1759, 1760, 1767], "line": [35, 41, 339, 340, 346, 349, 352, 356, 358, 361, 362, 363, 364, 375, 1750, 1763], "convert": [35, 40, 49, 50, 51, 52, 53, 54, 55, 60, 61, 176, 177, 184, 185, 340, 352, 356, 360, 377, 378, 388, 1749, 1758, 1759, 1766], "directli": [35, 42, 339, 340, 342, 343, 344, 345, 347, 351, 352, 353, 354, 355, 357, 358, 360, 362, 364, 365, 376, 377, 1764, 1765, 1766], "graph": [35, 141, 142, 342, 351, 354, 358, 361, 377, 1749, 1756, 1760, 1763], "guarante": [35, 340, 377], "turn": [35, 41, 342, 346, 354, 356], "4": [35, 38, 40, 41, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 159, 160, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 342, 346, 356, 360, 362, 363, 364, 365, 393, 395, 398, 402, 403, 404, 405, 406, 407, 411, 412, 414, 415, 416, 1750, 1760, 1766, 1767], "step": [35, 37, 38, 40, 41, 42, 123, 124, 141, 142, 178, 179, 292, 293, 310, 311, 340, 341, 342, 344, 345, 346, 354, 356, 360, 363, 364, 365, 376, 1750, 1760], "take": [35, 36, 40, 41, 42, 163, 164, 286, 287, 342, 343, 344, 345, 346, 347, 353, 354, 355, 356, 358, 360, 362, 364, 365, 377, 1750, 1757, 1758, 1766], "few": [35, 39, 40, 42, 342, 344, 345, 350, 351, 353, 356, 358, 360, 361, 362, 363, 364, 375, 1750, 1760, 1762], "second": [35, 41, 44, 47, 48, 60, 61, 109, 110, 141, 142, 147, 148, 155, 156, 159, 160, 169, 174, 175, 184, 185, 278, 279, 288, 289, 310, 311, 316, 317, 328, 329, 339, 344, 346, 353, 354, 356, 362, 393, 398, 402, 405, 406, 407, 408, 411, 412, 1765], "automat": [35, 40, 41, 42, 338, 342, 343, 344, 349, 351, 358, 359, 361, 364, 365, 1749, 1750, 1760, 1763, 1767], "convers": [35, 40, 50, 51, 52, 53, 60, 61, 102, 177, 271, 352, 359, 361, 365, 376, 377, 1749, 1750, 1759, 1766], "everyon": [35, 36, 42, 377], "regardless": [35, 36, 172, 173, 344, 362, 365], "wouldn": 35, "nice": [35, 356, 1760], "write": [35, 38, 39, 40, 42, 45, 46, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 339, 341, 344, 346, 347, 351, 353, 354, 355, 357, 360, 362, 365, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 415, 416, 1760, 1767], "onc": [35, 40, 41, 42, 155, 156, 324, 325, 339, 342, 344, 345, 346, 354, 356, 358, 360, 363, 377], "know": [35, 42, 355, 356, 357, 1761], "among": [35, 172, 173, 356, 358, 1760], "frantic": 35, "port": 35, "lucid": 35, "honk": 35, "improv": [35, 42, 344, 350, 351, 358, 360, 1749, 1758, 1760, 1762, 1763], "understand": [35, 37, 38, 39, 40, 41, 42, 338, 339, 346, 347, 350, 355, 358, 359, 1756, 1766], "pattern": [35, 139, 140, 308, 309, 344, 347], "hasn": 35, "chang": [35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 341, 342, 343, 344, 346, 347, 354, 356, 357, 358, 360, 364, 377, 1750, 1763, 1766], "now": [35, 38, 41, 339, 341, 342, 344, 349, 350, 352, 354, 356, 357, 358, 362, 363, 365, 376, 377, 1760], "spend": [35, 1760], "torchvis": 35, "probabl": [35, 155, 156, 324, 325, 356], "sonnet": 35, "about": [35, 39, 40, 41, 42, 339, 343, 344, 350, 356, 357, 358, 359, 360, 362, 363, 364, 365, 377, 1761, 1762, 1765], "next": [35, 37, 40, 41, 42, 341, 346, 347, 352, 354, 357, 361, 362, 363, 1750, 1760, 1762], "everyth": [35, 40, 42, 346, 354, 355, 356, 357, 361, 377], "zero": [35, 54, 55, 56, 57, 60, 61, 117, 118, 123, 124, 141, 142, 147, 148, 157, 158, 163, 164, 165, 166, 178, 179, 180, 181, 184, 185, 286, 287, 292, 293, 304, 305, 310, 311, 316, 317, 324, 325, 326, 327, 332, 333, 334, 335, 340, 342, 344, 345, 346, 350, 352, 360, 363, 364, 402, 413, 414, 415, 1750, 1759], "need": [35, 37, 38, 40, 41, 42, 139, 140, 151, 152, 308, 309, 320, 321, 339, 340, 342, 344, 346, 347, 348, 351, 353, 354, 355, 357, 358, 360, 362, 363, 376, 377, 1756, 1760, 1761, 1762, 1766], "said": 35, "high": [35, 40, 155, 156, 324, 325, 354, 358, 363, 1749, 1756, 1757, 1758, 1759, 1760, 1764, 1766, 1767], "level": [35, 36, 40, 42, 342, 351, 354, 358, 359, 360, 363, 364, 365, 377, 1749, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1764, 1765, 1766, 1767], "optim": [35, 141, 142, 310, 311, 353, 361, 363, 365, 376, 1750, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1767], "trainer": [35, 375, 377, 1750, 1767], "statu": [35, 40, 343], "quo": 35, "kera": [35, 1766], "dopamin": 35, "ignit": 35, "catalyst": 35, "lightn": 35, "fastai": 35, "haiku": [35, 365, 1760], "flax": [35, 365, 377, 1760], "trax": [35, 365], "objax": [35, 365], "idea": [35, 37, 354, 357, 361, 376, 1759], "fulli": [35, 340, 344, 350, 353, 358, 360, 361, 362, 363, 364, 365, 377, 1758, 1759, 1760, 1766, 1767], "offer": [35, 41, 354, 364, 1760, 1766, 1767], "strongli": [36, 41, 1766, 1767], "welcom": [36, 41, 42], "absolut": [36, 41, 60, 61, 109, 110, 147, 148, 172, 173, 184, 185, 278, 279, 316, 317, 358, 402, 408], "skill": [36, 1762], "whether": [36, 40, 41, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 139, 140, 141, 142, 151, 152, 155, 156, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 344, 346, 350, 353, 354, 356, 357, 358, 402, 408, 413], "veteran": 36, "beginn": [36, 1760], "aspect": [36, 354, 363, 1750, 1760], "guid": [36, 40, 41, 42, 349, 1750, 1766], "through": [36, 39, 40, 42, 338, 341, 342, 346, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 364, 365, 376, 1758, 1760, 1761, 1762], "journei": [36, 1750], "inclusvi": 36, "big": [36, 377, 1760], "team": [36, 40, 41, 42, 354, 1762], "board": 36, "contributor": [36, 41, 42, 354, 359, 1750, 1760], "split": [36, 42, 151, 152, 172, 173, 320, 321, 359, 360, 377, 1750, 1767], "section": [36, 37, 39, 40, 42, 338, 340, 341, 342, 343, 344, 345, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 1756, 1763, 1766], "below": [36, 38, 40, 41, 54, 55, 332, 333, 338, 342, 343, 344, 345, 346, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 376, 393, 398, 1750, 1756, 1758, 1763, 1765], "best": [36, 39, 40, 41, 42, 338, 344, 349, 356, 357, 1763, 1764], "go": [36, 37, 40, 41, 42, 338, 341, 344, 346, 354, 355, 357, 359, 363, 377, 1756, 1760, 1761, 1765, 1767], "start": [36, 37, 38, 40, 41, 42, 172, 173, 178, 179, 338, 343, 344, 346, 347, 350, 354, 356, 358, 359, 360, 362, 363, 364, 376, 377, 1760, 1766], "finish": [36, 40, 41, 338, 1750], "dive": [36, 39, 40, 42, 342, 344, 355, 359, 362, 363, 377, 1750, 1766], "right": [36, 41, 42, 147, 148, 169, 172, 173, 174, 175, 316, 317, 338, 346, 358, 363], "environ": [36, 37, 38, 42, 376, 1760, 1762], "basic": [36, 38, 40, 346], "fork": [36, 41, 339], "doc": [36, 39, 40, 346, 347, 350, 355, 356, 360, 363, 364, 393, 398, 1750], "document": [36, 39, 42, 344, 346, 354, 355, 356, 363, 365], "local": [36, 37, 38, 41, 339, 351], "task": [36, 42, 354, 355, 376, 1750, 1760, 1766, 1767], "help": [36, 37, 40, 41, 340, 341, 342, 344, 346, 352, 356, 357, 358, 362, 363, 364, 375, 1749, 1750, 1756, 1760, 1762, 1766], "appli": [36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 362, 363, 364, 365, 375, 377, 1749, 1750, 1761], "resourc": [36, 40], "video": [36, 41, 42, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 1758], "contribut": [37, 39, 40, 41, 42, 360, 1764], "toward": [37, 41, 151, 152, 320, 321, 357, 360, 1756, 1760], "requir": [37, 38, 40, 41, 109, 110, 278, 279, 340, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 358, 360, 362, 377, 402, 413, 1760, 1766], "slightli": [37, 342, 354, 360, 364], "more": [37, 39, 40, 42, 123, 124, 151, 152, 159, 160, 292, 293, 320, 321, 328, 329, 338, 339, 340, 341, 342, 343, 344, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 376, 377, 1750, 1758, 1759, 1760, 1761, 1762, 1763, 1766, 1767], "complex": [37, 40, 344, 346, 354, 358, 363, 364, 365, 377, 1749, 1756, 1758, 1760, 1762, 1766, 1767], "setup": [37, 41, 42], "alon": [37, 356], "instanc": [37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 344, 346, 347, 350, 351, 352, 353, 356, 363, 364, 365, 378, 388, 393, 398, 1749, 1761], "mech": 37, "vision": [37, 375, 1750, 1756, 1766], "demo": [37, 376, 1750], "util": [37, 138, 166, 307, 335, 345, 348, 357, 1758, 1766, 1767], "thu": [37, 40, 348, 354], "relat": [37, 39, 41, 42, 349, 354, 356, 357, 358, 376, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767], "folder": [37, 38, 41, 42, 339, 351, 354, 356, 357], "To": [37, 38, 41, 339, 342, 344, 346, 348, 349, 351, 354, 355, 356, 357, 363, 364, 365, 1750], "grasp": [37, 354], "directori": [37, 38, 40, 41, 42, 343, 354, 356], "tree": [37, 38, 344], "place": [37, 39, 42, 49, 51, 53, 54, 55, 60, 61, 109, 110, 139, 140, 151, 152, 172, 173, 178, 179, 182, 183, 184, 185, 278, 279, 308, 309, 320, 321, 324, 325, 338, 339, 342, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 365, 393, 398, 402, 408, 413, 414, 1749, 1762], "dir": [37, 363], "clone": [37, 38, 42], "mutual": [37, 342, 351], "git": [37, 39, 41, 42, 339, 356], "http": [37, 41, 60, 61, 184, 185, 310, 311, 339, 344, 347, 393, 398], "com": [37, 41, 339, 344], "unifyai": [37, 38, 41, 42], "venv": 37, "python3": [37, 38, 41, 42], "m": [37, 38, 41, 42, 44, 47, 48, 54, 55, 123, 124, 127, 128, 147, 148, 155, 156, 184, 185, 292, 293, 316, 317, 324, 325, 338, 360, 393, 398], "ivy_dev": [37, 38, 41, 42], "activ": [37, 38, 41, 42, 46, 64, 139, 140, 167, 168, 171, 188, 336, 337, 357, 364, 1750, 1760, 1763], "window": [37, 38, 42, 117, 118, 145, 146, 272, 273, 286, 287, 314, 315, 393, 394, 395, 396, 397, 399, 1765], "script": [37, 38, 41, 42, 346, 360, 377, 1760], "bat": [37, 38, 41, 42], "mac": [37, 38, 41, 42], "linux": [37, 38, 41, 42, 1763, 1765], "bin": [37, 38, 41, 42, 339, 342], "instal": [37, 38, 41, 42, 341, 349, 376, 1750], "packag": [37, 38, 41, 349, 354, 377, 1760, 1762], "edit": [37, 40, 41, 42], "mode": [37, 41, 42, 123, 124, 147, 148, 172, 173, 292, 293, 316, 317, 342, 346, 358, 377, 1760, 1763], "cd": [37, 38, 41, 42], "pip": [37, 41, 376, 1750], "repeat": [37, 42, 139, 140, 151, 152, 308, 309, 320, 321, 340, 341, 346, 347, 349, 356], "note": [37, 40, 41, 42, 60, 61, 344, 346, 347, 354, 355, 356, 357, 393, 398], "link": [37, 40, 41, 343, 344, 354, 1756, 1758], "reflect": [37, 42, 340, 356], "immedi": [37, 358, 1750], "ivy_robot": [37, 376], "docker": [37, 39], "desktop": [37, 41], "imag": [37, 38, 41, 116, 117, 118, 144, 145, 146, 285, 286, 287, 313, 314, 315, 357, 360, 361, 363, 365, 376, 1750, 1760], "my": [37, 357], "mount": [37, 42], "run": [37, 38, 40, 41, 141, 142, 310, 311, 338, 341, 343, 346, 349, 350, 354, 355, 360, 361, 362, 363, 364, 365, 376, 377, 1758, 1760, 1761, 1762, 1763, 1765, 1766, 1767], "rm": [37, 42], "v": [37, 41, 42, 145, 146, 161, 162, 314, 315, 330, 331, 355, 360, 363, 364, 365, 1750], "pwd": 37, "volum": [37, 117, 118, 286, 287], "rebuild": [37, 169, 172, 173, 174, 175], "after": [37, 38, 40, 41, 42, 141, 142, 153, 154, 172, 173, 310, 311, 322, 323, 339, 344, 346, 348, 350, 354, 356, 359, 1760], "everi": [37, 38, 40, 42, 54, 55, 139, 140, 308, 309, 339, 341, 342, 343, 344, 346, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 364, 1760], "id": [37, 39, 41, 340, 342, 349], "pycharm": 37, "configur": [37, 38, 41, 42, 172, 173, 343, 344, 352], "part": [37, 42, 54, 55, 141, 142, 339, 351, 354, 356, 357, 358, 360, 361, 365, 376, 377, 393, 398, 1758, 1760, 1765, 1766, 1767], "vscode": [37, 41], "found": [37, 40, 41, 42, 169, 172, 173, 174, 175, 340, 341, 342, 344, 347, 349, 352, 353, 354, 358, 1762], "devcontain": 37, "extens": [37, 39, 41, 42, 60, 61, 184, 185, 347, 356, 1033, 1757, 1760, 1767], "remot": [37, 41, 339], "codespac": 37, "config": [37, 172, 173, 339, 363, 1761], "json": [37, 172, 173, 363], "good": [37, 38, 39, 40, 41, 42, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 364], "feel": [37, 38, 40, 41, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "free": [37, 38, 39, 40, 42, 44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "channel": [37, 38, 40, 41, 42, 44, 139, 140, 169, 308, 309, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "pre": [37, 40, 356, 365, 377, 1760], "commit": [37, 40, 339, 343, 346, 356], "_": [37, 38, 41, 60, 61, 184, 185, 310, 311, 347, 349, 353, 356, 363], "builder": [38, 375, 377, 1749, 1750], "dockerfil": [38, 41], "command": [38, 41, 339, 352, 1750], "maco": [38, 1765], "latest": [38, 40, 41, 42, 60, 61, 184, 185, 341, 343, 344, 347, 357, 377, 1765], "ubuntu": [38, 343], "uid": 38, "bash": [38, 42, 339], "root": [38, 41, 42, 60, 61, 184, 185, 354, 363], "both": [38, 42, 60, 61, 109, 110, 123, 124, 147, 148, 178, 179, 184, 185, 316, 317, 341, 342, 344, 345, 346, 347, 350, 351, 353, 354, 356, 358, 360, 362, 363, 364, 365, 376, 377, 402, 404, 408, 1760, 1763, 1765, 1766, 1767], "termin": [38, 41, 42, 169, 172, 173, 174, 175, 342, 360, 363], "3": [38, 41, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 159, 160, 163, 164, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 339, 341, 342, 344, 346, 356, 360, 362, 363, 364, 365, 393, 398, 399, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 416, 1750, 1767], "8": [38, 41, 44, 47, 48, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 133, 134, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 169, 174, 175, 184, 185, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 342, 346, 356, 359, 363, 402, 403, 404, 408, 411, 414, 416, 1750], "built": [38, 41, 42, 342, 356, 361, 1749, 1759, 1760, 1764], "explicit": [38, 41, 342, 344, 353, 354, 360, 377, 1760], "cmd": [38, 41], "file": [38, 40, 41, 42, 172, 173, 339, 340, 341, 342, 343, 347, 349, 351, 354, 355, 356, 357, 360, 363, 1756, 1759, 1760, 1761], "abov": [38, 41, 42, 54, 55, 60, 61, 155, 156, 170, 171, 184, 185, 324, 325, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 353, 354, 355, 356, 358, 360, 362, 363, 364, 365, 393, 398, 1760, 1765], "OR": [38, 41, 42, 165, 166, 334, 335], "move": [38, 42, 123, 124, 182, 183, 292, 293, 357, 393, 398], "execut": [38, 41, 42, 342, 346, 353, 356, 358, 360, 362, 365, 377, 1749, 1756, 1760, 1761, 1762, 1763, 1764, 1766], "insid": [38, 41, 42, 342, 344, 352, 356, 357, 1766], "make_docs_without_dock": 38, "path": [38, 41, 353, 354, 355, 1760], "rel": [38, 42, 44, 47, 48, 109, 110, 141, 142, 147, 148, 151, 152, 161, 162, 178, 179, 278, 279, 310, 311, 316, 317, 320, 321, 330, 331, 355, 358, 402, 408, 1750, 1760, 1762], "assum": [38, 60, 61, 109, 110, 184, 185, 341, 344, 347, 355, 358, 362, 363, 377, 402, 415, 416], "gener": [38, 40, 41, 42, 60, 61, 112, 140, 141, 142, 155, 156, 167, 168, 184, 185, 281, 309, 310, 311, 324, 325, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 362, 364, 365, 376, 377, 393, 395, 398, 1749, 1750, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766], "prefer": [38, 41, 342, 352, 354, 358, 1760], "browser": [38, 41], "affect": [38, 354], "page": [38, 41, 42, 343, 361, 362, 365, 375, 1750], "It": [38, 40, 41, 42, 45, 46, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 346, 347, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 402, 415, 1758, 1760, 1761, 1763, 1764, 1765, 1766, 1767], "synchron": [38, 343], "respons": [38, 42, 344], "rest": [38, 41, 343, 365, 1762], "remove_doc": 38, "privat": [38, 356], "access": [38, 40, 41, 42, 172, 173, 344, 354, 1760, 1762, 1764], "fulfil": [38, 359, 1750], "purpos": [38, 42, 340, 342, 343, 346, 348, 350, 351, 352, 354, 356, 358, 359, 362, 393, 398, 1749, 1750, 1759, 1761, 1764, 1765, 1766], "delet": [38, 42], "autogenerated_sourc": 38, "Then": [38, 40, 42, 352, 357, 377], "format": [38, 170, 171, 172, 173, 176, 177, 338, 344, 345, 346, 347, 348, 360, 362, 363, 1750, 1756, 1758, 1760, 1761], "png": [38, 363], "_imag": 38, "lastli": 38, "docstr": [38, 39, 40, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 349, 350, 351, 354, 357], "structur": [38, 42, 169, 172, 173, 174, 175, 340, 342, 351, 355, 357, 363, 364, 1759, 1760], "rst": [38, 455], "main": [38, 41, 54, 55, 147, 148, 316, 317, 342, 349, 352, 356, 393, 398, 1758, 1760, 1761, 1766], "submodul": [38, 40, 41, 42, 44, 169, 339, 343, 345, 351, 352, 356, 359, 360, 364, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1749, 1750, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "skip": [38, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 343, 352, 356], "read": [38, 40, 172, 173, 1750, 1760], "partial_sourc": 38, "conf": 38, "copi": [38, 42, 54, 55, 56, 57, 109, 110, 139, 140, 151, 152, 172, 173, 178, 179, 180, 181, 182, 183, 278, 279, 308, 309, 320, 321, 341, 344, 347, 354, 355, 360, 363, 376, 377, 402, 413], "5": [38, 41, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 123, 124, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 339, 341, 342, 346, 350, 355, 356, 362, 363, 364, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415], "create_rst_fil": 38, "filter": [38, 117, 118, 145, 146, 272, 273, 286, 287, 314, 315, 356, 393, 396, 397], "recurs": [38, 41, 49, 50, 51, 52, 53, 172, 173, 176, 177, 339, 342, 351, 364, 377], "repres": [38, 60, 61, 147, 148, 184, 185, 316, 317, 358, 362, 1757, 1758, 1761], "its": [38, 40, 41, 42, 49, 52, 53, 56, 57, 151, 152, 172, 173, 180, 181, 308, 309, 320, 321, 344, 347, 352, 354, 355, 356, 357, 358, 365, 377, 402, 416, 1749, 1759, 1760, 1766], "overal": [38, 342, 344, 345, 347, 365, 1756, 1758, 1759, 1760], "markup": 38, "6": [38, 44, 47, 48, 54, 55, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 161, 162, 163, 164, 169, 174, 175, 178, 179, 184, 185, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 341, 342, 346, 356, 358, 360, 362, 363, 364, 402, 403, 407, 412, 416], "extract": [38, 354, 357, 1756, 1760, 1761, 1766], "get_functions_and_class": 38, "doctr": 38, "7": [38, 42, 44, 45, 46, 47, 48, 60, 61, 109, 110, 117, 118, 123, 124, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 169, 174, 175, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 342, 346, 351, 353, 356, 393, 395, 397, 402, 403, 408], "readm": [38, 377], "module_nam": 38, "copy_readme_to_rst": 38, "tabl": [38, 344, 354, 1760], "content": [38, 40, 172, 173, 353, 360, 363], "toc": 38, "append": [38, 172, 173, 348, 356, 360, 363], "append_toctree_to_rst": 38, "9": [38, 44, 47, 48, 60, 61, 117, 118, 123, 124, 133, 134, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 155, 156, 161, 162, 163, 164, 169, 174, 175, 180, 181, 184, 185, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 342, 346, 356, 363, 364, 1756], "index": [38, 54, 55, 139, 140, 157, 158, 159, 160, 161, 162, 172, 173, 178, 179, 308, 309, 326, 327, 328, 329, 330, 331, 342, 351, 355, 356, 362, 1760], "create_index_rst": 38, "14": [38, 56, 57, 60, 61, 117, 118, 123, 124, 155, 156, 163, 164, 180, 181, 184, 185, 292, 293, 308, 309, 316, 317, 320, 321, 324, 325, 342, 346, 356], "\u03c0": 38, "namespac": [38, 40, 344, 352, 354, 355, 357, 360, 365], "remov": [38, 40, 147, 148, 172, 173, 316, 317, 341, 344, 347, 351, 356, 358, 365, 1760], "resours": 39, "climb": 39, "steep": 39, "curv": 39, "respect": [39, 40, 42, 60, 61, 141, 142, 184, 185, 310, 311, 340, 342, 344, 346, 350, 354, 356, 357, 1756, 1766], "behaviour": [39, 40, 42, 338, 339, 340, 342, 344, 347, 348, 350, 353, 354, 356, 357, 362, 402, 413], "frontend": [39, 338, 344, 356, 357, 359, 361, 1749, 1760], "refer": [39, 40, 41, 42, 163, 164, 165, 166, 310, 311, 332, 333, 334, 335, 339, 344, 350, 351, 354, 355, 356, 377, 393, 398, 1749, 1760], "realpython": 39, "pyn": 39, "kind": [39, 123, 124, 354, 356, 358, 360, 377], "stack": [39, 44, 47, 48, 147, 148, 151, 152, 172, 173, 292, 293, 316, 317, 320, 321, 360, 1750, 1756, 1758, 1765, 1766], "overflow": [39, 344], "platform": [39, 41, 1758, 1762, 1764], "sort": [39, 134, 162, 169, 172, 173, 174, 175, 303, 331, 357, 402, 416], "inform": [39, 40, 41, 42, 141, 142, 310, 311, 339, 342, 348, 355, 356, 1763], "pilot": 39, "bit": [39, 40, 41, 342, 344, 346, 351, 360, 362, 1766], "thei": [39, 40, 42, 109, 110, 147, 148, 155, 156, 172, 173, 316, 317, 324, 325, 338, 339, 341, 342, 343, 344, 345, 346, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 377, 402, 404, 416, 1750, 1757, 1760, 1762, 1763, 1766, 1767], "done": [39, 40, 41, 42, 339, 346, 349, 354, 356, 363, 1760], "faster": [39, 1749, 1762, 1765], "head": [39, 41, 1750], "stuck": [39, 40], "spell": 39, "check": [39, 40, 41, 42, 49, 50, 51, 52, 53, 56, 57, 139, 140, 141, 142, 172, 173, 180, 181, 308, 309, 310, 311, 339, 342, 346, 348, 352, 354, 357, 359, 360, 362, 363, 364, 1750], "though": [39, 40, 42, 344, 347, 351, 354, 358, 363, 377], "sound": [39, 359], "odd": [39, 339], "peopl": [39, 41, 42, 338, 1760, 1762], "action": [39, 346, 356], "integr": [39, 41, 56, 57, 109, 110, 180, 181, 184, 185, 338, 402, 416, 1758, 1760, 1762, 1763, 1764], "keep": [39, 40, 41, 42, 151, 152, 172, 173, 320, 321, 339, 342, 343, 356, 357, 358, 363, 365], "explain": [40, 41, 42, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 1750, 1756, 1763, 1766], "frequent": [40, 42, 1760], "wherebi": [40, 1757], "outlin": [40, 41, 42, 338, 342, 344, 347, 351, 353, 354, 356], "broad": [40, 1762], "individu": [40, 42, 339, 343, 351, 353, 354, 1760, 1763, 1766, 1767], "sub": [40, 42, 151, 152, 169, 172, 173, 174, 175, 176, 177, 184, 185, 308, 309, 320, 321, 338, 342, 348, 354, 355, 356, 362, 363, 364, 1750, 1756], "distribut": [40, 127, 128, 149, 150, 155, 156, 296, 297, 318, 319, 324, 325, 345, 377, 1760, 1763], "across": [40, 157, 158, 172, 173, 308, 309, 326, 327, 339, 342, 344, 346, 348, 350, 351, 354, 356, 358, 1758, 1760, 1765], "todo": [40, 344, 354], "detail": [40, 42, 339, 341, 342, 343, 350, 351, 352, 354, 355, 356, 357, 360, 362, 363, 364, 1762, 1766], "select": [40, 41, 42, 163, 164, 332, 333, 353, 356, 360, 362, 365, 377, 1760, 1763, 1764], "alloc": [40, 42, 54, 55, 56, 57, 180, 181, 377], "describ": [40, 42, 343, 356, 360, 365, 1760], "explan": [40, 42, 342, 347, 350, 354, 362], "instead": [40, 41, 42, 60, 61, 184, 185, 339, 342, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 363, 377, 1758, 1760, 1766, 1767], "focu": [40, 1758, 1759, 1762, 1767], "alwai": [40, 42, 56, 57, 141, 142, 151, 152, 180, 181, 310, 311, 320, 321, 340, 341, 342, 344, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 377, 402, 404], "NOT": 40, "pypi": [40, 41, 377], "instruct": [40, 41, 339, 1758, 1761, 1764, 1766], "static": [40, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 346, 347, 351, 352, 354, 377, 1759, 1760, 1761], "method": [40, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 344, 346, 347, 349, 350, 351, 352, 356, 357, 360, 361, 364, 365, 377, 1750, 1761, 1767], "revers": [40, 44, 47, 48, 123, 124, 139, 140, 147, 148, 163, 164, 169, 174, 175, 292, 293, 316, 317, 332, 333, 342, 344, 346, 347, 354, 358, 365, 377], "familiar": [40, 41], "yourself": [40, 42, 354, 356, 358, 376], "hypothesi": [40, 42, 339, 352], "fail": [40, 41, 42, 339, 343, 344, 346, 349, 354], "els": [40, 139, 140, 155, 156, 324, 325, 341, 344, 348, 351, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 377, 1761], "cover": [40, 339, 346, 347, 351, 352, 356, 358, 359], "lambda": [40, 356, 360, 363], "direct": [40, 354, 355, 358, 364, 365, 376, 1756, 1760, 1761, 1764], "bind": [40, 342, 1759, 1760], "defin": [40, 41, 54, 55, 123, 124, 139, 140, 147, 148, 178, 179, 292, 293, 308, 309, 316, 317, 343, 344, 347, 350, 354, 355, 356, 357, 362, 364, 377, 393, 394, 396, 397, 398, 402, 413, 1749, 1757, 1758, 1759, 1760, 1761, 1764, 1766, 1767], "def": [40, 41, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 455, 1750], "special": [40, 44, 47, 48, 163, 164, 169, 174, 175, 316, 317, 339, 340, 346, 347, 348, 350, 353, 357, 402, 415, 1760, 1761, 1762], "sure": [40, 41, 42, 339, 343, 354, 355, 358], "aforement": 40, "correct": [40, 42, 163, 164, 332, 333, 338, 342, 344, 345, 349, 350, 351, 355, 356, 1750], "categori": [40, 339, 340, 342, 344, 354, 357, 359, 1750], "parent": [40, 362], "arraywithelementwis": [40, 44, 47, 48, 60, 340, 362], "containerwithmanipul": [40, 169, 174, 175, 320], "hint": [40, 60, 61, 184, 185, 340, 347, 350, 351, 353, 354, 357], "add": [40, 41, 42, 44, 47, 48, 60, 61, 153, 154, 167, 168, 169, 172, 173, 174, 175, 184, 185, 322, 323, 336, 337, 338, 339, 340, 341, 342, 344, 347, 350, 351, 353, 354, 356, 357, 358, 360, 362, 377, 1750, 1756, 1758, 1760], "thorough": [40, 347, 350, 356], "ensur": [40, 41, 42, 139, 140, 340, 344, 346, 348, 349, 350, 352, 353, 354, 355, 356, 357, 1760], "produc": [40, 272, 273, 344, 356, 357, 393, 395, 1761, 1763], "comment": [40, 41, 42, 339, 344, 349, 354], "add_reformatting_checklist_": 40, "category_nam": [40, 344, 345, 347, 350, 351], "pr": [40, 42, 339, 354], "belong": [40, 172, 173, 339, 364], "shown": [40, 42, 167, 168, 172, 173, 336, 337, 343, 344, 346, 349, 350, 354, 355, 356, 357, 360, 362, 377], "trigger": [40, 343], "autom": [40, 356, 1749, 1750, 1762], "bot": 40, "proper": 40, "markdown": 40, "text": [40, 42, 346, 347], "might": [40, 41, 42, 139, 140, 344, 346, 349, 352, 353, 354, 356, 357, 358, 360, 362, 363, 1749], "moment": [40, 141, 142, 310, 311, 341, 377], "patient": [40, 41], "modifi": [40, 41, 42, 123, 124, 172, 173, 292, 293, 339, 341, 344, 345, 347, 349, 351, 357, 360], "item": [40, 49, 53, 139, 140, 167, 168, 172, 173, 278, 279, 308, 309, 342, 344, 360, 362, 363, 365, 1750], "symbol": [40, 41, 1760, 1761], "emoji": 40, "within": [40, 42, 49, 52, 53, 354, 355, 356, 364, 377, 402, 408, 1756, 1757, 1761], "legend": 40, "mark": [40, 42, 356], "review": [40, 42, 346, 354, 357], "checkbox": [40, 41], "proce": [40, 41], "elabor": 40, "struggl": 40, "assigne": 40, "author": [40, 42, 1750, 1758, 1762], "later": [40, 172, 173, 356, 1760], "status": 40, "manual": [40, 41, 42, 343, 354, 356, 364], "refrain": 40, "transpil": [40, 354, 359, 360, 361, 1749, 1750, 1760, 1766, 1767], "locat": [40, 42, 341, 345, 354, 355, 356, 357, 1758], "subsect": [40, 42, 339, 343], "verifi": [40, 344, 345, 354, 356, 357], "miss": [40, 41, 340, 342, 346, 349, 356], "simpler": [40, 42, 354, 1761, 1767], "titl": [40, 42, 354, 1750], "label": [40, 42, 149, 150, 318, 319, 343, 354, 359, 360, 361, 365, 1760], "suggest": [40, 41, 42, 344, 354, 356, 357], "simpli": [40, 42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 358, 360, 364, 365, 377, 1749, 1761, 1766], "leav": [40, 49, 52, 53, 169, 174, 175, 176, 177, 292, 293, 308, 309, 320, 321, 332, 333, 342, 344, 346, 347, 350, 351, 353, 356, 363, 364], "assess": [40, 358], "appropri": [40, 42, 157, 158, 167, 168, 326, 327, 336, 337, 352, 356, 402, 408], "wait": [40, 42, 169, 172, 173, 174, 175, 354], "composit": [40, 338, 340, 341, 342, 344, 353, 355, 356, 358, 360, 364, 365, 377, 402, 416, 1749, 1761], "temporari": [40, 344], "merg": [40, 42, 339, 354, 1760], "close": [40, 41, 42, 347, 354, 356, 358, 1760], "normal": [40, 117, 118, 153, 154, 155, 156, 286, 287, 322, 323, 324, 325, 363, 402, 415, 1758], "altern": [40, 41, 109, 110, 278, 279, 353, 354, 363, 402, 408, 414, 1763], "composition": [40, 353, 354], "choos": [40, 41, 42, 157, 158, 182, 183, 361, 365, 1767], "decid": [40, 41, 172, 173, 344, 358], "addit": [40, 41, 42, 139, 140, 153, 154, 182, 183, 308, 309, 322, 323, 342, 344, 346, 347, 354, 356, 357, 358, 362, 363, 365, 1760, 1761, 1762, 1766], "potenti": [40, 41, 42, 344, 354, 359, 1763], "pend": 40, "show": [40, 41, 42, 172, 173, 343, 346, 353, 354, 356, 376, 377, 1750, 1760], "helpfulli": [40, 358, 1758], "prevent": [40, 42, 141, 142, 310, 311, 344, 349, 353, 354, 357, 358], "problemat": [40, 41], "unimpl": 40, "final": [40, 42, 139, 140, 308, 309, 340, 344, 346, 347, 349, 351, 353, 354, 358, 359, 363, 1756, 1766], "issue_link": 40, "chosen": 40, "correctli": [40, 41, 42, 147, 148, 157, 158, 316, 317, 326, 327, 342, 344, 346, 348, 349, 350, 353, 355, 356, 358, 364, 377], "alias": [40, 354, 355], "detect": [40, 41, 172, 173, 341, 342, 349, 356, 363, 364], "alias_nam": 40, "function_nam": 40, "notic": [40, 358], "alia": 40, "alreadi": [40, 41, 42, 172, 173, 341, 342, 344, 350, 354, 358, 377, 1750, 1760, 1762, 1767], "push": [40, 42, 339, 349, 1766], "liner": 40, "meanwhil": 40, "reselect": 40, "too": [40, 41, 42, 339, 343, 344, 349, 377], "placement": 40, "categoris": [40, 339, 354], "faithfulli": 40, "descript": [40, 60, 61, 184, 185, 316, 317, 347], "inner": [40, 147, 148, 178, 179, 316, 317, 353], "fall": [40, 42, 344, 359, 1750], "under": [40, 41, 42, 338, 339, 342, 346, 347, 351, 354, 356, 358, 359, 360, 363, 365, 377, 1760, 1763, 1767], "linalg": [40, 120, 148, 289, 317, 353, 1750], "match": [40, 56, 57, 172, 173, 180, 181, 342, 346, 1761, 1766], "creation_routin": [40, 355], "fft": [40, 1760], "indexing_routin": 40, "logic": [40, 165, 166, 334, 335, 340, 344, 345, 348, 352, 354, 356, 362, 1750], "ma": 40, "manipulation_routin": 40, "mathematical_funct": [40, 354], "matrix": [40, 44, 47, 48, 139, 140, 145, 146, 147, 148, 308, 309, 314, 315, 316, 317, 344, 354, 393, 398, 1758, 1760], "random": [40, 128, 156, 172, 173, 297, 325, 345, 356, 357, 365, 376, 1750, 1760], "sorting_searching_count": 40, "statist": [40, 136, 164, 305, 333, 336, 337, 344, 354, 356, 357, 1760], "ufunc": 40, "hierarchi": [40, 172, 173, 363, 1756, 1766], "decomposit": [40, 1767], "matrix_and_vector_product": 40, "matrix_eigenvalu": 40, "norms_and_other_numb": 40, "solving_equations_and_inverting_matric": 40, "product": [40, 60, 61, 147, 148, 163, 164, 184, 185, 288, 289, 316, 317, 332, 333, 360, 1760, 1762], "seem": [40, 41, 358, 364, 365, 377, 1760], "func": [40, 172, 173, 346], "gleam": 40, "yet": [40, 41, 377], "uncom": 40, "test_numpy_inn": 40, "mirror": [40, 1760], "correspond": [40, 42, 56, 57, 60, 61, 109, 110, 123, 124, 139, 140, 151, 152, 163, 164, 169, 172, 173, 174, 175, 180, 181, 184, 185, 278, 279, 288, 289, 292, 293, 320, 321, 332, 333, 340, 341, 342, 343, 344, 346, 347, 350, 351, 352, 354, 356, 358, 360, 402, 404, 409, 410, 416, 1760], "ivy_test": [40, 41, 42, 339, 343, 355], "test_ivi": [40, 41, 42, 343, 355, 356], "test_frontend": [40, 355], "unsur": [40, 356], "put": [40, 356, 377, 1766], "explor": [40, 41, 42, 344, 358, 361, 365, 376, 1760, 1763], "outer": [40, 147, 148, 316, 317], "confirm": 40, "ve": [40, 41, 42, 155, 156, 324, 325, 358, 359, 362, 1749, 1750], "empti": [40, 41, 139, 140, 172, 173, 308, 309, 340, 344, 345], "along": [40, 45, 46, 109, 110, 123, 124, 135, 136, 139, 140, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 184, 185, 278, 279, 292, 293, 304, 305, 308, 309, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 346, 353, 357, 358, 360, 402, 414, 416, 1760], "backend_nam": [40, 341, 344, 345, 347, 350, 351, 352], "relevant_submodul": 40, "sometim": [40, 41, 42, 344, 354, 356, 357, 358], "behav": [40, 339, 348, 353, 355, 362, 1761], "helper": [40, 343, 344, 348, 363, 1749], "recreat": 40, "defer": [40, 340, 342, 344, 345, 351, 352, 353, 354, 356, 1766], "clearer": [40, 348, 363], "mind": [40, 340, 342, 356], "posit": [40, 42, 49, 50, 51, 60, 61, 109, 110, 123, 124, 139, 140, 147, 148, 151, 152, 184, 185, 278, 279, 292, 293, 308, 309, 316, 317, 320, 321, 339, 342, 352, 354, 355, 356, 357, 363, 376, 393, 398, 402, 408, 410, 413, 1762], "keyword": [40, 49, 50, 51, 169, 172, 173, 174, 175, 342, 344, 345, 352, 353, 354, 355, 356, 357, 363, 402, 413], "strategi": [40, 352, 355], "draw": [40, 155, 156, 324, 325, 355, 356], "realli": [41, 342, 377, 1765, 1766], "gh": 41, "your_fold": 41, "cours": [41, 42, 339, 346, 357, 358, 363, 377, 1765, 1766], "whatev": [41, 342, 377], "elig": 41, "student": 41, "licenc": 41, "remind": 41, "account": [41, 347, 354], "licens": [41, 1763], "expir": 41, "abl": [41, 42, 172, 173, 339, 344, 351, 353, 354, 358, 360, 365, 1763, 1766], "profession": 41, "trial": 41, "jetbrain": 41, "valid": [41, 117, 118, 145, 146, 165, 166, 286, 287, 314, 315, 334, 335, 341, 344, 346, 355, 356, 1761], "bui": [41, 1766], "paid": 41, "pace": 41, "align": [41, 42, 119, 120, 172, 173, 288, 289, 360, 362, 1749, 1766], "stabl": [41, 139, 140, 161, 162, 308, 309, 330, 331, 341, 344, 360, 377, 393, 398], "mayb": [41, 49, 52, 53, 360, 362], "person": [41, 42], "experi": [41, 356, 361, 363, 377], "avoid": [41, 42, 341, 342, 344, 349, 352, 354, 356, 357, 1760], "abil": [41, 358, 361, 377, 1760], "certain": [41, 42, 172, 173, 339, 344, 356, 358, 377, 1764], "perhap": [41, 362, 363, 364, 377, 1766], "track": [41, 42, 1760], "click": [41, 42, 343, 347, 361, 1750], "icon": [41, 42], "side": [41, 42, 161, 162, 330, 331], "left": [41, 42, 109, 110, 135, 136, 147, 148, 157, 158, 161, 162, 278, 279, 304, 305, 316, 317, 326, 327, 330, 331, 344, 346, 402, 414], "panel": 41, "drop": [41, 377], "down": [41, 356, 1749, 1760, 1766], "builtin": [41, 362, 364], "virtualenv": 41, "o": [41, 338, 360], "tick": [41, 42, 343], "test_array_api": [41, 42, 339, 356], "r": [41, 42, 172, 173, 338], "txt": [41, 339, 357], "visual": [41, 354, 377, 1760, 1762, 1765], "mitig": [41, 1766], "conflict": [41, 42, 354, 363], "particular": [41, 42, 339, 341, 344, 346, 352, 353, 354, 355, 356, 357, 358, 1756, 1760, 1766], "system": [41, 42, 341, 344, 377, 1758, 1760, 1763, 1765, 1767], "wsl": 41, "powershel": 41, "admin": 41, "visit": [41, 42, 355], "deploy": [41, 1759, 1762, 1763, 1766, 1767], "top": [41, 42, 123, 124, 151, 152, 292, 293, 344, 354, 356, 363, 364, 1760, 1764], "press": [41, 42, 363, 1750], "ok": 41, "debug": [41, 42, 342, 343, 356, 358, 363, 1760], "dialog": 41, "invalid": [41, 165, 166, 334, 335, 344, 349], "caus": [41, 42, 339, 341, 342, 343, 344, 346, 353, 356, 377], "earlier": [41, 42], "necessari": [41, 42, 151, 152, 320, 321, 341, 342, 346, 352, 353, 354, 356, 358], "virtualis": 41, "sudo": 41, "apt": 41, "ca": 41, "certif": 41, "curl": 41, "gnupg": 41, "lsb": 41, "mkdir": 41, "p": [41, 42, 139, 140, 308, 309, 316, 317, 338, 402, 403], "keyr": 41, "fssl": 41, "download": [41, 356], "gpg": 41, "dearmor": 41, "echo": 41, "deb": 41, "arch": 41, "dpkg": 41, "architectur": [41, 365, 377, 1758, 1759, 1760, 1763, 1764, 1765], "lsb_releas": 41, "tee": 41, "dev": [41, 58, 59, 172, 173, 182, 183, 345, 351, 362, 364], "null": 41, "ce": 41, "cli": 41, "containerd": 41, "io": 41, "compos": [41, 342, 356, 377, 1760, 1767], "plugin": 41, "systemctl": 41, "permiss": 41, "post": [41, 153, 154, 322, 323, 365], "coupl": [41, 340, 362, 364, 1760], "unit": [41, 45, 46, 170, 171, 339, 344, 354, 355, 356, 377, 1761, 1764], "test_ab": [41, 356], "context": [41, 42, 145, 146, 314, 315, 346], "menu": 41, "editor": 41, "green": [41, 42, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 1810, 1811], "appear": [41, 42, 358], "pytest": [41, 42, 339, 356], "keyboard": 41, "shortcut": 41, "displai": [41, 342, 356, 363], "screenshot": 41, "ctrl": [41, 42], "shift": [41, 42, 151, 152, 169, 174, 175, 178, 179, 320, 321, 346, 350, 393, 398], "bottom": [41, 1766], "screen": [41, 172, 173, 363], "elsewher": 41, "test_elementwis": 41, "tab": [41, 343, 363, 1750], "progress": [41, 42, 365], "bar": 41, "shell": [41, 42], "run_tests_cli": [41, 339], "run_ivy_core_test": 41, "run_ivy_nn_test": 41, "run_ivy_stateful_test": 41, "run_test": 41, "sh": [41, 42, 339], "test_depend": 41, "test_ivy_cor": 41, "test_ivy_nn": 41, "test_ivy_st": 41, "test_": [41, 339, 343, 355], "test_funct": [41, 42, 343, 355, 356], "test_cor": [41, 42, 343, 355], "wish": [41, 354], "ivy_cor": 41, "ivy_nn": 41, "ivy_st": 41, "dure": [41, 141, 142, 163, 164, 172, 173, 182, 183, 310, 311, 332, 333, 342, 344, 345, 348, 351, 352, 353, 354, 355, 356, 358, 377, 1760, 1761, 1766], "simplest": [41, 346, 356, 358], "valu": [41, 42, 54, 55, 56, 57, 60, 61, 109, 110, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 362, 377, 393, 398, 402, 408, 409, 410, 413, 415, 416, 1760, 1761], "becaus": [41, 42, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 358, 360, 364, 365, 377, 1760, 1763, 1766], "header": [41, 42], "summari": [41, 42, 172, 173, 356], "recommend": [41, 42, 341], "advanc": [41, 1759], "q": [41, 42, 314, 315, 338, 377], "fix": [41, 42, 343, 344, 356, 357], "arrow": 41, "button": [41, 42], "funcion": 41, "target": [41, 338, 355, 357, 359, 363, 364, 365, 1750, 1756, 1758, 1759, 1760, 1763, 1765, 1766], "test_stat": [41, 343], "test_submodule_nam": 41, "test_function_nam": 41, "debugg": 41, "studio": 41, "easiest": 41, "effici": [41, 42, 342, 349, 351, 352, 353, 356, 360, 363, 377, 1760, 1762, 1763], "afterward": [41, 363], "background": [41, 1760, 1762], "restart": 41, "corner": [41, 42, 356], "overlap": [41, 357, 358, 1761], "test_file_path": 41, "test_fn_nam": 41, "enter": [41, 42, 340, 344, 345, 350, 352], "forward": [41, 341, 347, 356, 357, 358, 365, 376, 377, 1760, 1761], "slash": 41, "regular": [41, 42, 354, 355, 1760], "headach": 41, "arm": [41, 42], "m1": 41, "featur": [41, 42, 350, 354, 357, 358, 363, 377, 1750, 1760, 1761, 1762, 1766], "vm": 41, "azur": 41, "cloud": [41, 376, 1762], "mean": [41, 42, 139, 140, 145, 146, 155, 156, 163, 164, 172, 173, 308, 309, 314, 315, 324, 325, 332, 333, 336, 337, 338, 339, 341, 342, 344, 345, 346, 351, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 376, 377, 1749, 1750, 1757, 1760], "longer": [41, 344, 352, 353, 356, 1760], "worri": 41, "agnost": [41, 340, 350, 360, 362, 365, 377, 1750, 1766, 1767], "usual": [41, 339, 354, 356, 358], "favourit": 41, "theme": 41, "unsupport": [41, 349, 354], "old": [41, 172, 173, 341, 353], "slow": 41, "ipad": 41, "long": [41, 42, 343, 344, 346, 360, 1760], "cool": [41, 357], "sever": [41, 42, 357, 377, 1758, 1764], "requisit": 41, "pane": [41, 42], "readi": 41, "begin": [41, 339, 355], "dropdown": 41, "master": [41, 42, 339, 357, 1760], "view": [41, 42, 123, 124, 292, 293, 343, 1760], "box": 41, "upto": [41, 42], "15": [41, 60, 61, 109, 110, 117, 118, 123, 124, 155, 156, 163, 164, 169, 174, 175, 178, 179, 184, 185, 278, 279, 292, 293, 308, 309, 314, 315, 320, 321, 324, 325, 332, 333, 346, 402, 411, 1763], "minut": 41, "launch": 41, "12": [41, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 155, 156, 163, 164, 184, 185, 272, 273, 286, 287, 292, 293, 308, 309, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 332, 333, 341, 342, 344, 346, 357, 393, 396, 397], "output": [41, 42, 45, 46, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 338, 339, 340, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 362, 364, 365, 377, 393, 394, 395, 396, 397, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1749, 1750, 1761], "That": [41, 42, 356, 362, 363, 364, 1761], "approach": [41, 42, 342, 344, 351, 352, 356, 358, 362, 363, 377, 1757, 1764, 1766], "colour": 41, "applic": [41, 344, 345, 352, 364, 1757, 1758, 1760, 1762, 1764, 1766], "chanc": 41, "troubleshoot": 41, "ever": 41, "64": [41, 60, 61, 109, 110, 117, 118, 145, 146, 169, 174, 175, 184, 185, 278, 279, 286, 287, 308, 309, 314, 315, 316, 317, 324, 325, 363, 364, 402, 403, 404, 1750, 1765], "usr": 41, "flask": 41, "toolbar": [41, 42], "_array_modul": [41, 339], "array_api_test": [41, 42, 339], "refresh": 41, "conftest": 41, "nutshel": [41, 350], "hook": 41, "lint": 41, "accept": [41, 42, 49, 60, 61, 176, 184, 185, 340, 342, 345, 346, 347, 350, 351, 352, 353, 355, 356, 357, 362, 393, 398, 1749, 1750, 1758], "attempt": [41, 349, 377], "succe": 41, "properli": [41, 338, 348, 356], "server": [42, 1760], "suitabl": [42, 272, 273, 342, 357, 393, 396, 397, 1760], "quick": [42, 338, 355, 364], "tendenc": 42, "land": 42, "end": [42, 341, 353, 357, 358, 359, 376, 377, 1750, 1758, 1763], "world": [42, 1762], "come": [42, 354, 357, 358, 364, 375, 1749, 1750, 1760], "fly": [42, 1760], "hard": [42, 356, 362, 1760], "receiv": [42, 344, 345, 356], "internship": 42, "bug": [42, 354, 356, 357], "serv": [42, 340, 342, 350, 351, 356, 358, 359, 1749, 1750, 1758], "suspect": 42, "observ": [42, 348, 360, 1762], "act": [42, 346, 377, 1767], "placehold": [42, 340, 349, 350, 1749], "ii": 42, "iii": 42, "issue_numb": 42, "No": [42, 1760], "soon": [42, 344, 375, 377, 1750], "partial": [42, 172, 173], "solut": [42, 342, 344, 356, 358, 1758, 1762], "respond": 42, "shape": [42, 44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 344, 345, 346, 347, 350, 353, 354, 355, 356, 357, 360, 362, 363, 364, 365, 393, 396, 397, 398, 402, 404, 415, 1750], "dai": [42, 343], "warn": 42, "without": [42, 172, 173, 340, 342, 344, 345, 346, 348, 349, 350, 351, 355, 356, 357, 358, 362, 363, 364, 376, 377, 1757, 1760, 1761, 1762, 1766], "likewis": [42, 342, 344, 347, 350, 351, 354, 358, 363, 1766], "freed": 42, "flag": [42, 141, 142, 172, 173, 310, 311, 344, 352, 353, 354, 356], "remain": [42, 151, 152, 157, 158, 320, 321, 326, 327, 343, 346, 357, 358, 377], "short": [42, 344, 354, 357, 360, 364], "basi": [42, 339, 363], "situat": [42, 365], "upon": [42, 346, 353, 356, 358, 377, 1759, 1760], "period": [42, 272, 273, 357, 393, 394, 395, 396, 397], "unabl": [42, 358], "obvious": 42, "never": [42, 151, 152, 320, 321, 344, 354, 356, 358], "qualiti": 42, "hypothet": 42, "frustrat": 42, "delai": 42, "busi": 42, "fine": [42, 344, 346, 354, 362, 365, 1766], "inact": 42, "me": 42, "unfairli": 42, "definit": [42, 109, 110, 147, 148, 184, 185, 316, 317, 344, 351, 362, 402, 416], "investig": 42, "maximum": [42, 60, 61, 109, 110, 139, 140, 141, 142, 151, 152, 157, 158, 169, 172, 173, 174, 175, 184, 185, 278, 279, 308, 309, 310, 311, 320, 321, 326, 327, 346, 363, 402, 405, 1750, 1767], "incomplet": 42, "three": [42, 342, 346, 354, 356, 358, 359, 360, 1750, 1761, 1766], "per": [42, 117, 118, 145, 146, 286, 287, 314, 315, 354, 356, 363], "self": [42, 44, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 348, 354, 355, 360, 362, 363, 364, 365, 1750], "assign": [42, 341, 344, 349, 353, 362], "sequenc": [42, 123, 124, 127, 128, 151, 152, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 296, 297, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 345, 346, 348, 356, 357, 360, 365, 376, 402, 416, 1763], "regist": 42, "wherea": [42, 340, 342, 344, 345, 346, 350, 351, 356, 357, 365, 1757], "primarili": [42, 342, 1760], "invit": 42, "roadmap": [42, 343, 1750], "mainli": [42, 338, 361, 363, 1749, 1760], "extend": [42, 341, 347, 350, 354, 357, 377, 1757, 1760, 1766], "ideal": [42, 353, 363], "Such": [42, 356], "easier": [42, 340, 344, 354, 357, 1749, 1760, 1762], "interv": [42, 155, 156, 165, 166, 324, 325, 334, 335], "forth": 42, "rare": [42, 345, 377, 1765], "scenario": 42, "someon": [42, 377], "someth": [42, 357, 363, 364, 377, 1766], "unfortun": 42, "redund": [42, 344, 348, 354, 358], "behind": [42, 141, 142, 338, 350, 356, 359, 361], "well": [42, 308, 309, 343, 344, 353, 354, 355, 356, 364, 365, 376, 1759, 1760, 1761, 1765], "practic": [42, 343, 1763], "separ": [42, 340, 342, 356, 360, 362, 363, 1761, 1765], "branch": [42, 339, 377, 1760], "role": [42, 354, 361, 1761, 1763, 1767], "kept": [42, 169, 172, 173, 174, 175, 353, 357], "date": [42, 357], "upstream": [42, 339], "complic": [42, 355, 360], "merge_with_upstream": 42, "name_of_your_branch": 42, "resolv": [42, 339, 344, 360], "abort": 42, "tediou": [42, 346], "resolut": 42, "stash": 42, "reinstat": 42, "fetch": [42, 339], "uncommit": 42, "unstag": 42, "untrack": 42, "comprehens": [42, 339], "atlassian": 42, "tutori": [42, 354], "wrote": 42, "piec": [42, 340, 351, 352, 360, 1756, 1758], "tag": 42, "navig": [42, 338], "blame": 42, "revis": 42, "log": [42, 60, 61, 147, 148, 184, 185, 316, 317, 342, 343, 346, 351, 353, 354, 356, 358, 360, 363, 1750], "eg": 42, "16": [42, 44, 47, 48, 60, 61, 109, 110, 117, 118, 123, 124, 145, 146, 147, 148, 155, 156, 163, 164, 169, 174, 175, 180, 181, 184, 185, 286, 287, 292, 293, 308, 309, 314, 315, 320, 321, 324, 325, 346, 363, 402, 404], "past": [42, 355, 1760], "l": [42, 147, 148, 184, 185, 316, 317, 338], "filepath": [42, 172, 173, 339], "grep": 42, "commit_id": 42, "handi": 42, "histori": 42, "toggl": 42, "vertic": 42, "highlight": [42, 346], "previou": [42, 141, 142, 310, 311, 339, 350, 354, 356, 358, 365, 377, 1763], "whenev": [42, 343, 344, 348, 352, 356, 363], "think": [42, 346, 1761], "gain": [42, 339, 359, 364, 1760], "quit": [42, 340, 346, 347, 351, 352, 356, 358, 1760, 1766], "newli": [42, 56, 57, 180, 181, 353, 356], "cannot": [42, 339, 341, 344, 354, 360, 365, 1766], "least": [42, 109, 110, 123, 124, 278, 279, 292, 293, 340, 344, 346, 351, 356, 402, 411], "approv": 42, "hash": [42, 363], "cancel": 42, "speedup": 42, "unavail": 42, "tickbox": 42, "lower": [42, 54, 55, 60, 61, 147, 148, 155, 156, 184, 185, 316, 317, 324, 325, 346, 354, 356, 358, 360, 377, 1749, 1756, 1757, 1758, 1760, 1761, 1766, 1767], "span": [42, 358, 1758, 1766], "intent": [42, 353], "larg": [42, 109, 110, 278, 279, 363, 402, 413, 1760], "discourag": 42, "philosophi": 42, "increment": [42, 139, 140, 308, 309, 357, 1760], "valuabl": 42, "infrequ": 42, "earli": [42, 1750, 1760], "wast": 42, "spot": [42, 346, 351], "mistak": [42, 349], "propos": [42, 354, 358, 1760], "mountain": 42, "around": [42, 169, 172, 173, 174, 175, 340, 350, 351, 354, 357, 362, 377, 1749, 1758, 1760, 1767], "advoc": [42, 377], "style": [42, 1760], "were": [42, 172, 173, 180, 181, 344, 349, 356, 357, 358, 360, 1760, 1761, 1766], "actual": [42, 338, 351, 353, 356, 358, 359, 364, 377, 1761, 1766], "aim": [42, 339, 356, 359, 1758, 1760, 1763], "session": [42, 1760], "block": [42, 342, 348, 349, 351, 356, 359, 361, 365, 377, 1749, 1750, 1765, 1767], "smaller": [42, 151, 152, 320, 321, 360, 402, 408], "exact": [42, 170, 171, 172, 173, 339, 346, 360], "beauti": 42, "particularli": [42, 363, 377, 1758], "concern": [42, 338, 342, 346, 353, 358, 359, 1766], "difficult": [42, 339, 344, 356, 377], "undo": 42, "stress": 42, "frequenc": [42, 139, 140, 308, 309, 343], "advantag": [42, 353, 354, 1760], "nifti": 42, "reassur": 42, "isol": [42, 1761, 1766], "fact": [42, 354, 356, 360, 363], "local_path_to_ivi": 42, "overwrit": [42, 172, 173, 353, 354, 360], "subfold": [42, 355, 356, 357], "wide": [42, 356, 1758, 1760], "via": [42, 339, 342, 344, 345, 353, 354, 357, 358, 360, 362, 363, 376, 1760], "dep": 42, "fresh": 42, "arsen": 42, "declar": 42, "exec": 42, "rf": 42, "cp": 42, "ivy_contain": 42, "test_imag": 42, "test_random_crop": 42, "test_creation_funct": 42, "test_arang": 42, "variou": [42, 339, 344, 347, 348, 350, 352, 355, 356, 376, 1749, 1756, 1758, 1759, 1760, 1763, 1766], "cpu": [42, 54, 55, 58, 59, 155, 156, 182, 183, 308, 309, 324, 325, 345, 354, 377, 1758, 1760, 1763, 1765], "gpu": [42, 345, 362, 1758, 1760, 1763, 1764, 1765], "combin": [42, 169, 172, 173, 174, 175, 340, 342, 344, 346, 351, 356, 358, 365, 1760], "num": [42, 178, 179, 350, 360], "integ": [42, 44, 47, 48, 60, 61, 127, 128, 151, 152, 155, 156, 163, 164, 165, 166, 169, 172, 173, 174, 175, 184, 185, 296, 297, 316, 317, 320, 321, 324, 325, 332, 333, 334, 335, 342, 344, 352, 355, 356, 360, 362, 402, 404], "greater": [42, 44, 47, 48, 60, 61, 109, 110, 155, 156, 169, 174, 175, 184, 185, 324, 325, 355, 402, 416], "prompt": [42, 1750], "whole": 42, "multipli": [42, 60, 61, 163, 164, 184, 185, 340, 341, 342, 346], "cursor": 42, "alt": 42, "j": [42, 54, 55, 147, 148, 178, 179, 184, 185, 316, 317, 338, 1756], "blog": 42, "breakpoint": 42, "gutter": 42, "caret": 42, "f8": 42, "f9": 42, "Into": 42, "f7": 42, "smart": 42, "interest": 42, "consol": [42, 356, 362], "store": [42, 56, 57, 139, 140, 141, 142, 147, 148, 151, 152, 172, 173, 180, 181, 308, 309, 310, 311, 316, 317, 320, 321, 340, 341, 342, 347, 354, 360, 362, 363, 364, 1749], "variabl": [42, 139, 140, 141, 142, 153, 154, 172, 173, 308, 309, 310, 311, 322, 323, 341, 344, 347, 349, 350, 353, 356, 357, 360, 363, 364, 365, 377, 1750, 1761], "fragment": [42, 1756, 1758, 1762], "except": [42, 139, 140, 151, 152, 155, 156, 165, 166, 172, 173, 308, 309, 316, 317, 324, 325, 334, 335, 338, 339, 340, 344, 347, 349, 350, 353, 354, 358, 360, 362, 377], "pychram": 42, "depth": [42, 54, 55, 178, 179, 363, 364, 365, 376], "dummi": 42, "wherein": [42, 352, 356], "evalu": [42, 60, 61, 172, 173, 184, 185, 292, 293, 342, 344, 358, 1760], "failur": [42, 339, 343, 356], "arraywithactiv": [44, 45, 47, 48, 362], "arraywithcr": [44, 47, 48, 54, 362], "arraywithdatatyp": [44, 47, 48, 56, 362], "arraywithdevic": [44, 47, 48, 58, 362], "arraywithgener": [44, 47, 48, 139, 362], "arraywithgradi": [44, 47, 48, 141, 362], "arraywithimag": [44, 47, 48, 143, 362], "arraywithlay": [44, 47, 48, 145, 362], "arraywithlinalg": [44, 47, 48, 147, 362], "arraywithloss": [44, 47, 48, 149, 362], "arraywithmanipul": [44, 47, 48, 151, 362], "arraywithnorm": [44, 47, 48, 153, 362], "arraywithrandom": [44, 47, 48, 155, 362], "arraywithsearch": [44, 47, 48, 157, 362], "arraywithset": [44, 47, 48, 159, 362], "arraywithsort": [44, 47, 48, 161, 362], "arraywithstatist": [44, 47, 48, 163, 362], "arraywithutil": [44, 47, 48, 165, 362], "arraywithactivationsexperiment": [44, 47, 48, 63], "arraywithconversionsexperiment": [44, 47, 48, 101], "arraywithcreationexperiment": [44, 47, 48, 103], "arraywithdata_typeexperiment": [44, 47, 48, 105], "arraywithdeviceexperiment": [44, 47, 48, 107], "arraywithelementwiseexperiment": [44, 47, 48, 109], "arraywithgeneralexperiment": [44, 47, 48, 111], "arraywithgradientsexperiment": [44, 47, 48, 113], "arraywithimageexperiment": [44, 47, 48, 115], "arraywithlayersexperiment": [44, 47, 48, 117], "arraywithlinalgexperiment": [44, 47, 48, 119], "arraywithlossesexperiment": [44, 47, 48, 121], "arraywithmanipulationexperiment": [44, 47, 48, 123], "arraywithnormsexperiment": [44, 47, 48, 125], "arraywithrandomexperiment": [44, 47, 48, 127], "arraywithsearchingexperiment": [44, 47, 48, 129], "arraywithsetexperiment": [44, 47, 48, 131], "arraywithsortingexperiment": [44, 47, 48, 133], "arraywithstatisticalexperiment": [44, 47, 48, 135], "arraywithutilityexperiment": [44, 47, 48, 137], "properti": [44, 47, 48, 172, 173, 342, 346, 351, 355, 356, 362, 363, 364, 1766], "transpos": [44, 47, 48, 147, 148, 172, 173, 316, 317, 353, 362, 365, 1750], "dimension": [44, 47, 48, 109, 110, 147, 148, 151, 152, 157, 158, 163, 164, 165, 166, 172, 173, 184, 185, 316, 317, 320, 321, 332, 333, 334, 335, 360, 393, 398, 402, 416, 1757, 1760, 1767], "whose": [44, 47, 48, 54, 55, 60, 61, 109, 110, 123, 124, 139, 140, 147, 148, 151, 152, 159, 160, 178, 179, 184, 185, 278, 279, 292, 293, 308, 309, 316, 317, 320, 321, 328, 329, 332, 333, 347, 356], "dimens": [44, 47, 48, 54, 55, 109, 110, 117, 118, 123, 124, 135, 136, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 172, 173, 174, 175, 178, 179, 278, 279, 286, 287, 292, 293, 304, 305, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 334, 335, 346, 348, 355, 356, 358, 360, 363, 402, 414], "ax": [44, 45, 46, 47, 48, 109, 110, 123, 124, 135, 136, 147, 148, 151, 152, 157, 158, 163, 164, 165, 166, 170, 171, 278, 279, 292, 293, 304, 305, 316, 317, 320, 321, 326, 327, 332, 333, 334, 335, 344, 346, 356, 357, 360, 362, 402, 414], "permut": [44, 47, 48], "__add__": [44, 47, 48, 169, 174, 175, 340, 342, 346, 347, 350, 354, 362], "variant": [44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 346, 347, 358], "wrap": [44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 356, 360, 362, 365, 377, 378, 388, 1749, 1756, 1760, 1761, 1766, 1767], "minim": [44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 119, 120, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 347, 353, 355, 358, 360, 1758, 1766], "input": [44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 340, 341, 342, 344, 345, 346, 347, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 377, 378, 388, 393, 399, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1761, 1764], "numer": [44, 47, 48, 56, 57, 60, 61, 139, 140, 147, 148, 155, 156, 157, 158, 169, 174, 175, 180, 181, 184, 185, 308, 309, 316, 317, 324, 325, 326, 327, 330, 331, 344, 352, 354, 355, 356, 357, 358, 360, 364, 1757, 1760, 1766], "broadcast": [44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 342, 344, 346, 347, 356, 357, 360, 402, 404, 415], "element": [44, 45, 46, 47, 48, 54, 55, 60, 61, 109, 110, 123, 124, 135, 136, 139, 140, 147, 148, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 169, 170, 171, 172, 173, 174, 175, 178, 179, 184, 185, 278, 279, 288, 289, 292, 293, 304, 305, 308, 309, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 332, 333, 347, 355, 356, 358, 360, 393, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 1764], "wise": [44, 45, 46, 47, 48, 60, 61, 109, 110, 123, 124, 147, 148, 169, 170, 171, 174, 175, 184, 185, 278, 279, 288, 289, 292, 293, 316, 317, 358, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412], "sum": [44, 47, 48, 60, 61, 109, 110, 139, 140, 147, 148, 149, 150, 163, 164, 169, 172, 173, 174, 175, 184, 185, 278, 279, 308, 309, 316, 317, 318, 319, 332, 333, 342, 344, 351, 353, 360, 402, 414], "promot": [44, 47, 48, 56, 57, 60, 61, 109, 110, 147, 148, 169, 174, 175, 180, 181, 184, 185, 278, 279, 316, 317, 330, 331, 339, 347, 348, 351, 402, 404, 415], "y": [44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 288, 289, 292, 293, 302, 303, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 341, 342, 346, 354, 355, 357, 358, 360, 362, 402, 415, 416], "z": [44, 47, 48, 60, 61, 139, 140, 147, 148, 149, 150, 155, 156, 169, 174, 175, 184, 185, 308, 309, 316, 317, 318, 319, 324, 325, 341, 342, 346, 360, 362], "__le__": [44, 47, 48], "equal": [44, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 139, 140, 147, 148, 151, 152, 155, 156, 161, 162, 163, 164, 169, 172, 173, 174, 175, 180, 181, 184, 185, 278, 279, 308, 309, 316, 317, 320, 321, 324, 325, 330, 331, 342, 344, 346, 348, 402, 408], "bool": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 109, 110, 123, 124, 135, 136, 139, 140, 141, 142, 147, 148, 151, 152, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 292, 293, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 344, 346, 348, 353, 354, 356, 357, 360, 365, 393, 394, 395, 396, 397, 402, 408, 409, 410, 413, 414], "__radd__": [44, 47, 48, 169, 174, 175, 346, 347, 354], "__rrshift__": [44, 47, 48, 169, 174, 175], "bitwise_right_shift": [44, 47, 48, 60, 61, 184, 185], "32": [44, 47, 48, 60, 61, 109, 110, 117, 118, 155, 156, 169, 174, 175, 184, 185, 278, 279, 286, 287, 324, 325, 363, 402, 403, 1765], "__rshift__": [44, 47, 48, 169, 174, 175], "__rsub__": [44, 47, 48, 169, 174, 175], "subtract": [44, 47, 48, 60, 61, 169, 174, 175, 184, 185, 340, 342, 346], "__sub__": [44, 47, 48, 169, 174, 175, 340, 342, 346, 350, 362], "nativearrai": [44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 60, 61, 123, 124, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 302, 303, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 340, 342, 346, 348, 349, 350, 351, 352, 353, 354, 357, 360, 362, 378, 388, 393, 394, 397, 399, 402, 405, 406, 407, 408, 411, 412, 413, 414, 415, 1749], "resid": [44, 47, 48, 354, 360, 364], "mt": [44, 47, 48, 362], "matric": [44, 47, 48, 54, 55, 147, 148, 316, 317, 376, 1760], "n": [44, 47, 48, 54, 55, 109, 110, 117, 118, 127, 128, 147, 148, 151, 152, 155, 156, 157, 158, 163, 164, 165, 166, 184, 185, 286, 287, 316, 317, 320, 321, 324, 325, 326, 327, 332, 333, 334, 335, 338, 356, 393, 398, 402, 416], "ndim": [44, 47, 48, 157, 158, 326, 327, 342, 356], "int": [44, 45, 46, 47, 48, 54, 55, 56, 57, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 365, 393, 394, 395, 396, 397, 398, 402, 407, 413, 414, 416], "size": [44, 47, 48, 109, 110, 117, 118, 123, 124, 127, 128, 133, 134, 135, 136, 139, 140, 147, 148, 151, 152, 155, 156, 157, 158, 169, 172, 173, 174, 175, 272, 273, 278, 279, 286, 287, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 316, 317, 320, 321, 324, 325, 326, 327, 355, 356, 363, 393, 395, 399, 402, 414], "overview": [44, 169, 356, 359, 376, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "forum": [44, 169, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 464, 502, 504, 505, 587, 678, 712, 1033, 1034, 1228, 1280, 1478, 1479, 1495, 1576, 1580, 1598, 1603, 1630, 1677, 1693, 1738, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1769, 1772, 1774, 1784, 1796, 1799, 1801, 1807], "abc": [45, 46, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 173, 362], "gelu": [45, 46, 170, 171], "approxim": [45, 46, 109, 110, 147, 148, 170, 171, 184, 185, 316, 317, 347, 354, 402, 415, 416], "185": [45, 46, 170, 171], "046": [45, 46, 170, 171], "leaky_relu": [45, 46, 170, 171, 355, 1750], "alpha": [45, 46, 60, 61, 127, 128, 155, 156, 170, 171, 184, 185, 272, 273, 296, 297, 324, 325, 354, 355, 393, 394], "39": [45, 46, 60, 61, 117, 118, 155, 156, 170, 171, 184, 185, 286, 287, 310, 311, 324, 325], "85": [45, 46, 155, 156, 170, 171, 184, 185, 310, 311, 314, 315, 324, 325], "17": [45, 46, 117, 118, 123, 124, 169, 170, 171, 174, 175, 184, 185, 286, 287, 308, 309, 310, 311, 314, 315, 324, 325, 342, 346], "log_softmax": [45, 46, 170, 171], "98": [45, 46, 141, 142, 155, 156, 170, 171, 184, 185, 310, 311, 324, 325], "37": [45, 46, 60, 61, 170, 171, 184, 185, 286, 287], "35": [45, 46, 145, 146, 170, 171, 184, 185, 286, 287, 314, 315, 316, 317, 324, 325], "0719": [45, 46, 170, 171], "62": [45, 46, 170, 171, 278, 279, 322, 323, 324, 325], "221": [45, 46], "82": [45, 46, 60, 61, 310, 311, 324, 325], "relu": [45, 46, 167, 168, 170, 171, 355, 363, 364, 1750], "sigmoid": [45, 46, 170, 171, 360, 363, 364, 1750], "269": [45, 46, 170, 171], "731": [45, 46, 170, 171], "881": [45, 46, 60, 61, 170, 171, 184, 185], "softmax": [45, 46, 167, 168, 170, 171, 1750], "union": [45, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 344, 345, 346, 348, 349, 350, 351, 353, 354, 357, 358, 360, 365, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415], "422": [45, 46, 170, 171], "155": [45, 46, 170, 171, 314, 315], "softplu": [45, 46, 170, 171, 358, 1750], "beta": [45, 46, 153, 154, 155, 156, 170, 171, 272, 273, 322, 323, 324, 325, 358, 393, 394, 396, 397], "threshold": [45, 46, 60, 61, 170, 171, 184, 185, 358], "3461": [45, 46, 170, 171], "6491": [45, 46, 170, 171], "22": [45, 46, 60, 61, 117, 118, 139, 140, 155, 156, 163, 164, 170, 171, 286, 287, 308, 309, 314, 315, 324, 325, 342], "09": [45, 46, 310, 311, 324, 325], "31": [45, 46, 60, 61, 117, 118, 184, 185, 286, 287, 308, 309, 314, 315, 324, 325, 363], "55": [45, 46, 324, 325], "13": [45, 46, 60, 61, 123, 124, 145, 146, 155, 156, 163, 164, 184, 185, 278, 279, 286, 287, 292, 293, 308, 309, 310, 311, 314, 315, 320, 321, 324, 325, 332, 333, 342, 346, 356], "collect": [49, 172, 173, 176, 348, 355, 356, 376, 1758, 1760, 1763], "args_to_ivi": 49, "include_deriv": [49, 50, 51, 52, 53, 176, 177], "nest": [49, 50, 51, 52, 53, 169, 172, 173, 174, 175, 176, 177, 340, 342, 351, 357, 363, 364, 377, 1749, 1760], "unchang": [49, 50, 51, 52, 53], "deriv": [49, 50, 51, 52, 53, 54, 55, 141, 142, 176, 177, 178, 179, 272, 273, 310, 311, 344, 345, 362, 364, 393, 396], "tupl": [49, 50, 51, 52, 53, 54, 55, 56, 57, 109, 110, 117, 118, 123, 124, 127, 128, 135, 136, 139, 140, 145, 146, 147, 148, 151, 152, 157, 158, 159, 160, 163, 164, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 286, 287, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 344, 349, 350, 355, 356, 360, 363, 364, 377, 393, 398, 402, 403, 404, 407, 409, 410, 412, 414], "kei": [49, 50, 51, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 349, 355, 356, 363, 1760, 1763, 1767], "word": [49, 50, 51, 342, 354, 1749], "args_to_n": [49, 353], "cont_inplac": [49, 51, 53], "ignore_frontend_arrai": [49, 51], "to_ivi": [49, 176, 177], "leaf": [49, 52, 172, 173, 332, 333, 342, 351, 363], "travers": [49, 52, 53, 176, 177, 342, 344, 360], "lowest": [49, 52, 53, 155, 156, 176, 177, 324, 325, 351, 377, 1749, 1757, 1761, 1765], "to_n": [49, 176, 177, 360], "asarrai": [54, 55, 139, 140, 308, 309, 352, 353], "boolean": [54, 55, 56, 57, 60, 61, 109, 110, 139, 140, 141, 142, 151, 152, 157, 158, 172, 173, 180, 181, 184, 185, 278, 279, 308, 309, 310, 311, 320, 321, 326, 327, 342, 354, 355, 356, 358, 402, 408, 409, 410], "nativedtyp": [54, 55, 56, 57, 109, 110, 127, 128, 155, 156, 157, 158, 163, 164, 178, 179, 272, 273, 278, 279, 296, 297, 324, 325, 326, 327, 332, 333, 344, 345, 350, 354, 357, 360, 393, 395, 396, 399, 402, 414], "datatyp": [54, 55, 172, 173], "nativedevic": [54, 55, 58, 59, 155, 156, 178, 179, 182, 183, 324, 325, 344, 345, 348, 350, 357, 393, 398], "interpret": [54, 55, 343, 1761], "copy_arrai": [54, 55], "empty_lik": [54, 55, 178, 179, 358], "deafult": [54, 55, 157, 158, 326, 327], "uniniti": [54, 55], "from_dlpack": [54, 55, 178, 179], "full_lik": [54, 55, 178, 179, 357], "float": [54, 55, 56, 57, 60, 61, 109, 110, 127, 128, 139, 140, 141, 142, 147, 148, 149, 150, 153, 154, 155, 156, 163, 164, 170, 171, 178, 179, 180, 181, 184, 185, 272, 273, 278, 279, 296, 297, 308, 309, 310, 311, 316, 317, 318, 319, 322, 323, 324, 325, 332, 333, 339, 342, 344, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 360, 362, 364, 393, 394, 395, 396, 397, 402, 403, 404, 408, 409, 410, 412, 413, 415, 416], "scalar": [54, 55, 60, 61, 109, 110, 123, 124, 139, 140, 170, 171, 178, 179, 184, 185, 308, 309, 316, 317, 344, 377, 402, 403, 404, 408, 1760], "fill": [54, 55, 109, 110, 155, 156, 157, 158, 172, 173, 178, 179, 278, 279, 324, 325, 326, 327, 355, 402, 413], "000123": [54, 55], "ones": [54, 55, 141, 142, 155, 156, 172, 173, 178, 179, 324, 325, 346, 350, 356, 362, 363, 1750, 1760], "meshgrid": [54, 55, 178, 179], "spars": [54, 55, 149, 150, 178, 179, 318, 319], "xy": [54, 55, 178, 179], "one_hot": [54, 55, 178, 179, 365, 1750], "on_valu": [54, 55, 178, 179], "off_valu": [54, 55, 178, 179], "scatter": [54, 55, 139, 140, 178, 179, 308, 309, 358, 1767], "hot": [54, 55, 178, 179], "float32": [54, 55, 56, 57, 145, 146, 178, 179, 180, 181, 308, 309, 314, 315, 332, 333, 344, 346, 356, 393, 399, 402, 404], "cuda": [54, 55, 155, 156, 308, 309, 324, 325, 360, 377, 1749, 1765], "unless": [54, 55, 109, 110, 147, 148, 178, 179, 278, 279, 341, 345, 353, 377, 402, 414], "overrid": [54, 55, 178, 179], "ones_lik": [54, 55, 178, 179, 341, 365, 1750], "tril": [54, 55, 178, 179], "k": [54, 55, 119, 120, 123, 124, 127, 128, 145, 146, 147, 148, 155, 156, 178, 179, 184, 185, 272, 273, 288, 289, 292, 293, 296, 297, 314, 315, 316, 317, 324, 325, 338, 339, 354, 360, 393, 398, 1756, 1760], "innermost": [54, 55, 147, 148, 316, 317], "mxn": [54, 55, 147, 148, 316, 317], "diagon": [54, 55, 147, 148, 316, 317, 393, 398], "triangular": [54, 55, 147, 148, 316, 317, 393, 398], "triu": [54, 55, 178, 179], "upper": [54, 55, 147, 148, 155, 156, 316, 317, 324, 325, 353, 356, 393, 398], "zeros_lik": [54, 55, 178, 179, 354, 358, 1750], "creation": [55, 104, 169, 172, 173, 174, 175, 179, 273, 344, 345, 348, 350, 352, 355, 356, 357, 360, 394, 395, 396, 397, 398, 399, 1760, 1762, 1766], "data_typ": [56, 57, 105, 106, 180, 181, 274, 275, 344, 356, 357], "astyp": [56, 57, 145, 146, 180, 181, 314, 315, 344, 353, 354, 358], "irrespect": [56, 57, 180, 181, 342, 353, 362, 1767], "rule": [56, 57, 109, 110, 147, 148, 180, 181, 184, 185, 316, 317, 339, 340, 342, 344, 346, 349, 350, 351, 356, 358, 402, 416, 1761], "cast": [56, 57, 109, 110, 180, 181, 278, 279, 344, 351, 355, 360, 402, 413, 1750], "nan": [56, 57, 60, 61, 109, 110, 139, 140, 163, 164, 180, 181, 184, 185, 278, 279, 308, 309, 339, 344, 347, 356, 357, 402, 405, 406, 408, 413, 414, 415], "infin": [56, 57, 60, 61, 109, 110, 139, 140, 180, 181, 184, 185, 278, 279, 316, 317, 339, 347, 402, 409, 410, 413, 415], "non": [56, 57, 109, 110, 147, 148, 155, 156, 157, 158, 163, 164, 165, 166, 180, 181, 278, 279, 316, 317, 324, 325, 326, 327, 332, 333, 334, 335, 342, 344, 346, 352, 360, 402, 405, 413, 1760], "float64": [56, 57, 155, 156, 163, 164, 180, 181, 324, 325, 332, 333, 344, 356, 402, 404], "broadcast_arrai": [56, 57, 180, 181], "arbitrari": [56, 57, 172, 173, 180, 181, 342, 350, 351, 353, 354, 356, 364, 377, 1761, 1766], "x3": [56, 57], "mix": [56, 57, 60, 61, 169, 174, 175, 180, 181, 184, 185, 308, 309, 318, 319, 324, 325, 338, 346, 353, 356, 358, 360, 1749, 1760, 1764, 1766], "broadcast_to": [56, 57, 180, 181, 344], "can_cast": [56, 57, 180, 181, 344, 351, 354], "occur": [56, 57, 109, 110, 159, 160, 180, 181, 278, 279, 328, 329, 339, 402, 413], "as_n": [56, 57, 58, 59, 180, 181, 182, 183, 344], "int32": [56, 57, 155, 156, 157, 158, 163, 164, 180, 181, 308, 309, 324, 325, 326, 327, 344, 356, 360], "finfo": [56, 57, 180, 181, 356], "iinfo": [56, 57, 180, 181, 349], "119": [56, 57], "122": [56, 57], "int8": [56, 57, 155, 156, 324, 325, 344, 356], "min": [56, 57, 139, 140, 163, 164, 180, 181, 308, 309, 332, 333, 393, 398], "128": [56, 57, 109, 110, 145, 146, 169, 174, 175, 278, 279, 314, 315, 402, 403], "max": [56, 57, 117, 118, 139, 140, 147, 148, 163, 164, 180, 181, 286, 287, 308, 309, 316, 317, 332, 333, 356], "127": [56, 57, 109, 110, 278, 279, 402, 415], "is_bool_dtyp": [56, 57, 180, 181], "is_float_dtyp": [56, 57, 180, 181, 357], "is_int_dtyp": [56, 57, 180, 181, 355, 357], "is_uint_dtyp": [56, 57, 180, 181, 355, 357], "result_typ": [56, 57, 180, 181, 344], "arrays_and_dtyp": [56, 57, 180, 181], "to_devic": [58, 59, 182, 183], "stream": [58, 59, 182, 183, 1764], "ab": [60, 61, 184, 185, 344, 352, 354, 356, 402, 408, 1750], "aco": [60, 61, 184, 185, 1750], "real": [60, 61, 184, 185, 342, 1762], "cosin": [60, 61, 184, 185, 393, 395], "57": [60, 61, 184, 185], "69": [60, 61, 310, 311, 324, 325, 356, 363], "acosh": [60, 61, 184, 185, 1750], "hyperbol": [60, 61, 184, 185], "99": [60, 61, 141, 142, 184, 185, 324, 325], "asin": [60, 61, 184, 185, 1750], "sine": [60, 61, 184, 185], "927": [60, 61, 184, 185], "asinh": [60, 61, 184, 185, 1750], "atan": [60, 61, 184, 185, 1750], "tangent": [60, 61, 184, 185, 347], "785": [60, 61, 184, 185], "464": [60, 61, 324, 325], "atan2": [60, 61, 184, 185, 1750], "coordin": [60, 61, 157, 158, 184, 185, 326, 327, 393, 398], "quotient": [60, 61, 184, 185], "245": [60, 61, 314, 315], "atanh": [60, 61, 184, 185, 1750], "549": [60, 61, 184, 185, 314, 315], "47": [60, 61, 117, 118, 155, 156, 184, 185, 286, 287, 308, 309, 310, 311, 324, 325], "bitwise_and": [60, 61, 184, 185], "11": [60, 61, 117, 118, 123, 124, 139, 140, 145, 146, 147, 148, 155, 156, 163, 164, 169, 174, 175, 184, 185, 286, 287, 292, 293, 308, 309, 314, 315, 316, 317, 320, 321, 324, 325, 332, 333, 342, 344, 346, 357], "bitwise_invert": [60, 61, 184, 185], "bitiwse_invert": [60, 61], "bitwise_left_shift": [60, 61, 184, 185], "bitwise_or": [60, 61, 184, 185], "bitwise_xor": [60, 61, 184, 185], "89": [60, 61, 155, 156, 180, 181, 184, 185, 286, 287, 324, 325], "51": [60, 61, 117, 118, 184, 185, 286, 287, 308, 309, 324, 325], "18": [60, 61, 117, 118, 123, 124, 155, 156, 184, 185, 286, 287, 324, 325, 332, 333, 342, 346], "19": [60, 61, 117, 118, 123, 124, 155, 156, 184, 185, 286, 287, 316, 317, 324, 325, 346], "26": [60, 61, 153, 154, 155, 156, 286, 287, 308, 309, 310, 311, 324, 325], "27": [60, 61, 109, 110, 147, 148, 155, 156, 278, 279, 316, 317, 324, 325, 402, 404], "23": [60, 61, 117, 118, 155, 156, 178, 179, 184, 185, 286, 287, 308, 309, 324, 325, 356, 360], "20": [60, 61, 117, 118, 145, 146, 155, 156, 163, 164, 184, 185, 286, 287, 308, 309, 324, 325, 332, 333, 358, 362, 402, 408], "74": [60, 61, 324, 325], "41": [60, 61, 117, 118, 184, 185, 308, 309, 316, 317], "59": [60, 61], "24": [60, 61, 117, 118, 147, 148, 163, 164, 278, 279, 286, 287, 308, 309, 314, 315, 316, 317, 324, 325, 363], "ceil": [60, 61, 184, 185, 1750], "radian": [60, 61, 109, 110, 184, 185, 278, 279, 347, 402, 415], "54": [60, 61, 145, 146, 184, 185, 272, 273, 278, 279, 286, 287, 314, 315, 324, 325, 346, 393, 394], "416": [60, 61], "cosh": [60, 61, 184, 185, 1750], "angl": [60, 61, 184, 185, 376], "76": [60, 61, 180, 181, 184, 185, 324, 325], "03": [60, 61, 184, 185, 310, 311, 324, 325], "81": [60, 61, 180, 181, 184, 185, 316, 317, 324, 325, 356], "deg2rad": [60, 61, 184, 185], "degre": [60, 61, 123, 124, 163, 164, 184, 185, 292, 293, 332, 333, 1759], "180": [60, 61, 184, 185], "270": [60, 61, 184, 185], "360": [60, 61, 184, 185], "71": [60, 61, 184, 185], "28": [60, 61, 153, 154, 184, 185, 286, 287, 308, 309, 324, 325], "divid": [60, 61, 139, 140, 151, 152, 172, 173, 184, 185, 320, 321, 340, 342, 346], "dividend": [60, 61, 184, 185], "divisor": [60, 61, 141, 142, 163, 164, 184, 185, 310, 311, 332, 333, 402, 407], "375": [60, 61], "erf": [60, 61, 184, 185], "exponenti": [60, 61, 184, 185], "gauss": [60, 61, 184, 185], "exp": [60, 61, 184, 185, 1750], "expm1": [60, 61, 184, 185, 344], "244": [60, 61], "918": [60, 61], "48": [60, 61, 117, 118, 184, 185, 286, 287, 308, 309, 310, 311, 324, 325], "147": [60, 61], "floor": [60, 61, 184, 185, 1750], "floor_divid": [60, 61, 184, 185], "greater_equ": [60, 61, 184, 185], "isfinit": [60, 61, 184, 185, 354], "out_i": [60, 61, 184, 185], "self_i": [60, 61, 184, 185], "finit": [60, 61, 109, 110, 184, 185, 278, 279, 402, 413], "inf": [60, 61, 109, 110, 139, 140, 147, 148, 184, 185, 278, 279, 308, 309, 316, 317, 344, 356, 402, 409, 410, 413], "isinf": [60, 61, 184, 185], "neg": [60, 61, 109, 110, 147, 148, 151, 152, 155, 156, 165, 166, 170, 171, 184, 185, 278, 279, 316, 317, 320, 321, 324, 325, 334, 335, 342, 351, 353, 393, 398, 402, 409, 413], "isnan": [60, 61, 184, 185], "isreal": [60, 61, 184, 185], "1j": [60, 61, 184, 185], "5j": [60, 61, 184, 185], "6j": [60, 61], "less_equ": [60, 61, 184, 185, 348], "61": [60, 61, 117, 118, 184, 185, 286, 287, 310, 311, 318, 319, 324, 325], "log10": [60, 61, 184, 185], "logarithm": [60, 61, 184, 185], "602": [60, 61], "699": [60, 61], "log1p": [60, 61, 184, 185], "693": [60, 61, 184, 185], "001": [60, 61, 109, 110, 153, 154, 278, 279, 363, 364], "0953": [60, 61, 184, 185], "log2": [60, 61, 184, 185, 402, 412], "logaddexp": [60, 61, 184, 185], "05": [60, 61, 109, 110, 141, 142, 153, 154, 163, 164, 184, 185, 278, 279, 310, 311, 322, 323, 355, 356, 393, 397, 402, 408], "logical_and": [60, 61, 184, 185, 354, 358, 1750, 1767], "logical_not": [60, 61, 184, 185, 344, 1750], "logical_or": [60, 61, 184, 185, 1750, 1767], "conform": [60, 61, 184, 185, 347], "org": [60, 61, 184, 185, 310, 311, 347, 393, 398], "api_specif": [60, 61, 184, 185, 347], "elementwise_funct": [60, 61, 184, 185, 347], "simplic": [60, 61, 184, 185, 347, 358, 364, 376], "nestabl": [60, 61, 184, 185, 338, 346, 347, 353, 356, 393, 398, 1749], "logical_xor": [60, 61, 184, 185], "use_wher": [60, 61, 184, 185], "formula": [60, 61, 184, 185], "clip": [60, 61, 151, 152, 184, 185, 308, 309, 320, 321, 342, 351, 353, 363, 365, 1750], "minimum": [60, 61, 139, 140, 151, 152, 157, 158, 184, 185, 308, 309, 320, 321, 326, 327, 402, 404, 1750, 1757, 1763, 1767], "exce": [60, 61, 123, 124, 292, 293], "arguement": [60, 61], "condit": [60, 61, 157, 158, 326, 327, 339, 344, 346, 348, 353, 356, 376], "boradcastbl": [60, 61], "thatth": [60, 61], "30": [60, 61, 308, 309, 324, 325, 332, 333], "56": [60, 61, 117, 118, 145, 146, 155, 156, 184, 185, 286, 287, 346], "21": [60, 61, 109, 110, 117, 118, 139, 140, 155, 156, 184, 185, 278, 279, 286, 287, 308, 309, 324, 325, 332, 333, 402, 411], "not_equ": [60, 61, 184, 185], "pow": [60, 61, 184, 185, 339], "expon": [60, 61, 109, 110, 139, 140, 278, 279, 308, 309, 402, 404], "rad2deg": [60, 61, 184, 185], "286": [60, 61, 286, 287], "458": [60, 61], "573": [60, 61], "reciproc": [60, 61, 184, 185], "remaind": [60, 61, 109, 110, 151, 152, 172, 173, 184, 185, 278, 279, 320, 321, 402, 406], "modulu": [60, 61, 184, 185], "x2_i": [60, 61, 184, 185, 339], "94": [60, 61, 141, 142, 155, 156, 184, 185, 310, 311, 324, 325], "256": [60, 61], "0001": [60, 61], "36": [60, 61, 145, 146, 286, 287, 308, 309, 316, 317], "67": [60, 61, 139, 140, 184, 185, 308, 309, 324, 325], "45": [60, 61, 169, 174, 175, 184, 185, 286, 287, 310, 311, 324, 325], "678": [60, 61], "25": [60, 61, 139, 140, 147, 148, 149, 150, 155, 156, 163, 164, 170, 171, 184, 185, 278, 279, 308, 309, 314, 315, 316, 317, 322, 323, 324, 325, 332, 333, 342, 393, 395], "33": [60, 61, 155, 156, 163, 164, 184, 185, 308, 309, 310, 311, 314, 315], "sin": [60, 61, 139, 140, 184, 185, 340, 360, 1750], "841": [60, 61, 184, 185], "909": [60, 61, 184, 185, 308, 309], "141": [60, 61, 184, 185], "sinh": [60, 61, 184, 185, 1750], "63": [60, 61, 170, 171, 184, 185, 316, 317], "232": [60, 61, 184, 185], "sqrt": [60, 61, 184, 185], "squar": [60, 61, 147, 148, 184, 185, 316, 317], "tan": [60, 61, 184, 185, 342, 347, 350, 351, 353, 354, 360, 1750], "tanh": [60, 61, 184, 185, 360, 1750], "762": [60, 61, 184, 185], "964": [60, 61, 184, 185], "trunc": [60, 61, 184, 185], "trunc_divid": [60, 61, 184, 185], "elementwis": [61, 110, 153, 154, 185, 279, 322, 323, 351, 357, 360, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "experiment": [63, 64, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 344, 354, 357, 360, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 1760], "exp2": [109, 110, 278, 279, 402], "power": [109, 110, 139, 140, 147, 148, 278, 279, 308, 309, 316, 317, 356, 362, 363, 364, 393, 399, 402, 403, 404, 1760, 1762, 1766], "float_pow": [109, 110, 278, 279, 402], "125": [109, 110, 147, 148, 316, 317, 402, 404], "fmax": [109, 110, 278, 279, 402], "fmod": [109, 110, 278, 279, 402], "divis": [109, 110, 139, 140, 141, 142, 278, 279, 308, 309, 310, 311, 351, 402, 406], "gcd": [109, 110, 278, 279, 402], "isclos": [109, 110, 278, 279, 356, 402], "rtol": [109, 110, 147, 148, 278, 279, 316, 317, 355, 402, 408], "1e": [109, 110, 141, 142, 149, 150, 153, 154, 278, 279, 310, 311, 318, 319, 322, 323, 342, 351, 353, 355, 364, 365, 402, 408, 1750], "atol": [109, 110, 147, 148, 278, 279, 316, 317, 402, 408], "08": [109, 110, 163, 164, 278, 279, 324, 325, 402, 408], "equal_nan": [109, 110, 278, 279, 402, 408], "toler": [109, 110, 147, 148, 278, 279, 316, 317, 339, 355, 402, 408, 1760], "compar": [109, 110, 139, 140, 161, 162, 172, 173, 278, 279, 308, 309, 330, 331, 341, 346, 349, 355, 356, 363, 402, 408, 1756, 1758, 1760, 1766, 1767], "hold": [109, 110, 139, 140, 147, 148, 163, 164, 278, 279, 316, 317, 332, 333, 363, 402, 414, 1761], "01": [109, 110, 141, 142, 278, 279, 310, 311, 324, 325, 341, 365, 393, 397], "isneginf": [109, 110, 278, 279, 402], "isposinf": [109, 110, 278, 279, 402], "lcm": [109, 110, 278, 279, 402], "60": [109, 110, 278, 279, 308, 309, 324, 325, 402, 411], "logaddexp2": [109, 110, 278, 279, 402], "169925": [109, 110, 278, 279, 402, 412], "nan_to_num": [109, 110, 278, 279, 402], "posinf": [109, 110, 278, 279, 402, 413], "neginf": [109, 110, 278, 279, 402, 413], "small": [109, 110, 147, 148, 153, 154, 278, 279, 316, 317, 322, 323, 346, 351, 355, 358, 360, 364, 377, 402, 408, 413, 1761], "5e": [109, 110, 141, 142, 278, 279, 402, 413], "nansum": [109, 110, 278, 279, 402], "keepdim": [109, 110, 135, 136, 147, 148, 151, 152, 157, 158, 163, 164, 165, 166, 172, 173, 278, 279, 304, 305, 316, 317, 320, 321, 326, 327, 332, 333, 334, 335, 348, 354, 360, 402, 414], "flatten": [109, 110, 123, 124, 135, 136, 139, 140, 151, 152, 157, 158, 159, 160, 278, 279, 292, 293, 304, 305, 308, 309, 316, 317, 320, 321, 326, 327, 328, 329, 402, 414], "accumul": [109, 110, 278, 279, 402, 414], "By": [109, 110, 163, 164, 165, 166, 278, 279, 332, 333, 334, 335, 344, 346, 351, 353, 354, 360, 364, 365, 393, 399, 402, 414], "reduc": [109, 110, 135, 136, 139, 140, 147, 148, 157, 158, 163, 164, 165, 166, 172, 173, 278, 279, 304, 305, 308, 309, 316, 317, 326, 327, 332, 333, 334, 335, 348, 354, 358, 360, 362, 402, 414, 1758, 1762, 1763, 1764], "637": [109, 110, 278, 279, 402, 415], "212": [109, 110, 145, 146, 278, 279, 402, 415], "0909": [109, 110, 278, 279, 402, 415], "trapz": [109, 110, 184, 185, 402], "dx": [109, 110, 184, 185, 402, 416], "sampl": [109, 110, 127, 128, 155, 156, 163, 164, 184, 185, 296, 297, 324, 325, 332, 333, 352, 355, 356, 402, 416], "evenli": [109, 110, 151, 152, 172, 173, 184, 185, 320, 321, 402, 416], "apart": [109, 110, 184, 185, 402, 416], "trapezoid": [109, 110, 184, 185, 402, 416], "gradient": [114, 142, 283, 311, 357, 363, 364, 376, 377, 1750, 1760], "avg_pool3d": [117, 118, 286, 287], "kernel": [117, 118, 145, 146, 286, 287, 314, 315, 358, 360, 377, 1760, 1763, 1764], "stride": [117, 118, 145, 146, 286, 287, 314, 315, 1760], "pad": [117, 118, 123, 124, 145, 146, 286, 287, 292, 293, 314, 315], "data_format": [117, 118, 145, 146, 286, 287, 314, 315], "ndhwc": [117, 118, 145, 146, 286, 287, 314, 315], "pool": [117, 118, 286, 287], "batch_siz": [117, 118, 145, 146, 155, 156, 286, 287, 314, 315, 324, 325, 363], "h": [117, 118, 145, 146, 286, 287, 308, 309, 314, 315, 338, 342, 1756], "w": [117, 118, 141, 142, 145, 146, 172, 173, 184, 185, 286, 287, 308, 309, 310, 311, 314, 315, 360, 363, 364], "d_in": [117, 118, 145, 146, 286, 287, 314, 315], "convolut": [117, 118, 145, 146, 286, 287, 314, 315, 1758, 1760], "slide": [117, 118, 145, 146, 286, 287, 314, 315], "algorithm": [117, 118, 145, 146, 170, 171, 286, 287, 314, 315, 344, 354, 358, 377, 1760, 1762, 1764], "ncdhw": [117, 118, 286, 287], "arang": [117, 118, 147, 148, 286, 287, 292, 293, 316, 317, 344, 1750, 1767], "reshap": [117, 118, 147, 148, 151, 152, 172, 173, 286, 287, 314, 315, 316, 317, 320, 321, 353, 354, 356, 360, 362, 365, 1750], "43": [117, 118, 169, 174, 175, 324, 325], "44": [117, 118, 155, 156, 184, 185, 286, 287, 324, 325], "dct": [117, 118, 286, 287, 363], "norm": [117, 118, 126, 139, 140, 147, 148, 154, 286, 287, 295, 308, 309, 316, 317, 323, 357, 1750], "signal": [117, 118, 286, 287, 1759, 1760], "liter": [117, 118, 147, 148, 286, 287, 316, 317, 349], "lenght": [117, 118, 272, 273, 286, 287], "transform": [117, 118, 145, 146, 286, 287, 314, 315, 365, 376, 1749, 1758, 1760, 1761, 1762], "truncat": [117, 118, 286, 287, 363], "larger": [117, 118, 151, 152, 163, 164, 286, 287, 320, 321, 332, 333, 356, 1767], "ortho": [117, 118, 286, 287], "40": [117, 118, 139, 140, 169, 174, 175, 278, 279, 286, 287, 308, 309, 324, 325], "102": [117, 118, 286, 287, 324, 325], "406": [117, 118, 286, 287], "max_pool1d": [117, 118, 286, 287], "nhwc": [117, 118, 145, 146, 286, 287, 314, 315], "nwc": [117, 118, 145, 146, 286, 287, 314, 315], "ncw": [117, 118, 145, 146, 286, 287, 314, 315], "max_pool2d": [117, 118, 286, 287], "nchw": [117, 118, 145, 146, 286, 287, 314, 315], "46": [117, 118, 155, 156, 272, 273, 286, 287, 314, 315, 324, 325, 393, 394], "max_pool3d": [117, 118, 286, 287], "38": [117, 118, 184, 185, 324, 325, 346], "diagflat": [119, 120, 288, 289], "offset": [119, 120, 147, 148, 288, 289, 316, 317], "padding_valu": [119, 120, 288, 289], "right_left": [119, 120, 288, 289], "num_row": [119, 120, 288, 289], "num_col": [119, 120, 288, 289], "kron": [119, 120, 288, 289, 1767], "loss": [122, 150, 291, 319, 344, 351, 354, 357, 363, 364, 365, 1750, 1760, 1767], "start_dim": [123, 124, 292, 293], "end_dim": [123, 124, 292, 293], "dim": [123, 124, 172, 173, 178, 179, 292, 293, 344, 355, 358], "fliplr": [123, 124, 292, 293], "flip": [123, 124, 151, 152, 292, 293, 320, 321, 354, 362, 363, 365, 1750], "diag": [123, 124, 147, 148, 292, 293, 316, 317, 360], "flipud": [123, 124, 292, 293], "heavisid": [123, 124, 292, 293], "0000": [123, 124, 272, 273, 393, 394, 397], "5000": [123, 124], "hstack": [123, 124, 292, 293], "vstack": [123, 124, 292, 293], "i0": [123, 124, 292, 293], "bessel": [123, 124, 163, 164, 272, 273, 292, 293, 332, 333, 393, 396], "26606588": [123, 124, 292, 293], "2795853": [123, 124, 292, 293], "88079259": [123, 124, 292, 293], "moveaxi": [123, 124, 292, 293], "destin": [123, 124, 292, 293], "unstack": [123, 124, 151, 152, 172, 173, 320, 321, 342, 360, 363, 1750, 1767], "reorder": [123, 124, 151, 152, 292, 293, 320, 321], "pad_width": [123, 124, 151, 152, 292, 293, 320, 321], "constant": [123, 124, 153, 154, 292, 293, 322, 323, 351, 357, 364, 365, 377], "stat_length": [123, 124, 292, 293], "constant_valu": [123, 124, 292, 293], "end_valu": [123, 124, 292, 293], "reflect_typ": [123, 124, 292, 293], "rot90": [123, 124, 292, 293], "rotat": [123, 124, 292, 293, 376], "plane": [123, 124, 292, 293], "top_k": [123, 124, 292, 293], "largest": [123, 124, 172, 173, 292, 293, 376], "retun": [123, 124, 292, 293], "smallest": [123, 124, 172, 173, 292, 293], "dirichlet": [127, 128, 296, 297], "seed": [127, 128, 155, 156, 172, 173, 296, 297, 324, 325, 1750], "shuffl": [127, 128, 155, 156, 172, 173, 296, 297, 324, 325, 1750], "length": [127, 128, 151, 152, 169, 172, 173, 174, 175, 296, 297, 320, 321, 349, 356, 363, 393, 394, 396, 397, 399], "nativeshap": [127, 128, 151, 152, 155, 156, 296, 297, 320, 321, 324, 325], "drawn": [127, 128, 155, 156, 296, 297, 324, 325, 356], "vector": [127, 128, 139, 140, 145, 146, 147, 148, 308, 309, 314, 315, 316, 317, 376, 1760], "10598304": [127, 128], "21537054": [127, 128], "67864642": [127, 128], "48006698": [127, 128], "07472073": [127, 128], "44521229": [127, 128], "55479872": [127, 128], "05426367": [127, 128], "39093761": [127, 128], "19531053": [127, 128], "51675832": [127, 128], "28793114": [127, 128], "12315625": [127, 128], "29823365": [127, 128], "5786101": [127, 128], "15564976": [127, 128], "50542368": [127, 128], "33892656": [127, 128], "1325352": [127, 128], "44439589": [127, 128], "42306891": [127, 128], "msort": [133, 134, 302, 303], "randint": [133, 134, 145, 146, 155, 156, 302, 303, 314, 315, 324, 325, 344, 1750], "median": [135, 136, 304, 305, 354], "all_equ": [139, 140, 308, 309], "equality_matrix": [139, 140, 308, 309], "array_equ": [139, 140], "assert_supports_inplac": [139, 140, 308, 309], "clip_matrix_norm": [139, 140, 308, 309], "max_norm": [139, 140, 308, 309], "downscal": [139, 140, 308, 309], "894": [139, 140, 308, 309], "79": [139, 140, 308, 309, 324, 325], "clip_vector_norm": [139, 140, 308, 309], "default_v": [139, 140], "catch_except": [139, 140], "rev": [139, 140], "with_cal": [139, 140], "catch": [139, 140, 356], "callabl": [139, 140, 308, 309, 342, 348, 354, 356, 360, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "einops_rearrang": [139, 140, 308, 309], "axes_length": [139, 140, 308, 309], "arrang": [139, 140], "rearrang": [139, 140, 308, 309], "einops_reduc": [139, 140, 308, 309], "reduct": [139, 140, 149, 150, 165, 166, 172, 173, 308, 309, 318, 319, 334, 335, 344, 356, 362, 1750], "One": [139, 140, 151, 152, 155, 156, 308, 309, 320, 321, 324, 325, 344, 346, 355, 356, 360, 362, 363], "prod": [139, 140, 163, 164, 308, 309, 332, 333, 344, 346, 360], "einops_repeat": [139, 140, 308, 309], "fourier_encod": [139, 140, 308, 309], "max_freq": [139, 140, 308, 309], "num_band": [139, 140, 308, 309], "linear": [139, 140, 145, 146, 170, 171, 308, 309, 314, 315, 347, 354, 356, 358, 360, 363, 364, 365, 1478, 1750, 1758, 1759, 1760, 1763], "concat": [139, 140, 151, 152, 172, 173, 320, 321, 355, 358, 360, 1750], "band": [139, 140, 308, 309], "linearli": [139, 140, 308, 309], "oppos": [139, 140, 308, 309, 344], "geometr": [139, 140, 308, 309], "concaten": [139, 140, 151, 152, 355, 358, 360, 363, 1750], "seper": [139, 140, 346], "batch": [139, 140, 172, 173, 308, 309, 316, 317, 342, 351, 363, 1758], "expand": [139, 140, 151, 152, 308, 309, 342], "gather": [139, 140, 308, 309, 1767], "gather_nd": [139, 140, 308, 309, 1750], "get_num_dim": [139, 140, 308, 309, 1750], "as_arrai": [139, 140, 308, 309], "has_nan": [139, 140, 308, 309], "include_inf": [139, 140, 308, 309], "inplace_decr": [139, 140, 308, 309], "val": [139, 140, 172, 173, 308, 309, 353, 362], "decrement": [139, 140, 308, 309], "inplace_incr": [139, 140, 308, 309], "inplace_upd": [139, 140, 308, 309, 353], "ensure_in_backend": [139, 140, 353], "inplac": [139, 140, 141, 142, 172, 173, 308, 309, 338, 340, 346, 350, 352, 355, 358, 362, 364], "is_arrai": [139, 140, 308, 309, 354], "exclus": [139, 140, 141, 142, 163, 164, 172, 173, 308, 309, 310, 311, 332, 333, 342, 344, 351, 354, 357, 365, 1764, 1766], "trace": [139, 140, 147, 148, 172, 173, 308, 309, 316, 317, 339, 344, 360, 377, 1749, 1761, 1766], "is_ivy_arrai": [139, 140, 308, 309, 353, 362], "is_ivy_contain": [139, 140, 308, 309], "is_native_arrai": [139, 140, 308, 309, 362], "scatter_flat": [139, 140, 308, 309], "occupi": [139, 140], "scatter_nd": [139, 140, 308, 309, 358, 362, 1750], "arr": [139, 140, 180, 181, 344, 345], "stable_divid": [139, 140, 308, 309, 351], "denomin": [139, 140, 153, 154, 308, 309, 322, 323, 351, 377, 1757], "min_denomin": [139, 140, 308, 309], "_min_denomin": [139, 140, 308, 309], "stable_pow": [139, 140, 308, 309], "min_bas": [139, 140, 308, 309], "_min_bas": [139, 140, 153, 154, 308, 309, 322, 323], "supports_inplace_upd": [139, 140, 308, 309], "supports_inplac": [139, 140, 308, 309], "to_list": [139, 140, 308, 309, 1750], "represent": [139, 140, 169, 172, 173, 174, 175, 308, 309, 376, 1758, 1759, 1761, 1765, 1766], "to_numpi": [139, 140, 308, 309, 363, 1750], "to_scalar": [139, 140, 308, 309], "value_is_nan": [139, 140, 308, 309], "92": [139, 140, 324, 325], "adam_step": [141, 142, 310, 311], "mw": [141, 142, 310, 311, 364], "vw": [141, 142, 310, 311, 364], "beta1": [141, 142, 310, 311, 364], "beta2": [141, 142, 310, 311, 364], "999": [141, 142, 184, 185, 310, 311, 364], "epsilon": [141, 142, 147, 148, 149, 150, 153, 154, 310, 311, 316, 317, 318, 319, 322, 323, 342, 351, 353, 364], "07": [141, 142, 149, 150, 184, 185, 310, 311, 318, 319, 324, 325, 364], "cost": [141, 142, 310, 311, 358, 1758], "weight": [141, 142, 145, 146, 153, 154, 310, 311, 314, 315, 322, 323, 342, 351, 360, 364, 365, 393, 395, 1759], "dc": [141, 142, 310, 311], "dw": [141, 142, 310, 311], "averag": [141, 142, 310, 311], "forget": [141, 142, 310, 311, 344], "adam": [141, 142, 310, 311, 363, 364, 365, 1750, 1760], "delta": [141, 142, 310, 311], "dcdw": [141, 142, 310, 311], "adam_step_delta": [141, 142, 310, 311], "182": [141, 142, 286, 287], "adam_upd": [141, 142, 310, 311, 364], "lr": [141, 142, 310, 311, 363, 364], "mw_tm1": [141, 142, 310, 311], "vw_tm1": [141, 142, 310, 311], "stop_gradi": [141, 142, 310, 311, 364, 1750], "rate": [141, 142, 310, 311], "stop": [141, 142, 178, 179, 310, 311, 350, 358, 360, 377, 1760], "ws_new": [141, 142, 310, 311], "gradient_descent_upd": [141, 142, 310, 311, 1750], "handl": [141, 142, 169, 172, 173, 174, 175, 338, 342, 344, 345, 350, 351, 352, 353, 354, 355, 356, 358, 364, 1757, 1767], "higher": [141, 142, 359, 360, 365, 377, 1757, 1760, 1761, 1764, 1766, 1767], "descent": [141, 142, 310, 311, 364, 1760], "new_weight": [141, 142, 310, 311, 363], "95": [141, 142, 155, 156, 310, 311, 324, 325], "97": [141, 142, 184, 185, 310, 311, 324, 325], "96": [141, 142, 184, 185, 278, 279, 286, 287, 308, 309, 324, 325], "is_vari": [141, 142, 310, 311, 353], "trainabl": [141, 142, 310, 311, 347, 361, 363, 364], "is_var": [141, 142, 310, 311], "lamb_upd": [141, 142, 310, 311], "max_trust_ratio": [141, 142, 310, 311], "decay_lambda": [141, 142, 310, 311], "trust": [141, 142, 310, 311], "ratio": [141, 142, 310, 311], "decai": [141, 142, 310, 311], "lamb": [141, 142, 310, 311, 364], "784": [141, 142], "78": [141, 142], "02": [141, 142, 153, 154, 155, 156, 184, 185, 310, 311, 324, 325], "04": [141, 142, 310, 311, 355, 356], "0e": [141, 142, 310, 311], "lars_upd": [141, 142, 310, 311], "lar": [141, 142, 310, 311, 364], "optimizer_upd": [141, 142, 310, 311], "effective_grad": [141, 142, 310, 311], "3e": [141, 142, 310, 311], "preserve_typ": [141, 142, 310, 311], "preserv": [141, 142, 169, 172, 173, 174, 175, 310, 311, 356, 365, 377], "variable_data": [141, 142, 310, 311], "intern": [141, 142, 172, 173, 310, 311, 340, 342, 345, 347, 353], "conv1d": [145, 146, 314, 315], "dilat": [145, 146, 286, 287, 314, 315], "fw": [145, 146, 314, 315, 355, 356], "d_out": [145, 146, 314, 315], "wio": [145, 146], "conv1d_transpos": [145, 146, 314, 315], "output_shap": [145, 146, 314, 315], "conv2d": [145, 146, 314, 315, 1750], "fh": [145, 146, 314, 315], "hwio": [145, 146], "conv3d": [145, 146, 314, 315], "conv3d_transpos": [145, 146, 314, 315], "depthwise_conv2d": [145, 146, 314, 315, 1750], "255": [145, 146, 286, 287, 314, 315], "random_norm": [145, 146, 155, 156, 314, 315, 324, 325], "std": [145, 146, 155, 156, 163, 164, 314, 315, 324, 325, 332, 333, 346], "dropout": [145, 146, 314, 315, 363], "prob": [145, 146, 314, 315, 324, 325], "scale": [145, 146, 310, 311, 314, 315, 1760, 1762], "bia": [145, 146, 153, 154, 314, 315, 322, 323, 360, 364], "outer_batch_shap": [145, 146, 314, 315], "inner_batch_shap": [145, 146, 314, 315], "in_featur": [145, 146, 314, 315], "out_featur": [145, 146, 314, 315], "84": [145, 146, 184, 185, 322, 323, 324, 325], "133": [145, 146], "134": [145, 146], "lstm_updat": [145, 146, 314, 315, 360], "init_h": [145, 146, 314, 315, 360], "init_c": [145, 146, 314, 315, 360], "recurrent_kernel": [145, 146, 314, 315, 360], "recurrent_bia": [145, 146, 314, 315, 360], "multi_head_attent": [145, 146, 314, 315, 353], "num_head": [145, 146, 314, 315], "mask": [145, 146, 314, 315, 358], "to_q_fn": [145, 146, 314, 315], "to_kv_fn": [145, 146, 314, 315], "to_out_fn": [145, 146, 314, 315, 353], "to_q_v": [145, 146, 314, 315], "to_kv_v": [145, 146, 314, 315], "to_out_v": [145, 146, 314, 315], "scaled_dot_product_attent": [145, 146, 314, 315], "choleski": [147, 148, 316, 317, 353], "symmetr": [147, 148, 272, 273, 316, 317, 342, 393, 394, 395, 396, 397], "625": [147, 148], "cross": [147, 148, 149, 150, 316, 317, 318, 319, 343, 1750], "vif": [147, 148, 316, 317], "det": [147, 148, 316, 317], "axis1": [147, 148, 151, 152, 316, 317, 320, 321], "axis2": [147, 148, 316, 317], "eigh": [147, 148, 316, 317], "eigvalsh": [147, 148], "inv": [147, 148, 316, 317, 1750], "adjoint": [147, 148, 316, 317], "matmul": [147, 148, 316, 317, 341, 356, 357, 360, 1750], "matrix_norm": [147, 148, 316, 317], "ord": [147, 148, 316, 317], "fro": [147, 148, 316, 317], "nuc": [147, 148, 316, 317], "matrix_rank": [147, 148, 316, 317], "rank": [147, 148, 151, 152, 165, 166, 316, 317, 320, 321, 334, 335], "singular": [147, 148, 316, 317, 344], "largest_singular_valu": [147, 148, 316, 317], "ep": [147, 148, 316, 317], "defici": [147, 148], "matrix_transpos": [147, 148, 316, 317, 362], "pinv": [147, 148, 316, 317, 1750], "0426": [147, 148, 316, 317], "0964": [147, 148, 316, 317], "0605": [147, 148, 316, 317], "1368": [147, 148, 316, 317], "qr": [147, 148, 316, 317], "slogdet": [147, 148, 316, 317], "namedtupl": [147, 148, 159, 160, 316, 317, 328, 329], "logabsdet": [147, 148, 316, 317], "6931472": [147, 148], "solv": [147, 148, 316, 317, 339, 354, 361, 376, 1762], "svd": [147, 148, 316, 317, 1750], "compute_uv": [147, 148, 316, 317], "full_matric": [147, 148, 316, 317], "svdval": [147, 148, 316, 317], "tensordot": [147, 148, 316, 317, 344], "vander": [147, 148, 316, 317], "vandermond": [147, 148, 316, 317], "column": [147, 148, 316, 317, 393, 398], "len": [147, 148, 316, 317, 342, 353, 354, 356, 362, 365], "vecdot": [147, 148, 316, 317], "vector_norm": [147, 148, 316, 317], "vector_to_skew_symmetric_matrix": [147, 148, 316, 317, 1750], "binary_cross_entropi": [149, 150, 318, 319], "pred": [149, 150, 318, 319, 342, 351, 353], "predict": [149, 150, 318, 319], "amount": [149, 150, 318, 319, 345, 355], "smooth": [149, 150, 318, 319], "binari": [149, 150, 318, 319], "entropi": [149, 150, 318, 319], "357": [149, 150, 318, 319], "223": [149, 150, 318, 319], "cross_entropi": [149, 150, 318, 319, 342, 351, 353], "3862944": [149, 150], "sparse_cross_entropi": [149, 150, 318, 319], "logit": [149, 150, 318, 319], "x_min": [151, 152, 320, 321, 365], "x_max": [151, 152, 320, 321, 365], "join": [151, 152, 172, 173, 348, 1750], "count": [151, 152, 159, 160, 165, 166, 320, 321, 328, 329, 334, 335, 342, 346, 363], "constant_pad": [151, 152, 320, 321], "expand_dim": [151, 152, 320, 321, 354, 360, 363, 1750], "permute_dim": [151, 152, 320, 321], "valueerror": [151, 152, 308, 309, 320, 321, 348], "reus": [151, 152, 320, 321, 348, 356, 1765], "memori": [151, 152, 320, 321, 344, 345, 353, 354, 358, 360, 375, 377, 1750, 1760, 1762, 1763, 1764], "buffer": [151, 152, 320, 321, 377], "roll": [151, 152, 320, 321, 342, 350], "restor": [151, 152, 320, 321], "num_or_size_split": [151, 152, 172, 173, 320, 321, 360], "with_remaind": [151, 152, 172, 173, 320, 321], "entri": [151, 152, 172, 173, 320, 321, 1760], "squeez": [151, 152, 320, 321, 1750, 1760], "swapax": [151, 152, 320, 321], "axis0": [151, 152, 320, 321], "swap_ax": [151, 152], "tile": [151, 152, 308, 309, 320, 321, 1750], "rep": [151, 152, 320, 321], "unpack": [151, 152, 320, 321, 349, 355, 356], "zero_pad": [151, 152, 320, 321, 1750], "layer_norm": [153, 154, 322, 323], "normalized_idx": [153, 154, 322, 323], "new_std": [153, 154, 322, 323], "learnabl": [153, 154, 322, 323, 365], "gamma": [153, 154, 155, 156, 322, 323], "0976": [153, 154], "3452": [153, 154], "2740": [153, 154], "1047": [153, 154], "5886": [153, 154], "2732": [153, 154], "7696": [153, 154], "7024": [153, 154], "2518": [153, 154], "826": [153, 154], "178": [153, 154], "981": [153, 154], "831": [153, 154], "421": [153, 154], "parameter": [155, 156, 324, 325], "multinomi": [155, 156, 324, 325], "population_s": [155, 156, 324, 325], "num_sampl": [155, 156, 324, 325], "unnorm": [155, 156, 324, 325, 356], "popul": [155, 156, 163, 164, 172, 173, 324, 325, 332, 333, 344, 345, 356, 360, 1766], "uniform": [155, 156, 324, 325, 364, 1767], "batch_shap": [155, 156, 178, 179, 324, 325, 358, 360, 362], "independ": [155, 156, 324, 325, 339, 344, 346, 352, 360, 365, 1758], "highest": [155, 156, 324, 325], "low": [155, 156, 324, 325, 342, 354, 358, 360, 1756, 1758, 1760, 1761, 1762, 1764, 1766], "half": [155, 156, 324, 325, 358], "int16": [155, 156, 180, 181, 324, 325, 344, 356, 360], "int64": [155, 156, 157, 158, 161, 162, 180, 181, 324, 325, 326, 327, 330, 331, 332, 333, 344, 356, 360], "72": [155, 156, 310, 311], "235": [155, 156], "float16": [155, 156, 324, 325, 344, 356, 402, 404], "49": [155, 156, 316, 317], "807": [155, 156], "42": [155, 156, 170, 171, 310, 311, 322, 323, 324, 325, 360, 365], "random_uniform": [155, 156, 324, 325, 345, 356, 364, 1750], "boundari": [155, 156, 324, 325, 1760], "86": [155, 156, 324, 325], "06": [155, 156, 184, 185, 310, 311, 356, 363], "53": [155, 156, 184, 185], "argmax": [157, 158, 326, 327, 1750], "output_dtyp": [157, 158, 326, 327], "insert": [157, 158, 326, 327], "occurr": [157, 158], "argmin": [157, 158, 326, 327, 1750], "singleton": [157, 158, 163, 164, 165, 166, 316, 317, 326, 327, 332, 333, 334, 335, 360], "accordingli": [157, 158, 163, 164, 165, 166, 316, 317, 326, 327, 332, 333, 334, 335, 349, 354, 360], "argwher": [157, 158, 326, 327, 349], "nonzero": [157, 158, 326, 327], "as_tupl": [157, 158, 326, 327], "fewer": [157, 158, 326, 327], "yield": [157, 158, 343, 349], "unique_al": [159, 160, 328, 329], "unique_count": [159, 160, 328, 329], "field": [159, 160, 328, 329, 376, 1758, 1766], "unique_invers": [159, 160, 328, 329], "inverse_indic": [159, 160, 328, 329], "reconstruct": [159, 160, 328, 329], "unique_valu": [159, 160, 328, 329], "argsort": [161, 162, 330, 331], "descend": [161, 162, 330, 331], "ascend": [161, 162, 330, 331], "stabil": [161, 162, 330, 331, 344, 358], "searchsort": [161, 162, 330, 331], "sorter": [161, 162, 330, 331], "ret_dtyp": [161, 162, 330, 331], "cumprod": [163, 164, 332, 333, 354, 365], "cumul": [163, 164, 332, 333, 376], "120": [163, 164, 169, 174, 175, 332, 333], "cumsum": [163, 164, 332, 333, 344, 1750], "einsum": [163, 164, 332, 333], "equat": [163, 164, 272, 273, 332, 333, 393, 394, 1760], "arithmet": [163, 164, 332, 333, 354], "x_i": [163, 164, 184, 185, 347, 402, 415], "propag": [163, 164], "varianc": [163, 164, 332, 333], "freedom": [163, 164, 332, 333, 341], "constitut": [163, 164, 332, 333, 351, 360, 1761], "unbias": [163, 164, 332, 333], "commonli": [163, 164, 332, 333, 348, 351], "6666665": [163, 164, 363], "667": [163, 164, 308, 309], "AND": [165, 166, 334, 335], "backward": [165, 166, 334, 335, 377], "add_ivy_array_instance_method": 167, "cl": [167, 168, 336, 337], "to_ignor": [167, 168, 336, 337], "loop": [167, 168, 336, 337, 341, 349, 377], "_wrap_funct": [167, 168, 336, 337, 351, 352], "toi": [167, 168, 336, 337], "arrayexampl": [167, 168], "hasattr": [167, 168, 336, 337], "dict_in": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "queue": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 363], "queue_load_s": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "container_combine_method": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "list_join": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "queue_timeout": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "print_limit": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "key_length_limit": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "print_ind": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "print_line_spac": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "ivyh": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "default_key_color": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "keyword_color_dict": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "rebuild_child_contain": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "types_to_iteratively_nest": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "alphabetical_kei": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "containerwithactiv": [169, 170, 174, 175], "containerwithconvers": [169, 174, 175, 176], "containerwithcr": [169, 174, 175, 178], "containerwithdatatyp": [169, 174, 175, 180], "containerwithdevic": [169, 174, 175, 182], "containerwithelementwis": [169, 174, 175, 184, 342], "containerwithgener": [169, 174, 175, 308], "containerwithgradi": [169, 174, 175, 310], "containerwithimag": [169, 174, 175, 312], "containerwithlay": [169, 174, 175, 314], "containerwithlinalg": [169, 174, 175, 316], "containerwithloss": [169, 174, 175, 318], "containerwithnorm": [169, 174, 175, 322], "containerwithrandom": [169, 174, 175, 324], "containerwithsearch": [169, 174, 175, 326], "containerwithset": [169, 174, 175, 328], "containerwithsort": [169, 174, 175, 330], "containerwithstatist": [169, 174, 175, 332], "containerwithutil": [169, 174, 175, 334], "containerwithactivationexperiment": [169, 174, 175, 187], "containerwithconversionexperiment": [169, 174, 175, 270], "containerwithcreationexperiment": [169, 174, 175, 272], "containerwithdata_typeexperiment": [169, 174, 175, 274], "containerwithdeviceexperiment": [169, 174, 175, 276], "containerwithelementwiseexperiment": [169, 174, 175, 278], "containerwithgeneralexperiment": [169, 174, 175, 280], "containerwithgradientsexperiment": [169, 174, 175, 282], "containerwithimageexperiment": [169, 174, 175, 284], "containerwithlayersexperiment": [169, 174, 175, 286], "containerwithlinalgexperiment": [169, 174, 175, 288], "containerwithlossesexperiment": [169, 174, 175, 290], "containerwithmanipulationexperiment": [169, 174, 175, 292], "containerwithnormsexperiment": [169, 174, 175, 294], "containerwithrandomexperiment": [169, 174, 175, 296], "containerwithsearchingexperiment": [169, 174, 175, 298], "containerwithsetexperiment": [169, 174, 175, 300], "containerwithsortingexperiment": [169, 174, 175, 302], "containerwithstatisticalexperiment": [169, 174, 175, 304], "containerwithutilityexperiment": [169, 174, 175, 306], "dictionari": [169, 172, 173, 174, 175, 344, 363, 377], "multiprocess": [169, 172, 173, 174, 175, 363, 377], "asynchron": [169, 172, 173, 174, 175, 1760], "arriv": [169, 172, 173, 174, 175, 358], "timeout": [169, 172, 173, 174, 175], "whitespac": [169, 172, 173, 174, 175], "indent": [169, 172, 173, 174, 175, 363], "extra": [169, 172, 173, 174, 175, 340, 344, 346, 352, 354, 355, 358, 360, 1757, 1762], "newlin": [169, 172, 173, 174, 175, 347], "color": [169, 172, 173, 174, 175, 1810, 1811], "map": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 344, 350, 351, 354, 356, 357, 363, 376, 377, 1749, 1761], "termcolor": [169, 172, 173, 174, 175], "constructor": [169, 172, 173, 174, 175, 344, 345, 362], "alphabet": [169, 172, 173, 174, 175], "rshift": [169, 174, 175], "143": [169, 174, 175, 184, 185, 346], "containerbas": [170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342], "key_chain": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "to_appli": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "prune_unappli": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "map_sequ": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 272, 273, 278, 279, 286, 287, 288, 289, 292, 293, 296, 297, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "formul": [170, 171], "chain": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 342, 354, 364, 365, 377, 1760], "prune": [170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 278, 279, 292, 293, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335], "slope": [170, 171], "leaki": [170, 171], "371": [170, 171], "rectifi": [170, 171], "revert": [170, 171], "535": [170, 171], "948": [170, 171], "static_gelu": [170, 171], "static_leaky_relu": [170, 171], "static_log_softmax": [170, 171], "static_relu": [170, 171], "static_sigmoid": [170, 171], "static_softmax": [170, 171], "static_softplu": [170, 171], "__getitem__": [172, 173, 342], "queri": [172, 173, 342, 344, 362, 1760], "slice": [172, 173, 308, 309, 393, 398, 1760], "__setitem__": [172, 173, 340, 342, 362], "all_fals": [172, 173], "assert_is_bool": [172, 173], "all_key_chain": [172, 173], "include_empti": [172, 173], "all_tru": [172, 173, 342, 363], "as_bool": [172, 173], "assert_contains_sub_contain": [172, 173], "sub_cont": [172, 173], "diff": [172, 173, 342, 346, 363], "assert_contains_sub_structur": [172, 173], "assert_ident": [172, 173], "check_typ": [172, 173], "same_arrai": [172, 173, 363], "arrays_equ": [172, 173], "assert_identical_structur": [172, 173], "at_key_chain": [172, 173], "ignore_key_error": [172, 173], "ignore_non": [172, 173], "at_kei": [172, 173], "ignor": [172, 173, 343, 346, 356, 377, 1766], "substr": [172, 173], "duplic": [172, 173, 341, 347, 349, 352, 355, 364, 1766], "container_rightmost": [172, 173], "common_key_chain": [172, 173, 342], "cont_inplace_upd": [172, 173], "contains_sub_contain": [172, 173], "contains_sub_structur": [172, 173], "create_if_abs": [172, 173], "noth": [172, 173, 358, 1766], "cutoff_at_depth": [172, 173], "depth_cutoff": [172, 173], "cutoff_at_height": [172, 173], "height_cutoff": [172, 173], "deep_copi": [172, 173, 363], "dev_str": [172, 173], "diff_kei": [172, 173], "detect_key_diff": [172, 173], "detect_value_diff": [172, 173], "detect_shape_diff": [172, 173], "treat": [172, 173, 356, 361, 365, 402, 414], "container0": [172, 173], "duplicate_array_keychain": [172, 173], "find_sub_contain": [172, 173], "sub_cont_to_find": [172, 173], "exsit": [172, 173], "find_sub_structur": [172, 173], "sub_struc_to_find": [172, 173], "flatten_key_chain": [172, 173, 363], "__": [172, 173, 346, 363], "above_height": [172, 173, 363], "below_depth": [172, 173, 363], "format_key_chain": [172, 173], "format_fn": [172, 173], "string": [172, 173, 341, 344, 345, 348, 349, 360, 363], "from_disk_as_hdf5": [172, 173, 363], "h5_obj_or_filepath": [172, 173], "slice_obj": [172, 173], "load": [172, 173, 377, 1759, 1766], "disk": [172, 173, 363, 1759], "h5py": [172, 173], "hdf5": [172, 173, 363], "h5": [172, 173], "from_disk_as_json": [172, 173, 363], "json_filepath": [172, 173], "from_disk_as_pickl": [172, 173, 363], "pickle_filepath": [172, 173], "pickl": [172, 173, 342, 363], "from_flat_list": [172, 173], "flat_list": [172, 173], "flat": [172, 173], "h5_file_s": [172, 173], "handle_inplac": [172, 173], "prime": [172, 173], "overwritten": [172, 173, 340, 341], "has_kei": [172, 173], "query_kei": [172, 173], "somewher": [172, 173], "has_key_chain": [172, 173], "identical_array_shap": [172, 173], "identical_config": [172, 173], "identical_structur": [172, 173], "if_exist": [172, 173], "key_chains_contain": [172, 173], "sub_str": [172, 173], "list_stack": [172, 173, 363], "map_cont": [172, 173], "include_self": [172, 173], "possibi": [172, 173], "max_depth": [172, 173], "multi_map": [172, 173, 342], "map_nest": [172, 173], "leftmost": [172, 173], "multi_map_in_static_method": [172, 173, 342], "fn_name": [172, 173, 341, 355, 356], "num_arrai": [172, 173, 355, 356], "overwrite_at_key_chain": [172, 173], "target_dict": [172, 173], "return_dict": [172, 173], "prune_empti": [172, 173], "keep_non": [172, 173], "prune_key_chain": [172, 173], "key1": [172, 173, 364], "key2": [172, 173], "key3": [172, 173], "prune_key_from_key_chain": [172, 173], "prune_kei": [172, 173], "prune_keys_from_key_chain": [172, 173], "remove_key_length_limit": [172, 173], "remove_print_limit": [172, 173], "reshape_lik": [172, 173], "leading_shap": [172, 173], "return_cont": [172, 173], "restructur": [172, 173], "keep_orig": [172, 173], "restructure_key_chain": [172, 173], "keychain_map": [172, 173], "set_at_key_chain": [172, 173], "set_at_kei": [172, 173], "attribut": [172, 173, 342, 344, 347, 352, 353, 361, 362, 363, 364], "shared_shap": [172, 173], "show_sub_contain": [172, 173], "sub_cont_or_keychain": [172, 173], "shuffle_h5_fil": [172, 173], "seed_valu": [172, 173], "dataset": [172, 173, 363, 375, 1750], "size_ordered_arrai": [172, 173], "keychain": [172, 173], "slice_kei": [172, 173], "key_slic": [172, 173], "all_depth": [172, 173], "slice_via_kei": [172, 173], "sort_by_kei": [172, 173], "split_cont": [172, 173], "constitu": [172, 173, 365], "structural_diff": [172, 173], "to_dict": [172, 173], "to_disk_as_hdf5": [172, 173, 363], "starting_index": [172, 173], "max_batch_s": [172, 173], "to_disk_as_json": [172, 173, 363], "to_disk_as_pickl": [172, 173, 363], "to_flat_list": [172, 173], "to_iter": [172, 173, 342], "leaf_keys_onli": [172, 173], "to_iterator_kei": [172, 173], "to_iterator_valu": [172, 173], "to_json": [172, 173], "to_nested_list": [172, 173], "to_raw": [172, 173], "raw": [172, 173, 347, 1761], "trim_kei": [172, 173], "max_length": [172, 173], "trim": [172, 173], "try_kc": [172, 173], "tri": [172, 173], "concatten": [172, 173], "unstack_cont": [172, 173], "dim_siz": [172, 173], "update_config": [172, 173], "with_default_key_color": [172, 173], "with_entries_as_list": [172, 173], "with_ivy_backend": [172, 173], "ivy_backend": [172, 173], "with_key_length_limit": [172, 173, 363], "with_print_ind": [172, 173, 363], "with_print_limit": [172, 173, 363], "with_print_line_spac": [172, 173], "static_to_ivi": [176, 177], "static_to_n": [176, 177], "2324": [178, 179], "234": [178, 179], "123": [178, 179, 356], "static_arang": [178, 179], "static_asarrai": [178, 179], "static_empty_lik": [178, 179], "static_ey": [178, 179], "n_row": [178, 179, 272, 273, 393, 398], "n_col": [178, 179, 272, 273, 393, 398], "static_from_dlpack": [178, 179], "static_full_lik": [178, 179], "static_linspac": [178, 179], "endpoint": [178, 179, 350], "static_logspac": [178, 179], "static_meshgrid": [178, 179], "static_native_arrai": [178, 179], "static_one_hot": [178, 179], "static_on": [178, 179], "static_ones_lik": [178, 179], "static_tril": [178, 179], "static_triu": [178, 179], "static_zero": [178, 179], "static_zeros_lik": [178, 179], "718": [180, 181, 184, 185], "618": [180, 181, 184, 185], "broadcats": [180, 181], "1800": [180, 181], "32768": [180, 181], "32767": [180, 181], "2147483648": [180, 181], "2147483647": [180, 181], "static_astyp": [180, 181], "static_broadcast_arrai": [180, 181], "And": [180, 181, 356], "static_broadcast_to": [180, 181], "static_can_cast": [180, 181], "from_": [180, 181], "static_default_float_dtyp": [180, 181], "float_dtyp": [180, 181], "static_dtyp": [180, 181], "static_finfo": [180, 181], "static_function_supported_dtyp": [180, 181], "static_function_unsupported_dtyp": [180, 181], "static_iinfo": [180, 181], "static_is_bool_dtyp": [180, 181], "dtype_in": [180, 181], "static_is_float_dtyp": [180, 181], "roughli": [180, 181, 1763], "static_is_int_dtyp": [180, 181], "static_is_uint_dtyp": [180, 181], "static_result_typ": [180, 181], "static_dev": [182, 183], "static_to_devic": [182, 183], "__dlpack__": [182, 183], "caveat": [182, 183], "portabl": [182, 183, 1750, 1758], "524": [184, 185], "644": [184, 185, 364], "305": [184, 185, 314, 315], "915": [184, 185], "29": [184, 185, 308, 309, 310, 311, 324, 325], "983": [184, 185], "75": [184, 185, 308, 309, 314, 315, 324, 325, 393, 395], "978": [184, 185], "696": [184, 185, 324, 325], "993": [184, 185], "203": [184, 185, 322, 323], "34": [184, 185, 286, 287, 308, 309, 324, 325], "52": [184, 185, 308, 309, 310, 311, 324, 325], "351": [184, 185], "50": [184, 185, 288, 289, 308, 309, 362], "00613": [184, 185], "0154": [184, 185], "0262": [184, 185], "873": [184, 185], "333": [184, 185], "thefunct": [184, 185], "649": [184, 185], "220": [184, 185], "959": [184, 185], "865": [184, 185], "metho": [184, 185], "999999999999": [184, 185], "7j": [184, 185], "3j": [184, 185], "0j": [184, 185], "898": [184, 185], "0414": [184, 185], "956": [184, 185], "65": [184, 185, 310, 311, 324, 325], "2860": [184, 185], "413": [184, 185], "recirpoc": [184, 185], "300": [184, 185, 308, 309, 356], "527": [184, 185], "301": [184, 185], "757": [184, 185], "279": [184, 185], "835": [184, 185], "347": [184, 185], "721": [184, 185], "static_ab": [184, 185], "static_aco": [184, 185], "static_acosh": [184, 185], "static_add": [184, 185, 342, 346, 347], "static_asin": [184, 185], "412": [184, 185, 314, 315], "201": [184, 185, 286, 287], "static_asinh": [184, 185], "static_atan": [184, 185], "static_atan2": [184, 185], "static_atanh": [184, 185], "static_bitwise_and": [184, 185], "static_bitwise_invert": [184, 185], "static_bitwise_left_shift": [184, 185], "static_bitwise_or": [184, 185], "static_bitwise_right_shift": [184, 185], "static_bitwise_xor": [184, 185], "static_ceil": [184, 185], "static_co": [184, 185], "static_cosh": [184, 185], "static_deg2rad": [184, 185], "static_divid": [184, 185], "static_equ": [184, 185], "static_erf": [184, 185], "static_exp": [184, 185], "static_expm1": [184, 185], "areal": [184, 185], "static_floor": [184, 185], "static_floor_divid": [184, 185], "static_great": [184, 185], "static_greater_equ": [184, 185], "static_isfinit": [184, 185], "static_isinf": [184, 185], "static_isnan": [184, 185], "static_isr": [184, 185], "23j": [184, 185], "9j": [184, 185], "static_less": [184, 185], "static_less_equ": [184, 185], "static_log": [184, 185], "static_log10": [184, 185], "static_log1p": [184, 185], "static_log2": [184, 185], "static_logaddexp": [184, 185], "static_logical_and": [184, 185], "static_logical_not": [184, 185], "static_logical_or": [184, 185], "static_logical_xor": [184, 185], "static_maximum": [184, 185], "static_minimum": [184, 185], "static_multipli": [184, 185], "static_neg": [184, 185], "static_not_equ": [184, 185], "static_posit": [184, 185], "static_pow": [184, 185], "static_rad2deg": [184, 185], "5160": [184, 185], "10300": [184, 185], "15500": [184, 185], "20600": [184, 185], "static_reciproc": [184, 185], "static_remaind": [184, 185], "static_round": [184, 185], "thevfunct": [184, 185], "static_sign": [184, 185], "static_sin": [184, 185], "static_sinh": [184, 185], "static_sqrt": [184, 185], "static_squar": [184, 185], "static_subtract": [184, 185], "static_tan": [184, 185, 342, 346], "static_tanh": [184, 185], "995": [184, 185], "9999": [184, 185], "static_trapz": [184, 185], "static_trunc": [184, 185], "static_trunc_divid": [184, 185], "hamming_window": [272, 273, 393], "coeffici": [272, 273, 393, 394], "ham": [272, 273, 393, 394], "8000": [272, 273, 393, 394], "2000": [272, 273, 393, 394], "4180": [272, 273], "8180": [272, 273], "hann_window": [272, 273, 393], "hann": [272, 273, 393, 395], "7500": [272, 273], "3455": [272, 273], "9045": [272, 273], "kaiser_bessel_derived_window": [272, 273, 393], "spectral": [272, 273, 393, 396, 397], "analysi": [272, 273, 393, 396, 397, 1760, 1761], "kaiser": [272, 273, 393, 396, 397], "70710677": [272, 273, 393, 396], "18493208": [272, 273, 393, 396], "9827513": [272, 273, 393, 396], "kaiser_window": [272, 273, 393], "static_kaiser_window": [272, 273], "2049": [272, 273], "8712": [272, 273], "0367": [272, 273, 393, 397], "7753": [272, 273], "static_hamming_window": [272, 273], "static_hann_window": [272, 273], "window_length": [272, 273, 393, 394, 395, 396, 397, 399], "static_hann": [272, 273], "static_kaiser_bessel_derived_window": [272, 273], "static_triu_indic": [272, 273], "triu_indic": [272, 273, 393], "1080": [278, 279], "1550": [278, 279], "130": [278, 279], "08746284": [278, 279], "32192809": [278, 279], "0707": [278, 279, 402, 415], "0579": [278, 279, 402, 415], "static_exp2": [278, 279], "static_float_pow": [278, 279], "static_fmax": [278, 279], "static_fmod": [278, 279], "static_gcd": [278, 279], "static_isclos": [278, 279], "static_isneginf": [278, 279], "static_isposinf": [278, 279], "static_lcm": [278, 279], "static_logaddexp2": [278, 279], "static_nan_to_num": [278, 279], "static_nansum": [278, 279], "static_sinc": [278, 279], "636": [278, 279], "090": [278, 279], "070": [278, 279], "057": [278, 279], "avg_pool2d": [286, 287], "673": [286, 287], "0507": [286, 287], "static_avg_pool2d": [286, 287], "static_avg_pool3d": [286, 287], "static_dct": [286, 287], "132": [286, 287], "242": [286, 287], "253": [286, 287], "515": [286, 287], "467": [286, 287], "static_max_pool1d": [286, 287], "static_max_pool2d": [286, 287], "max_pool2dd": [286, 287], "static_max_pool3d": [286, 287], "450": [288, 289], "static_diagflat": [288, 289], "static_kron": [288, 289], "kroneck": [288, 289], "30192195": [292, 293], "static_flatten": [292, 293], "static_fliplr": [292, 293], "static_flipud": [292, 293], "static_heavisid": [292, 293], "static_hstack": [292, 293], "static_i0": [292, 293], "static_moveaxi": [292, 293, 304, 305], "static_pad": [292, 293], "static_rot90": [292, 293], "static_top_k": [292, 293], "static_vstack": [292, 293], "43643127": [296, 297], "32325703": [296, 297], "24031169": [296, 297], "34251311": [296, 297], "31692529": [296, 297], "3405616": [296, 297], "5319725": [296, 297], "22458365": [296, 297], "24344385": [296, 297], "26588406": [296, 297], "61075421": [296, 297], "12336174": [296, 297], "51142915": [296, 297], "25041268": [296, 297], "23815817": [296, 297], "64042903": [296, 297], "25763214": [296, 297], "10193883": [296, 297], "31624692": [296, 297], "46567987": [296, 297], "21807321": [296, 297], "37677699": [296, 297], "39914594": [296, 297], "22407707": [296, 297], "static_dirichlet": [296, 297], "static_msort": [302, 303], "static_median": [304, 305], "static_all_equ": [308, 309], "833": [308, 309], "200": [308, 309, 363], "400": [308, 309], "500": [308, 309], "600": [308, 309], "700": [308, 309], "static_assert_supports_inplac": [308, 309], "static_clip_matrix_norm": [308, 309], "849": [308, 309], "static_clip_vector_norm": [308, 309], "static_einops_rearrang": [308, 309], "static_einops_reduc": [308, 309], "93": [308, 309, 324, 325], "66": [308, 309, 310, 311], "static_einops_repeat": [308, 309], "static_fourier_encod": [308, 309], "static_gath": [308, 309], "static_gather_nd": [308, 309], "static_get_num_dim": [308, 309], "static_has_nan": [308, 309], "leafwis": [308, 309], "static_inplace_decr": [308, 309], "static_inplace_incr": [308, 309], "static_inplace_upd": [308, 309], "static_is_arrai": [308, 309], "static_is_ivy_arrai": [308, 309], "static_is_ivy_contain": [308, 309], "static_is_native_arrai": [308, 309], "static_scatter_flat": [308, 309], "ref": [308, 309, 316, 317, 347, 360], "static_scatter_nd": [308, 309], "static_stable_divid": [308, 309], "22222222": [308, 309], "11111111": [308, 309], "857": [308, 309], "444": [308, 309], "static_stable_pow": [308, 309], "static_supports_inplace_upd": [308, 309], "static_to_list": [308, 309], "static_to_numpi": [308, 309], "static_to_scalar": [308, 309], "static_value_is_nan": [308, 309], "452": [308, 309], "425": [308, 309], "87": [310, 311], "976": [310, 311], "49e": [310, 311], "74e": [310, 311], "95e": [310, 311], "024": [310, 311], "096": [310, 311], "216": [310, 311, 316, 317], "384": [310, 311], "626": [310, 311], "en": [310, 311], "wikipedia": [310, 311], "wiki": [310, 311], "stochastic_gradient_desc": [310, 311], "w_new": [310, 311], "88": [310, 311, 324, 325], "708": [310, 311], "445": [310, 311], "6e": [310, 311], "00036": [310, 311], "00016": [310, 311], "00049": [310, 311], "layerwis": [310, 311], "static_is_vari": [310, 311], "static_stop_gradi": [310, 311], "static_vari": [310, 311], "static_variable_data": [310, 311], "ey": [314, 315, 358, 365], "conv2d_transpos": [314, 315], "inp": [314, 315], "278": [314, 315], "105": [314, 315], "352": [314, 315], "195": [314, 315], "static_conv1d": [314, 315], "static_conv1d_transpos": [314, 315], "static_conv2d": [314, 315], "static_conv2d_transpos": [314, 315], "static_conv3d": [314, 315], "static_conv3d_transpos": [314, 315], "static_depthwise_conv2d": [314, 315], "static_dropout": [314, 315], "static_linear": [314, 315], "static_lstm_upd": [314, 315], "static_multi_head_attent": [314, 315], "static_scaled_dot_product_attent": [314, 315], "73": [316, 317, 356], "577": [316, 317], "707": [316, 317], "matrix_pow": [316, 317], "pseudo": [316, 317], "static_choleski": [316, 317], "static_rol": [316, 317, 320, 321, 342, 346], "static_cross": [316, 317], "static_det": [316, 317], "static_diag": [316, 317], "static_diagon": [316, 317], "static_inn": [316, 317], "static_inv": [316, 317], "static_matmul": [316, 317], "matul": [316, 317], "static_matrix_norm": [316, 317], "deimens": [316, 317], "static_matrix_pow": [316, 317], "static_matrix_rank": [316, 317], "static_matrix_transpos": [316, 317], "static_out": [316, 317], "static_pinv": [316, 317], "static_qr": [316, 317], "static_slogdet": [316, 317], "static_solv": [316, 317], "static_svd": [316, 317], "static_svdv": [316, 317], "static_tensordot": [316, 317], "static_trac": [316, 317], "static_vand": [316, 317], "343": [316, 317], "512": [316, 317], "729": [316, 317, 364], "static_vecdot": [316, 317], "static_vector_norm": [316, 317], "mathemat": [316, 317, 344, 354, 358, 1760, 1766], "l1": [316, 317, 342, 363], "manhattan": [316, 317], "l2": [316, 317, 342], "euclidean": [316, 317], "static_vector_to_skew_symmetric_matrix": [316, 317], "511": [318, 319], "5108256": [318, 319], "609438": [318, 319], "static_binary_cross_entropi": [318, 319], "static_cross_entropi": [318, 319], "20397282": [318, 319], "83258148": [318, 319], "60943794": [318, 319], "static_sparse_cross_entropi": [318, 319], "static_stack": [320, 321], "static_clip": [320, 321], "static_concat": [320, 321], "static_constant_pad": [320, 321], "static_expand_dim": [320, 321], "container_axi": [320, 321], "static_flip": [320, 321], "static_permute_dim": [320, 321], "static_repeat": [320, 321], "static_reshap": [320, 321], "positivclip": [320, 321], "static_split": [320, 321], "static_squeez": [320, 321], "static_swapax": [320, 321], "static_til": [320, 321], "static_unstack": [320, 321], "static_zero_pad": [320, 321], "classivi": [320, 321, 328, 329], "342": [322, 323], "0427": [322, 323], "299": [322, 323], "241": [322, 323], "431": [324, 325], "68": [324, 325], "83": [324, 325], "274": [324, 325], "91": [324, 325], "static_beta": [324, 325], "static_multinomi": [324, 325], "static_randint": [324, 325], "static_random_norm": [324, 325], "651": [324, 325], "static_random_uniform": [324, 325], "481": [324, 325], "0999": [324, 325], "static_shuffl": [324, 325], "static_argmax": [326, 327], "static_argmin": [326, 327], "static_argwher": [326, 327], "static_nonzero": [326, 327], "static_wher": [326, 327], "static_unique_al": [328, 329], "static_unique_count": [328, 329], "static_unique_invers": [328, 329], "static_unique_valu": [328, 329], "static_argsort": [330, 331], "static_searchsort": [330, 331], "static_sort": [330, 331], "static_cumprod": [332, 333], "static_cumsum": [332, 333], "static_sum": [332, 333], "static_var": [332, 333], "12666667": [332, 333], "11555555": [332, 333], "contian": [332, 333], "6666667": [332, 333], "static_al": [334, 335], "static_ani": [334, 335], "add_ivy_container_instance_method": 336, "containerexampl": [336, 337], "who": [338, 359, 377, 1760, 1762], "hood": [338, 342, 346, 351, 354, 356, 358, 359, 360, 363, 365, 1767], "weed": [338, 359], "tour": 338, "primari": [338, 341, 344, 353, 354, 356, 358, 377, 393, 398, 1749], "superset": [338, 377], "goe": [338, 358], "dynam": [338, 344, 345, 353, 354, 360, 1760, 1764], "runtim": [338, 356, 358, 1760], "borrow": 338, "conjunct": 339, "establish": [339, 1762], "2020": [339, 1760], "group": [339, 342, 351, 354, 355, 1756, 1759, 1765], "intend": [339, 350, 1758, 1760, 1764, 1765], "popular": [339, 1760], "sens": [339, 346, 354, 362], "unconnect": 339, "decis": [339, 342, 344, 354, 358, 360, 362, 1760], "initialis": [339, 356], "checkout": [339, 356], "everytim": [339, 344], "init": [339, 365], "thoroughli": 339, "ci": [339, 344, 349, 356, 377], "insert_chosen_backend": 339, "test_linalg": 339, "test_set_funct": 339, "test_signatur": 339, "excess": [339, 341, 346], "explicitli": [339, 340, 341, 342, 344, 347, 348, 351, 352, 353, 356, 360, 377, 1760], "array_modul": 339, "vv": 339, "test_manipulation_funct": 339, "test_concat": [339, 356], "typic": [339, 351, 402, 408, 1759, 1767], "nb": 339, "varieti": [339, 343, 344, 345, 356, 1756, 1758, 1762, 1763, 1766, 1767], "known": [339, 344, 354, 356], "test_asarray_arrai": 339, "test_floor_divid": 339, "health": 339, "test_iop": 339, "__imod__": 339, "x1_i": 339, "isequ": 339, "test_matrix_norm": 339, "alter": 339, "tweak": 339, "array_api_methods_to_test": 339, "identifi": [339, 343, 356, 358], "202": 339, "test_trac": 339, "latter": [339, 341, 344, 347, 354], "hand": [339, 344, 351, 356, 377], "scheme": [339, 364, 1760], "edg": [339, 356, 1750, 1760, 1762, 1766], "test_special_cas": 339, "__ipow__": 339, "is_integ": 339, "unskip": 339, "temporarili": [339, 357], "straightforward": [339, 363], "tf": [340, 344, 345, 350, 353, 354, 356, 357, 358, 360, 365, 377, 1749, 1750, 1760], "wrapper": [340, 342, 344, 352, 353, 362, 1749, 1756, 1760], "_data": [340, 354, 362], "meta": [340, 357, 1760], "organiz": [340, 342, 354], "inherit": [340, 342, 348, 362, 377, 1749], "bear": [340, 342, 344, 354], "necessarili": [340, 342], "although": [340, 342, 354, 1758, 1760], "underpin": [340, 342, 360], "programmat": [340, 342, 1761], "backup": [340, 342], "accident": [340, 342, 354], "readabl": [340, 342, 348, 350, 357, 362, 363], "absent": [340, 342], "perk": [340, 342], "auto": [340, 342, 363], "__mul__": [340, 342, 346, 350, 358, 362], "__truediv__": [340, 342, 346], "throw": [340, 344, 348, 362, 1760], "imposs": 340, "inputs_to_native_arrai": [340, 352, 378], "outputs_to_ivy_arrai": [340, 344, 345, 350, 352, 378], "firstli": [340, 344, 346, 347, 348, 351, 352, 353, 358, 363, 1756, 1766], "anywai": [340, 352, 354], "secondli": [340, 344], "permit": [340, 350, 354, 356, 358], "dictat": [340, 346, 350, 353], "implicit_backend": [341, 360], "ivy_original_dict": [341, 360], "unmodifi": [341, 344], "opt": [341, 344, 353, 356, 357, 358], "fallback": 341, "layout": [341, 354, 358], "requires_grad": [341, 355], "memory_format": 341, "preserve_format": 341, "weren": 341, "break": [341, 344, 349, 350, 357, 377, 1750], "Not": [341, 355, 363, 364, 377, 402, 414], "vast": [341, 344, 1760], "minor": [341, 358, 360, 377], "fn_name_v_1p12_and_abov": 341, "similarli": [341, 344, 354, 358, 362, 393, 398, 1766], "fn_name_v_1p01_to_1p1": 341, "inclus": [341, 353, 354, 358], "vari": [342, 346, 354, 356, 362], "five": [342, 363], "recap": [342, 346, 364], "arbitrarili": [342, 352, 363], "__repr__": 342, "control": [342, 344, 353, 354, 358, 362, 363, 376, 393, 398, 1749, 1760, 1766], "__getattr__": 342, "underli": [342, 358, 1760], "__setattr__": 342, "__contains__": 342, "__getstate__": 342, "__setstate__": 342, "unpickl": 342, "num_dim": [342, 365], "__len__": 342, "restrict": [342, 354, 360, 1757], "enforc": [342, 362], "extern": [342, 350, 354, 356, 357], "flexibl": [342, 350, 357, 1760], "c1": 342, "lefthand": 342, "righthand": 342, "operand": [342, 347, 354, 402, 415], "decor": [342, 344, 345, 351, 352, 353, 354, 355, 356], "handle_nest": [342, 351, 352, 360, 378], "addition": [342, 353, 354, 1766], "counterpart": [342, 352], "behavior": [342, 344, 354, 355, 356, 358, 360, 377, 1757], "presenc": [342, 353], "absenc": [342, 350, 1760], "implicitli": [342, 360], "themselv": [342, 344, 345, 347, 351, 354, 364, 1757, 1766], "log_pr": [342, 351, 353], "intuit": [342, 363, 364, 1756], "chronolog": 342, "concurr": [342, 351, 1760], "had": [342, 353, 1760, 1761], "consum": [342, 350, 355, 356], "sequenti": [342, 364], "But": [342, 347, 352, 353, 365], "flow": [342, 376, 1760, 1761], "compil": [342, 354, 357, 358, 359, 361, 377, 1749, 1750, 1756, 1759, 1760, 1761, 1764, 1767], "implic": 342, "whatsoev": [342, 351, 1749, 1766], "implicit": [342, 347, 354, 356, 360, 1760], "eager": [342, 377, 1760], "children": 342, "shallowest": 342, "deepest": 342, "event": [343, 356], "ex": 343, "reopen": 343, "review_request": 343, "yml": 343, "dispatch": [343, 377, 1760, 1763], "pair": 343, "test_nn": 343, "yellow": 343, "dot": 343, "queu": 343, "redirect": 343, "book": 343, "procedur": [343, 346], "decoupl": [343, 364], "ran": 343, "badg": 343, "clickabl": 343, "uint8": [344, 356], "uint16": [344, 356, 360], "uint32": [344, 356, 360], "uint64": [344, 356, 360], "bfloat16": [344, 354, 356], "all_dtyp": 344, "all_numeric_dtyp": 344, "all_int_dtyp": 344, "all_float_dtyp": 344, "replic": [344, 346, 354, 358], "four": [344, 346, 350, 351, 356, 358, 363], "thirdli": 344, "native_float32": 344, "importantli": [344, 362, 365, 376], "conveni": [344, 345, 350, 355, 361, 363, 364, 1749, 1766], "set_default_dtyp": [344, 351], "default_dtyp": [344, 351], "arguabl": [344, 345, 354], "promote_typ": 344, "type_promote_arrai": 344, "promote_types_of_input": 344, "jaxarrai": [344, 345, 350, 353, 357, 360], "jnp": [344, 345, 350, 353, 355, 357, 360, 365, 1750], "_handle_0_dim_output": [344, 353], "subtli": [344, 353], "On": [344, 354, 356, 361, 365], "promote_types_frontend_nam": 344, "promote_types_of_frontend_name_input": 344, "frontend_nam": 344, "demonstr": [344, 346, 362], "accuraci": 344, "precis": [344, 354, 358, 402, 404, 1764], "upcast": 344, "instabl": 344, "underflow": 344, "nearli": [344, 350, 352, 1760], "downcast": 344, "footprint": 344, "constraint": 344, "concret": 344, "compound": 344, "infer_dtyp": [344, 345, 350, 352, 378], "default_int_dtyp": 344, "default_float_dtyp": 344, "settabl": [344, 345], "set_default_int_dtyp": 344, "set_default_float_dtyp": 344, "irrelev": [344, 346], "handle_out_argu": [344, 345, 350, 352, 353, 360, 378], "infer_devic": [344, 345, 350, 352, 378], "deleg": [344, 1767], "shape_to_tupl": 344, "with_supported_dtyp": [344, 378], "with_unsupported_dtyp": [344, 378], "unment": 344, "backend_vers": 344, "_cast_for_unary_op": 344, "target_typ": 344, "function_supported_dtyp": 344, "function_unsupported_dtyp": 344, "discov": 344, "unsupported_dtyp": 344, "invalid_dtyp": 344, "former": [344, 347, 354], "uint": [344, 355], "lack": [344, 353, 1760, 1767], "rang": [344, 348, 356, 360, 363, 364, 365, 1750, 1760, 1766], "patch": [344, 1760], "achiev": [344, 349, 352, 356, 363, 365, 1749], "subtl": [344, 357, 1766], "unsign": [344, 355, 360], "offici": [344, 360], "inconsist": [344, 348], "unexpect": 344, "84530": 344, "unwarr": 344, "risk": [344, 1766], "needlessli": 344, "bloat": 344, "undergo": [344, 377], "supported_dtyp": [344, 354], "unsupported_devic": 344, "supported_devic": 344, "slight": [344, 364], "downsid": 344, "coverag": [344, 356], "inflat": 344, "idx": [345, 362], "tpu": [345, 1760, 1763], "get_all_ivy_arrays_on_dev": 345, "aliv": 345, "num_gpu": [345, 356], "total_mem_on_dev": 345, "dev_util": 345, "num_cpu_cor": 345, "default_devic": [345, 348], "outsid": [345, 349, 351, 362, 1765], "dual": 345, "categor": [345, 351, 354], "thrown": [345, 348, 377], "far": [345, 346, 361, 1765, 1766], "set_default_devic": 345, "eight": [346, 359], "func_nam": [346, 347, 351, 354], "static_func_nam": 346, "op_nam": 346, "__r": 346, "combinatori": 346, "variat": [346, 356], "grid": [346, 356, 376], "unus": [346, 349, 353], "okai": [346, 358, 360], "showcas": [346, 376], "meant": 346, "imaginari": 346, "spec": [346, 347], "my_func": [346, 357], "some_flag": 346, "another_flag": 346, "jointli": 346, "x0": 346, "5574077": 346, "1850398": 346, "5463025": 346, "8422884": 346, "91601413": 346, "9647598": 346, "3738229": 346, "1597457": 346, "0963247": 346, "9955841": 346, "3278579": 346, "multi": [346, 359, 377, 1750, 1756, 1758, 1760, 1764], "pars": [346, 377], "satisfi": [346, 356], "asid": [346, 376], "increasingli": 346, "14254655": 346, "1578213": 346, "380515": 346, "trivial": 346, "exlud": 346, "failing_fn_nam": 346, "onlin": [346, 347], "minutest": 346, "suffici": 346, "segment": 346, "fault": [346, 1760], "contrast": [347, 350, 354, 1766], "instanti": 347, "templat": [347, 356, 1750], "array_api": 347, "preview": 347, "render": 347, "incorrectli": 347, "domain": [347, 402, 415, 1758, 1760], "codomain": [347, 402, 415], "needless": [347, 355], "info": [347, 356, 1750], "subset": [347, 350, 354, 356, 360, 1760], "renam": 347, "judgment": 347, "beyond": [347, 354, 1766], "pure": [347, 350, 354, 358, 362, 365, 377, 1760, 1766, 1767], "operator_nam": 347, "succinct": 347, "contstructor": 347, "_forward": [347, 360, 363, 364, 1750], "docst": 347, "ivyexcept": [348, 354], "super": [348, 360, 363, 364, 365], "ivybackendexcept": 348, "_default": 348, "current_backend_str": [348, 360, 362], "_delimit": 348, "indexerror": 348, "ivyerror": 348, "repetit": 348, "caught": 348, "functool": [348, 354, 362], "new_fn": [348, 354], "__name__": 348, "comparison": 348, "error_stack": 348, "axiserror": 348, "bound": [348, 356, 360, 1766], "got": [348, 1750], "assertionerror": [348, 356], "elif": [348, 353, 354], "polici": [348, 356, 376], "moreov": 348, "cleaner": [348, 363], "lesser": 348, "set_split_factor": 348, "split_factor": 348, "met": 348, "flake8": 349, "undefin": 349, "statement": [349, 353, 356, 358, 377], "handler": [349, 359, 361, 365, 1749, 1750], "annot": [349, 350], "star": 349, "byte": [349, 1765, 1766], "notimpl": 349, "notimplementederror": 349, "unsuccess": 349, "reformat": 349, "exceed": 349, "black": 349, "disobei": 349, "taken": [349, 357, 365, 1761], "successfulli": 349, "inde": [349, 350, 358, 377, 1758], "adress": 350, "revisit": 350, "dedic": [350, 362, 364], "to_native_arrays_and_back": [350, 352, 360, 378], "usabl": [350, 357], "sole": [350, 357, 1759, 1760, 1761], "strictli": [350, 353], "linspac": [350, 358, 360, 1750, 1767], "rational": 350, "__div__": [350, 358], "dicat": 350, "futher": 350, "pep": 350, "484": 350, "brittl": 350, "freeli": 350, "technic": [350, 353, 377, 1760, 1762], "original_typ": 350, "cumbersom": 350, "omit": [350, 353, 354], "venn": 351, "diagram": [351, 1766], "light": [351, 354, 377, 1749, 1761, 1766], "array_arg": 351, "cache_fn": 351, "cach": [351, 356], "deal": [351, 355, 377], "modif": [351, 1760], "briefli": [351, 356, 363], "get_all_arrays_on_dev": 351, "nested_map": 351, "index_nest": 351, "inputs_to_ivy_arrai": [352, 378], "heavili": [352, 354, 377], "facilit": 352, "integer_array_to_float": 352, "handle_cmd_line_arg": [352, 355, 356], "as_vari": [352, 355, 356], "with_out": [352, 355, 356], "instance_method": [352, 356], "test_gradi": 352, "topic": [352, 362, 1760], "suffic": [352, 356], "program": [353, 1757, 1758, 1760, 1763, 1764, 1767], "ration": [353, 358], "speak": 353, "x_nativ": 353, "val_n": 353, "unspecifi": 353, "predominantli": [353, 357, 376], "support_native_out": 353, "math": [353, 354, 356, 365, 1750, 1758], "mx": 353, "nd": 353, "_wrap_fn": 353, "dim0": 353, "dim1": 353, "maxim": [353, 358, 360, 1757, 1758, 1762, 1763, 1764], "third": [353, 377, 1759, 1760, 1766], "leverag": [353, 1758, 1760], "capabl": [353, 358], "input_arrai": 353, "plai": [354, 356, 365, 1760, 1763], "tf_frontend": 354, "lax": [354, 355, 358, 365, 377], "neither": [354, 358], "fn_tree": [354, 355], "wrong": [354, 358], "carefulli": [354, 1758, 1763], "acceler": [354, 1750, 1758, 1762, 1763, 1764, 1765], "algebra": [354, 1478, 1758, 1759, 1760, 1763, 1767], "xla": [354, 377, 1749, 1760], "decompos": 354, "dynamic": 354, "extent": 354, "mimic": 354, "arithmetic_oper": 354, "same_kind": 354, "subok": [354, 355, 358], "as_ivy_dtyp": 354, "recov": 354, "obtain": 354, "unhandl": 354, "seek": 354, "subclass": [354, 358], "trigonometric_funct": 354, "from_zero_dim_arrays_to_float": [354, 378], "pointwise_op": 354, "preferred_element_typ": 354, "conv_general_dil": 354, "finer": 354, "nor": [354, 1764], "margin": 354, "fit": [354, 360, 1756, 1757, 1760], "meet": 354, "criteria": 354, "incorpor": [354, 363, 1760], "omiss": 354, "sensibl": 354, "deem": 354, "reserv": 354, "resum": 354, "possibli": [354, 356, 377], "straight": [354, 356, 362, 1750], "ahead": [354, 1760], "heavi": [354, 355, 358, 1761], "logicaland": 354, "truth": [354, 356], "np_frontend": 354, "radd": 354, "_init_data": 354, "isinst": [354, 356, 357, 364, 365], "_process_str_data": 354, "2d": 354, "_shape": [354, 362], "_dtype": [354, 362], "govern": 354, "promote_types_of_": 354, "_input": 354, "promote_types_of_tensorflow_input": 354, "saniti": 354, "handle_numpy_cast": 354, "func_wrapp": [354, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "to_ivy_arrays_and_back": [354, 355], "handle_numpy_casting_speci": 354, "equiv": 354, "safe": 354, "unsaf": 354, "array_type_test": 354, "watch": 354, "youtub": 354, "seri": [354, 356, 1760, 1762], "jump": 355, "knowledg": 355, "test_frontend_funct": 355, "lift": [355, 1761], "get_dtyp": [355, 356], "dtype_and_valu": [355, 356], "num_positional_arg": [355, 356], "get_shap": [355, 356], "np_frontend_help": 355, "nn": [355, 358, 365, 1750, 1761], "test_jax": 355, "test_jax_lax_oper": 355, "dtype_and_x": [355, 356], "available_dtyp": [355, 356], "test_jax_lax_tan": 355, "input_dtyp": [355, 356], "as_variable_flag": [355, 356], "native_array_flag": [355, 356], "test_numpi": 355, "test_mathematical_funct": 355, "test_np_trigonometric_funct": 355, "test_numpy_tan": 355, "handle_where_and_array_bool": 355, "test_tensorflow": 355, "test_math": 355, "test_tensorflow_tan": 355, "test_torch": 355, "test_non_linear_activation_funct": 355, "st": [355, 356], "min_valu": [355, 356], "max_valu": [355, 356], "with_inplac": 355, "test_torch_leaky_relu": 355, "negative_slop": 355, "_fill_valu": 355, "allow_non": [355, 356], "min_num_dim": [355, 356], "max_num_dim": [355, 356], "min_dim_s": [355, 356], "max_dim_s": 355, "test_jax_lax_ful": 355, "test_from_shape_or_valu": 355, "test_numpy_ful": 355, "test_tf_funct": 355, "test_tensorflow_ful": 355, "discrep": 355, "test_creation_op": 355, "_requires_grad": 355, "test_torch_ful": 355, "accommod": 355, "walkthrough": 355, "torch_frontend": 355, "gt": [355, 360], "comparison_op": 355, "promote_types_of_torch_input": 355, "test_comparison_op": 355, "dtype_and_input": 355, "allow_inf": [355, 356], "shared_dtyp": 355, "test_torch_great": 355, "has_alias": 355, "all_alias": 355, "test_frontend_instance_method": 355, "frontend_class": 355, "test_jax_devicearrai": 355, "test_jax_instance_add": 355, "test_frontend_array_instance_method": 355, "test_ndarrai": 355, "test_numpy_ndarray_add": 355, "test_frontend_method": 355, "input_dtypes_init": 355, "as_variable_flags_init": 355, "num_positional_args_init": 355, "native_array_flags_init": 355, "all_as_kwargs_np_init": 355, "input_dtypes_method": 355, "as_variable_flags_method": 355, "num_positional_args_method": 355, "native_array_flags_method": 355, "all_as_kwargs_np_method": 355, "class_nam": 355, "method_nam": 355, "test_tensor": 355, "test_tensorflow_instance_add": 355, "1e04": 355, "1e06": 355, "allow_infin": 355, "test_torch_instance_add": 355, "somewhat": [355, 377, 1760], "value_test": 355, "dtype_x": 355, "test_jax_special_add": 355, "ret_gt": 355, "flatten_and_to_np": 355, "zip": [355, 360], "ret_from_gt": 355, "ground_truth_backend": 355, "_arrays_idx_n_dtyp": 355, "test_manipul": [355, 356], "surprisingli": 355, "cat": [355, 358, 360, 365], "closest_relevant_group": 355, "strive": [355, 356, 358, 377, 1762], "cycl": 356, "exhaust": [356, 1757, 1766], "fixtur": 356, "hit": [356, 360], "eleg": [356, 1760], "intellig": [356, 358, 1762], "unexplor": 356, "repeatedli": 356, "upload": 356, "artifact": 356, "parametr": [356, 1760], "impli": 356, "bespok": 356, "_array_or_typ": 356, "standalon": [356, 1749, 1756, 1761, 1766, 1767], "test_default_int_dtyp": 356, "clariti": [356, 358, 1760], "print_hypothesis_exampl": 356, "searchstrategi": 356, "custom_strategi": 356, "sampled_from": 356, "randomis": 356, "simplist": 356, "intricaci": 356, "one_of": 356, "datum": 356, "pipe": 356, "overload": 356, "shorthand": 356, "flatmap": 356, "suppos": 356, "scaler": 356, "array_or_scal": 356, "len_of_arrai": 356, "interact": [356, 1750, 1759, 1760, 1765], "bodi": 356, "reusabl": [356, 377, 1758, 1760], "snippet": 356, "container_flag": 356, "thankfulli": 356, "advis": 356, "seamlessli": 356, "encount": 356, "criterion": 356, "array_valu": 356, "valid_ax": 356, "craft": 356, "hoc": 356, "intersect": [356, 376], "44758124e": 356, "308": 356, "11228": 356, "456": 356, "268": 356, "wherev": 356, "dtype_values_axi": 356, "9622": 356, "28136": 356, "6375": 356, "12720": 356, "21354": 356, "900e": 356, "00": 356, "955e": 356, "exclude_min": 356, "large_abs_safety_factor": 356, "safety_factor_scal": 356, "57384": 356, "25687": 356, "248": 356, "array_dtyp": 356, "min_siz": 356, "max_siz": 356, "array_bool": 356, "na": 356, "test_devic": 356, "array_shap": 356, "common_shap": 356, "test_lay": 356, "size_bound": 356, "reshape_shap": 356, "stand": 356, "fashion": 356, "some_sequ": 356, "allow_nan": 356, "allow_subnorm": 356, "get_bound": 356, "arrays_valu": 356, "36418": 356, "213": 356, "21716926": 356, "none_or_list_of_float": 356, "get_prob": 356, "get_mean_std": 356, "103515625e": 356, "099609375": 356, "probabilist": 356, "get_axi": 356, "number_positional_argu": 356, "unreproduc": 356, "test_valu": 356, "enough": [356, 362, 363, 364], "report": 356, "valid_float_dtyp": 356, "test_demo": 356, "falsifi": 356, "failing_test": 356, "traceback": 356, "file_nam": [356, 357], "shrink": 356, "prescrib": 356, "closest": [356, 358], "scratch": 356, "databas": 356, "therebi": 356, "test_gelu": 356, "test_fil": 356, "brief": 356, "phase": [356, 377, 1760], "notabl": [356, 1760], "verbos": [356, 360, 1750, 1811], "newer": 356, "max_exampl": 356, "impact": [356, 364, 1762], "deadlin": 356, "weird": 356, "systemat": 356, "safeguard": 356, "inabl": 356, "test_result_typ": 356, "9090909090909091": 356, "linear_algebra": 357, "judgement": 357, "some_namespac": 357, "some_backend": 357, "another_backend": 357, "refactor": 357, "ongo": 357, "cooler": 357, "something_cool": 357, "clean": [357, 358, 360, 361, 363], "_assert_fill_value_and_dtype_are_compat": 357, "_to_devic": 357, "focus": [357, 376, 1758, 1759, 1760, 1766, 1767], "prior": 357, "older": 357, "grow": [357, 1750, 1760], "unbound": 357, "battl": 357, "face": [358, 360, 1760, 1766], "answer": [358, 362, 377], "contradict": 358, "entail": 358, "sacrif": 358, "dimems": 358, "conv": 358, "jacfwd": 358, "jacrev": 358, "banner": 358, "pointwis": 358, "unnecessari": 358, "fuse": 358, "tensorrt": 358, "highli": [358, 1760], "expens": 358, "incredibli": [358, 363, 377, 1763], "six": 358, "__gt__": 358, "price": 358, "pai": 358, "intrus": 358, "x_beta": 358, "equip": 358, "deliber": 358, "priorit": 358, "simplif": 358, "allevi": 358, "ineffici": [358, 377, 1760], "fledg": [360, 361], "syntact": [360, 365], "logspac": 360, "construct": [360, 364, 365, 1758, 1760, 1767], "power_seq": 360, "backend_stack": 360, "cprint": [360, 1810], "_determine_backend_from_arg": 360, "importlib": 360, "import_modul": 360, "_backend_dict": 360, "illustr": [360, 376], "un": 360, "unrol": [360, 363], "lstm": [360, 1760], "cell": 360, "hidden": [360, 364], "recurr": [360, 1760, 1764], "timestep": 360, "x_shape": 360, "input_channel": [360, 364], "x_flat": 360, "wi": 360, "wi_x": 360, "wii_x": 360, "wif_x": 360, "wig_x": 360, "wio_x": 360, "wh": 360, "ht": 360, "ct": 360, "hts_list": 360, "wii_xt": 360, "wif_xt": 360, "wig_xt": 360, "wio_xt": 360, "htm1": 360, "ctm1": 360, "wh_htm1": 360, "whi_htm1": 360, "whf_htm1": 360, "whg_htm1": 360, "who_htm1": 360, "ft": 360, "ot": 360, "reliabl": 360, "sacrific": 360, "hear": 360, "virtu": [360, 1757], "pure_ivi": 360, "compile_graph": [360, 365], "pure_torch": 360, "backbon": [360, 363], "_layer": 360, "random_unifrom": 360, "unclean": 360, "wx": 360, "temp": 360, "ivy_func": 360, "emphas": 360, "torchscript": [360, 1749, 1767], "example_input": 360, "static_argnum": 360, "static_argnam": 360, "jit": [360, 377, 1760], "primit": [361, 377, 1758, 1760], "upcom": 361, "hierarch": [361, 363, 364, 1760], "_init": 362, "_size": 362, "mul": 362, "_devic": 362, "_dev_str": 362, "as_ivy_dev": 362, "_pre_repr": 362, "_post_repr": 362, "framework_str": 362, "noinspect": 362, "pypep8nam": 362, "typeerror": 362, "immut": 362, "claim": 362, "truli": 362, "_native_wrapp": 362, "attributeerror": 362, "genuin": 362, "some_method": 362, "rewritten": 362, "__pow__": 362, "strang": 362, "compartment": 362, "public": [362, 1763], "newshap": 362, "new_shap": 362, "tidi": 362, "shorter": 362, "crystal": 362, "ton": 363, "ado": [363, 364], "soup": 363, "walk": [363, 364], "cnt": 363, "combo": 363, "1000": 363, "3333335": 363, "grad": [363, 364, 365, 1750], "delimit": 363, "autocomplet": 363, "midwai": 363, "agent": 363, "total_spe": 363, "total_height": 363, "total_width": 363, "ag": 363, "tot": 363, "total_": 363, "total_h": 363, "cnt0": 363, "cnt1": 363, "diff_0": 363, "diff_1": 363, "config0": 363, "config1": 363, "decod": 363, "l0": 363, "decoder__l0": 363, "decoder__l1": 363, "encoder__l0": 363, "encoder__l1": 363, "height": 363, "l0__b": 363, "l0__w": 363, "l1__b": 363, "l1__w": 363, "printabl": 363, "obviou": [363, 1760], "foresight": 363, "untidili": 363, "update_ag": 363, "normalize_img": 363, "img": 363, "img_max": 363, "reduce_max": [363, 1750], "img_min": 363, "reduce_min": [363, 1750], "img_rang": 363, "agent_posit": 363, "agent_veloc": 363, "agent_cam_front_rgb": 363, "agent_cam_front_depth": 363, "agent_cam_rear_rgb": 363, "agent_cam_rear_depth": 363, "agent_cam_lidar": 363, "camera": 363, "front_rgb": 363, "front_depth": 363, "rear_rgb": 363, "rear_depth": 363, "lidar": 363, "rgb": 363, "rear": 363, "veloc": 363, "cam": 363, "cam_max": 363, "cam_min": 363, "cam_rang": 363, "Of": [363, 1765, 1766], "perman": 363, "thread": [363, 1760], "pretti": [363, 1766], "dataload": [363, 375, 1750], "_cnt": 363, "img_": 363, "_dataset_s": 363, "_batch_siz": 363, "_count": [363, 364], "__next__": 363, "filenam": 363, "img_fnam": 363, "fname": 363, "loaded_img": 363, "cv2": 363, "imread": 363, "from_numpi": 363, "loader": [363, 377], "batch_slic": 363, "model": [363, 364, 1749, 1750, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1766, 1767], "mymodel": [363, 1750], "linear0": [363, 364, 1750], "linear1": [363, 364, 1750], "x_in": [363, 364, 365, 1750], "loss_fn": [363, 364, 365, 1750], "reduce_mean": [363, 364, 365, 1750], "execute_with_gradi": [363, 364, 365, 377, 1750], "0145": 363, "grad_fn": 363, "addbackward0": 363, "_create_vari": 364, "output_channel": 364, "with_bia": 364, "_input_channel": 364, "_output_channel": 364, "_w_shape": 364, "_b_shape": 364, "_with_bia": 364, "396": 364, "764": 364, "872": 364, "211": 364, "439": 364, "nightmar": 364, "overcom": 364, "fc": 364, "v0": 364, "v1": 364, "key0": 364, "linear3": 364, "v2": 364, "counter": 364, "fed": 364, "weight_initi": 364, "glorotuniform": 364, "bias_initi": 364, "_w_init": 364, "_b_init": 364, "create_vari": 364, "var_shap": 364, "fan_out": 364, "fan_in": 364, "fan_mod": 364, "fan_sum": 364, "misnom": 364, "saw": 364, "vanilla": [364, 1760], "compile_on_next_step": 364, "_beta1": 364, "_beta2": 364, "_epsilon": 364, "_mw": 364, "_vw": 364, "_first_pass": 364, "_should_compil": 364, "_step": 364, "new_v": 364, "_lr": 364, "_inplac": 364, "_stop_gradi": 364, "set_stat": 364, "clamp": 365, "clip_by_valu": 365, "captur": [365, 1761], "sparse_funct": 365, "num_class": 365, "new_axi": 365, "_linear": 365, "jax_graph": 365, "to_backend": 365, "to_ivy_modul": 365, "thinli": 365, "whilst": [365, 1749, 1760], "to_haiku_modul": 365, "hk": 365, "loss_fn_t": 365, "without_apply_rng": 365, "rng": 365, "prngkei": 365, "update_rul": 365, "tree_multimap": 365, "mechan": [375, 377, 1750], "robot": [375, 1750], "perfect": 376, "3d": 376, "differenti": [376, 1760], "orient": 376, "pose": 376, "euler": 376, "quaternion": 376, "ivy_mech": 376, "target_facing_rotation_matrix": 376, "polar_to_cartesian_coord": 376, "ordin": 376, "warp": 376, "optic": 376, "voxel": 376, "ivy_vis": 376, "coords_to_voxel_grid": 376, "render_pixel_coord": 376, "neural": [376, 1750, 1756, 1758, 1759, 1760, 1764, 1766, 1767], "radianc": 376, "nerf": 376, "trajectori": 376, "motion": 376, "plan": [376, 1750], "mobil": [376, 1760], "sample_spline_path": 376, "rigidmobil": 376, "sample_bodi": 376, "drone": 376, "sample_link": 376, "openai": 376, "swimmer": 376, "reward": 376, "supervis": 376, "reinforc": 376, "door": [376, 377], "cartpol": 376, "mountain_car": 376, "pendulum": 376, "reacher": 376, "learnt": 376, "ture": 376, "ntm": 376, "egospher": 376, "spatial": 376, "esm": 376, "ivy_memori": 376, "egocentr": 376, "room": 376, "inspir": 376, "doubt": 377, "grate": 377, "probe": 377, "remark": 377, "surpris": 377, "lock": 377, "gold": 377, "dex": 377, "ye": 377, "scan": 377, "tricki": [377, 1749], "predictor": 377, "tight": 377, "driver": 377, "schedul": [377, 1760, 1767], "Will": 377, "ast": 377, "cond": 377, "jacobian": [377, 1760], "checkpoint": 377, "autodiff": 377, "shine": 377, "merci": 377, "autograd": 377, "cluster": [377, 1760], "compet": [377, 1760], "paradigm": [377, 1760], "parallelis": 377, "spmd": 377, "mixtur": 377, "expert": 377, "sophist": 377, "depart": 377, "routin": [377, 1760], "hundr": 377, "thousand": 377, "deepli": [377, 1760], "broadli": [377, 1766], "supplementari": 377, "fanci": [377, 1760], "fusion": [377, 1764], "lose": 377, "vmap": [377, 1760], "pmap": 377, "overhead": [377, 1763], "eventu": 377, "supplement": 377, "backdoor": 377, "callback": 377, "record": [377, 1761], "metric": 377, "outsourc": 377, "integer_arrays_to_float": 378, "with_supported_device_and_dtyp": 378, "version_dict": 378, "with_supported_devic": 378, "with_unsupported_device_and_dtyp": 378, "with_unsupported_devic": 378, "0800": [393, 394], "3979": [393, 394], "9121": [393, 394], "5400": [393, 394], "han": [393, 395], "taper": [393, 395], "00713103": [393, 396], "99997455": [393, 396], "kaiser_derived_window": [393, 396], "00726415": [393, 396], "9999736": [393, 396], "2773e": [393, 397], "0172e": [393, 397], "9294e": [393, 397], "4149": [393, 397], "9138": [393, 397], "5529": [393, 397], "row": [393, 398], "col": [393, 398], "retain": [393, 398, 1749], "upward": [393, 398], "downward": [393, 398], "2xn": [393, 398], "subarrai": [393, 398], "vorbis_window": 393, "vorbi": [393, 399], "complementari": [393, 399, 1758, 1766], "38268346": [393, 399], "38268352": [393, 399], "14943586": [393, 399], "8563191": [393, 399], "14943568": [393, 399], "position": [402, 404], "inexact": [402, 404], "greatest": [402, 407], "1e10": [402, 408], "00001e10": [402, 408], "999999e": [402, 408], "005": [402, 408], "princip": [402, 415], "217234": [402, 415], "is_ivy_sparse_arrai": 455, "nail": 1749, "funtion": 1749, "asset": 1749, "functiona": 1749, "scientist": 1749, "deploi": [1749, 1758, 1759, 1760, 1762, 1766], "correl": 1749, "analyz": 1749, "ai": [1750, 1758, 1762], "colab": 1750, "sharp": 1750, "favorit": 1750, "jax_concat": 1750, "tf_concat": 1750, "np_concat": 1750, "torch_concat": 1750, "get_devic": 1750, "reduce_prod": 1750, "reduce_sum": 1750, "gradient_imag": 1750, "indices_wher": 1750, "bilinear_resampl": 1750, "stack_imag": 1750, "neural_net": 1750, "floormod": 1750, "articl": 1750, "lenton2021ivi": 1750, "inter": 1750, "lenton": 1750, "daniel": 1750, "pardo": 1750, "fabio": 1750, "falck": 1750, "fabian": 1750, "jame": 1750, "stephen": 1750, "clark": 1750, "ronald": 1750, "journal": 1750, "arxiv": 1750, "preprint": 1750, "2102": 1750, "02886": 1750, "2021": 1750, "conceptu": [1756, 1761], "broken": [1756, 1760], "tracer": 1756, "infrastructur": [1756, 1762, 1763], "vendor": [1756, 1762], "complimentari": [1756, 1766], "acycl": [1756, 1761], "insert_numb": 1757, "insert_t": 1757, "scaffold": [1758, 1766], "heart": 1758, "toolchain": [1758, 1763], "intermedi": [1758, 1759, 1760, 1761, 1766], "ir": [1758, 1761, 1766], "assembli": [1758, 1765, 1766], "idl": 1758, "middl": 1758, "emit": 1758, "gnu": [1758, 1763], "gcc": [1758, 1765], "broader": 1758, "heterogen": 1758, "aid": 1758, "coprocessor": 1758, "programm": [1758, 1765], "gate": 1758, "onednn": 1758, "awai": [1758, 1760], "sit": [1758, 1761, 1766], "tandem": 1758, "possess": 1758, "underneath": 1758, "export": [1759, 1766], "khrono": [1759, 1765], "appl": 1759, "coremltool": 1759, "albeit": 1759, "promin": 1760, "abbrevi": 1760, "laboratori": 1760, "proprietari": [1760, 1764, 1765], "mathwork": 1760, "commerci": 1760, "1984": 1760, "plot": 1760, "toolbox": 1760, "mupad": 1760, "engin": [1760, 1762, 1763], "simulink": 1760, "graphic": [1760, 1764, 1765], "simul": 1760, "embed": 1760, "million": [1760, 1763], "worldwid": 1760, "scienc": [1760, 1762], "econom": 1760, "2001": 1760, "scientif": 1760, "interpol": 1760, "od": 1760, "solver": 1760, "fortran": [1760, 1764], "cython": 1760, "friendli": 1760, "2002": 1760, "lua": 1760, "luajit": 1760, "idiap": 1760, "epfl": 1760, "2005": 1760, "numarrai": 1760, "cpython": 1760, "partli": 1760, "multidimension": 1760, "2007": 1760, "classif": 1760, "regress": [1760, 1767], "forest": 1760, "boost": 1760, "dbscan": 1760, "inbuilt": 1760, "esqu": 1760, "aesara": 1760, "2008": 1760, "datafram": 1760, "critic": [1760, 1766], "2012": 1760, "Its": 1760, "polymorph": 1760, "parallel": [1760, 1764, 1765], "mpi": 1760, "openmp": 1760, "glue": 1760, "jaot": 1760, "nasa": 1760, "cern": 1760, "climat": 1760, "allianc": 1760, "influenti": 1760, "2014": 1760, "analyt": [1760, 1762, 1766], "scala": 1760, "ship": 1760, "forgiv": 1760, "decemb": 1760, "2019": [1760, 1763], "announc": 1760, "transit": 1760, "mainten": 1760, "v7": 1760, "meaning": 1760, "2016": 1760, "imper": 1760, "fast": 1760, "amazon": 1760, "traction": 1760, "cognit": [1760, 1767], "toolkit": [1760, 1761, 1767], "grade": 1760, "realiz": 1760, "feed": [1760, 1761], "dnn": 1760, "cnn": 1760, "rnn": 1760, "stochast": 1760, "sgd": 1760, "backpropag": 1760, "succumb": 1760, "came": 1760, "monitor": 1760, "practition": [1760, 1764, 1765, 1766], "hobbyist": 1760, "tremend": 1760, "ecosystem": 1760, "gear": 1760, "batteri": 1760, "zygot": 1760, "jl": 1760, "workload": 1760, "daggerflux": 1760, "frontier": 1760, "hessian": 1760, "2018": 1760, "lightweight": [1760, 1767], "shortcom": 1760, "eas": 1760, "barrier": 1760, "inexperienc": 1760, "underdevelop": 1760, "fanat": 1760, "ounc": 1760, "infanc": 1760, "emerg": 1760, "nich": 1760, "introduct": 1760, "lite": 1760, "enterpris": 1760, "reinvent": [1760, 1762], "inertia": 1760, "haven": 1760, "creator": [1760, 1762], "paszk": 1760, "hi": 1760, "safeti": 1760, "bulk": 1760, "haskel": 1760, "dataflow": 1761, "distil": 1761, "essenc": [1761, 1766], "enclos": 1761, "scope": [1761, 1765], "trace_modul": 1761, "scriptfunct": 1761, "scriptmodul": 1761, "fake": 1761, "proxi": 1761, "site": 1761, "graphmodul": 1761, "travi": 1762, "oliph": 1762, "leader": 1762, "led": 1762, "cornerston": 1762, "numba": 1762, "numfocu": 1762, "pydata": 1762, "confer": 1762, "consult": 1762, "servic": 1762, "expertis": 1762, "devop": 1762, "mlop": 1762, "dashboard": 1762, "startup": 1762, "mlir": [1762, 1763, 1766], "Their": 1762, "held": 1762, "privileg": 1762, "presum": 1762, "llvm": [1762, 1765], "founder": 1762, "tvm": [1762, 1766], "sustain": 1762, "empow": 1762, "har": 1762, "burden": 1762, "benchmark": 1762, "convention": 1763, "precompil": 1763, "executor": 1763, "exploit": 1763, "julia": [1763, 1766], "fsf": 1763, "gpl": 1763, "biggest": [1763, 1766], "nvidia": [1764, 1765], "conduct": 1764, "throughput": 1764, "autotun": 1764, "consumpt": 1764, "gpgpu": 1764, "talk": 1765, "classic": 1765, "sycl": 1765, "dpc": 1765, "processor": 1765, "x86": 1765, "oneapi": 1765, "ia": 1765, "aka": 1765, "xeon": 1765, "gen9": 1765, "xe": 1765, "card": 1765, "arria": 1765, "gx": 1765, "fpga": 1765, "tune": [1765, 1766], "lofti": 1766, "ambit": 1766, "realm": 1766, "bedrock": 1766, "flux": 1766, "bite": 1766, "chew": 1766, "eagerpi": 1766, "tensorli": 1766, "thinc": 1766, "neuropod": 1766, "exhibit": 1766, "emploi": 1766, "fx": 1766, "retrain": 1766, "wider": 1766, "closer": 1766, "greatli": 1766, "challeng": 1766, "modular": 1766, "anywher": 1766, "switch": 1767, "theano": 1767, "plaidml": 1767, "partial_svd": 1767, "tucker_mode_dot": 1767, "excel": 1767, "subsystem": 1767}, "objects": {"ivy.array": [[45, 0, 0, "-", "activations"], [47, 0, 0, "-", "array"], [49, 0, 0, "-", "conversions"], [54, 0, 0, "-", "creation"], [56, 0, 0, "-", "data_type"], [58, 0, 0, "-", "device"], [60, 0, 0, "-", "elementwise"], [62, 0, 0, "-", "experimental"], [139, 0, 0, "-", "general"], [141, 0, 0, "-", "gradients"], [143, 0, 0, "-", "image"], [145, 0, 0, "-", "layers"], [147, 0, 0, "-", "linalg"], [149, 0, 0, "-", "losses"], [151, 0, 0, "-", "manipulation"], [153, 0, 0, "-", "norms"], [155, 0, 0, "-", "random"], [157, 0, 0, "-", "searching"], [159, 0, 0, "-", "set"], [161, 0, 0, "-", "sorting"], [163, 0, 0, "-", "statistical"], [165, 0, 0, "-", "utility"], [167, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[46, 1, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[46, 2, 1, "", "gelu"], [46, 2, 1, "", "leaky_relu"], [46, 2, 1, "", "log_softmax"], [46, 2, 1, "", "relu"], [46, 2, 1, "", "sigmoid"], [46, 2, 1, "", "softmax"], [46, 2, 1, "", "softplus"]], "ivy.array.array": [[48, 1, 1, "", "Array"]], "ivy.array.array.Array": [[48, 3, 1, "", "T"], [48, 2, 1, "", "__add__"], [48, 2, 1, "", "__init__"], [48, 2, 1, "", "__le__"], [48, 2, 1, "", "__radd__"], [48, 2, 1, "", "__rrshift__"], [48, 2, 1, "", "__rshift__"], [48, 2, 1, "", "__rsub__"], [48, 2, 1, "", "__sub__"], [48, 3, 1, "", "data"], [48, 3, 1, "", "device"], [48, 3, 1, "", "dtype"], [48, 3, 1, "", "mT"], [48, 3, 1, "", "ndim"], [48, 3, 1, "", "shape"], [48, 3, 1, "", "size"]], "ivy.array.conversions": [[50, 4, 1, "", "args_to_ivy"], [51, 4, 1, "", "args_to_native"], [52, 4, 1, "", "to_ivy"], [53, 4, 1, "", "to_native"]], "ivy.array.creation": [[55, 1, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[55, 2, 1, "", "asarray"], [55, 2, 1, "", "copy_array"], [55, 2, 1, "", "empty_like"], [55, 2, 1, "", "from_dlpack"], [55, 2, 1, "", "full_like"], [55, 2, 1, "", "meshgrid"], [55, 2, 1, "", "native_array"], [55, 2, 1, "", "one_hot"], [55, 2, 1, "", "ones_like"], [55, 2, 1, "", "tril"], [55, 2, 1, "", "triu"], [55, 2, 1, "", "zeros_like"]], "ivy.array.data_type": [[57, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[57, 2, 1, "", "astype"], [57, 2, 1, "", "broadcast_arrays"], [57, 2, 1, "", "broadcast_to"], [57, 2, 1, "", "can_cast"], [57, 2, 1, "", "dtype"], [57, 2, 1, "", "finfo"], [57, 2, 1, "", "iinfo"], [57, 2, 1, "", "is_bool_dtype"], [57, 2, 1, "", "is_float_dtype"], [57, 2, 1, "", "is_int_dtype"], [57, 2, 1, "", "is_uint_dtype"], [57, 2, 1, "", "result_type"]], "ivy.array.device": [[59, 1, 1, "", "ArrayWithDevice"]], "ivy.array.device.ArrayWithDevice": [[59, 2, 1, "", "dev"], [59, 2, 1, "", "to_device"]], "ivy.array.elementwise": [[61, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[61, 2, 1, "", "abs"], [61, 2, 1, "", "acos"], [61, 2, 1, "", "acosh"], [61, 2, 1, "", "add"], [61, 2, 1, "", "asin"], [61, 2, 1, "", "asinh"], [61, 2, 1, "", "atan"], [61, 2, 1, "", "atan2"], [61, 2, 1, "", "atanh"], [61, 2, 1, "", "bitwise_and"], [61, 2, 1, "", "bitwise_invert"], [61, 2, 1, "", "bitwise_left_shift"], [61, 2, 1, "", "bitwise_or"], [61, 2, 1, "", "bitwise_right_shift"], [61, 2, 1, "", "bitwise_xor"], [61, 2, 1, "", "ceil"], [61, 2, 1, "", "cos"], [61, 2, 1, "", "cosh"], [61, 2, 1, "", "deg2rad"], [61, 2, 1, "", "divide"], [61, 2, 1, "", "equal"], [61, 2, 1, "", "erf"], [61, 2, 1, "", "exp"], [61, 2, 1, "", "expm1"], [61, 2, 1, "", "floor"], [61, 2, 1, "", "floor_divide"], [61, 2, 1, "", "greater"], [61, 2, 1, "", "greater_equal"], [61, 2, 1, "", "isfinite"], [61, 2, 1, "", "isinf"], [61, 2, 1, "", "isnan"], [61, 2, 1, "", "isreal"], [61, 2, 1, "", "less"], [61, 2, 1, "", "less_equal"], [61, 2, 1, "", "log"], [61, 2, 1, "", "log10"], [61, 2, 1, "", "log1p"], [61, 2, 1, "", "log2"], [61, 2, 1, "", "logaddexp"], [61, 2, 1, "", "logical_and"], [61, 2, 1, "", "logical_not"], [61, 2, 1, "", "logical_or"], [61, 2, 1, "", "logical_xor"], [61, 2, 1, "", "maximum"], [61, 2, 1, "", "minimum"], [61, 2, 1, "", "multiply"], [61, 2, 1, "", "negative"], [61, 2, 1, "", "not_equal"], [61, 2, 1, "", "positive"], [61, 2, 1, "", "pow"], [61, 2, 1, "", "rad2deg"], [61, 2, 1, "", "reciprocal"], [61, 2, 1, "", "remainder"], [61, 2, 1, "", "round"], [61, 2, 1, "", "sign"], [61, 2, 1, "", "sin"], [61, 2, 1, "", "sinh"], [61, 2, 1, "", "sqrt"], [61, 2, 1, "", "square"], [61, 2, 1, "", "subtract"], [61, 2, 1, "", "tan"], [61, 2, 1, "", "tanh"], [61, 2, 1, "", "trunc"], [61, 2, 1, "", "trunc_divide"]], "ivy.array.experimental": [[63, 0, 0, "-", "activations"], [101, 0, 0, "-", "conversions"], [103, 0, 0, "-", "creation"], [105, 0, 0, "-", "data_type"], [107, 0, 0, "-", "device"], [109, 0, 0, "-", "elementwise"], [111, 0, 0, "-", "general"], [113, 0, 0, "-", "gradients"], [115, 0, 0, "-", "image"], [117, 0, 0, "-", "layers"], [119, 0, 0, "-", "linalg"], [121, 0, 0, "-", "losses"], [123, 0, 0, "-", "manipulation"], [125, 0, 0, "-", "norms"], [127, 0, 0, "-", "random"], [129, 0, 0, "-", "searching"], [131, 0, 0, "-", "set"], [133, 0, 0, "-", "sorting"], [135, 0, 0, "-", "statistical"], [137, 0, 0, "-", "utility"]], "ivy.array.experimental.activations": [[64, 1, 1, "", "ArrayWithActivationsExperimental"]], "ivy.array.experimental.conversions": [[102, 1, 1, "", "ArrayWithConversionsExperimental"]], "ivy.array.experimental.creation": [[104, 1, 1, "", "ArrayWithCreationExperimental"]], "ivy.array.experimental.data_type": [[106, 1, 1, "", "ArrayWithData_typeExperimental"]], "ivy.array.experimental.device": [[108, 1, 1, "", "ArrayWithDeviceExperimental"]], "ivy.array.experimental.elementwise": [[110, 1, 1, "", "ArrayWithElementWiseExperimental"]], "ivy.array.experimental.elementwise.ArrayWithElementWiseExperimental": [[110, 2, 1, "", "exp2"], [110, 2, 1, "", "float_power"], [110, 2, 1, "", "fmax"], [110, 2, 1, "", "fmod"], [110, 2, 1, "", "gcd"], [110, 2, 1, "", "isclose"], [110, 2, 1, "", "isneginf"], [110, 2, 1, "", "isposinf"], [110, 2, 1, "", "lcm"], [110, 2, 1, "", "logaddexp2"], [110, 2, 1, "", "nan_to_num"], [110, 2, 1, "", "nansum"], [110, 2, 1, "", "sinc"], [110, 2, 1, "", "trapz"]], "ivy.array.experimental.general": [[112, 1, 1, "", "ArrayWithGeneralExperimental"]], "ivy.array.experimental.gradients": [[114, 1, 1, "", "ArrayWithGradientsExperimental"]], "ivy.array.experimental.image": [[116, 1, 1, "", "ArrayWithImageExperimental"]], "ivy.array.experimental.layers": [[118, 1, 1, "", "ArrayWithLayersExperimental"]], "ivy.array.experimental.layers.ArrayWithLayersExperimental": [[118, 2, 1, "", "avg_pool3d"], [118, 2, 1, "", "dct"], [118, 2, 1, "", "max_pool1d"], [118, 2, 1, "", "max_pool2d"], [118, 2, 1, "", "max_pool3d"]], "ivy.array.experimental.linalg": [[120, 1, 1, "", "ArrayWithLinalgExperimental"]], "ivy.array.experimental.linalg.ArrayWithLinalgExperimental": [[120, 2, 1, "", "diagflat"], [120, 2, 1, "", "kron"]], "ivy.array.experimental.losses": [[122, 1, 1, "", "ArrayWithLossesExperimental"]], "ivy.array.experimental.manipulation": [[124, 1, 1, "", "ArrayWithManipulationExperimental"]], "ivy.array.experimental.manipulation.ArrayWithManipulationExperimental": [[124, 2, 1, "", "flatten"], [124, 2, 1, "", "fliplr"], [124, 2, 1, "", "flipud"], [124, 2, 1, "", "heaviside"], [124, 2, 1, "", "hstack"], [124, 2, 1, "", "i0"], [124, 2, 1, "", "moveaxis"], [124, 2, 1, "", "pad"], [124, 2, 1, "", "rot90"], [124, 2, 1, "", "top_k"], [124, 2, 1, "", "vstack"]], "ivy.array.experimental.norms": [[126, 1, 1, "", "ArrayWithNormsExperimental"]], "ivy.array.experimental.random": [[128, 1, 1, "", "ArrayWithRandomExperimental"]], "ivy.array.experimental.random.ArrayWithRandomExperimental": [[128, 2, 1, "", "dirichlet"]], "ivy.array.experimental.searching": [[130, 1, 1, "", "ArrayWithSearchingExperimental"]], "ivy.array.experimental.set": [[132, 1, 1, "", "ArrayWithSetExperimental"]], "ivy.array.experimental.sorting": [[134, 1, 1, "", "ArrayWithSortingExperimental"]], "ivy.array.experimental.sorting.ArrayWithSortingExperimental": [[134, 2, 1, "", "msort"]], "ivy.array.experimental.statistical": [[136, 1, 1, "", "ArrayWithStatisticalExperimental"]], "ivy.array.experimental.statistical.ArrayWithStatisticalExperimental": [[136, 2, 1, "", "median"]], "ivy.array.experimental.utility": [[138, 1, 1, "", "ArrayWithUtilityExperimental"]], "ivy.array.general": [[140, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[140, 2, 1, "", "all_equal"], [140, 2, 1, "", "array_equal"], [140, 2, 1, "", "assert_supports_inplace"], [140, 2, 1, "", "clip_matrix_norm"], [140, 2, 1, "", "clip_vector_norm"], [140, 2, 1, "", "default"], [140, 2, 1, "", "einops_rearrange"], [140, 2, 1, "", "einops_reduce"], [140, 2, 1, "", "einops_repeat"], [140, 2, 1, "", "exists"], [140, 2, 1, "", "fourier_encode"], [140, 2, 1, "", "gather"], [140, 2, 1, "", "gather_nd"], [140, 2, 1, "", "get_num_dims"], [140, 2, 1, "", "has_nans"], [140, 2, 1, "", "inplace_decrement"], [140, 2, 1, "", "inplace_increment"], [140, 2, 1, "", "inplace_update"], [140, 2, 1, "", "is_array"], [140, 2, 1, "", "is_ivy_array"], [140, 2, 1, "", "is_ivy_container"], [140, 2, 1, "", "is_native_array"], [140, 2, 1, "", "scatter_flat"], [140, 2, 1, "", "scatter_nd"], [140, 2, 1, "", "stable_divide"], [140, 2, 1, "", "stable_pow"], [140, 2, 1, "", "supports_inplace_updates"], [140, 2, 1, "", "to_list"], [140, 2, 1, "", "to_numpy"], [140, 2, 1, "", "to_scalar"], [140, 2, 1, "", "value_is_nan"]], "ivy.array.gradients": [[142, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[142, 2, 1, "", "adam_step"], [142, 2, 1, "", "adam_update"], [142, 2, 1, "", "gradient_descent_update"], [142, 2, 1, "", "is_variable"], [142, 2, 1, "", "lamb_update"], [142, 2, 1, "", "lars_update"], [142, 2, 1, "", "optimizer_update"], [142, 2, 1, "", "stop_gradient"], [142, 2, 1, "", "variable"], [142, 2, 1, "", "variable_data"]], "ivy.array.image": [[144, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[146, 1, 1, "", "ArrayWithLayers"]], "ivy.array.layers.ArrayWithLayers": [[146, 2, 1, "", "conv1d"], [146, 2, 1, "", "conv1d_transpose"], [146, 2, 1, "", "conv2d"], [146, 2, 1, "", "conv3d"], [146, 2, 1, "", "conv3d_transpose"], [146, 2, 1, "", "depthwise_conv2d"], [146, 2, 1, "", "dropout"], [146, 2, 1, "", "linear"], [146, 2, 1, "", "lstm_update"], [146, 2, 1, "", "multi_head_attention"], [146, 2, 1, "", "scaled_dot_product_attention"]], "ivy.array.linalg": [[148, 1, 1, "", "ArrayWithLinalg"]], "ivy.array.linalg.ArrayWithLinalg": [[148, 2, 1, "", "cholesky"], [148, 2, 1, "", "cross"], [148, 2, 1, "", "det"], [148, 2, 1, "", "diag"], [148, 2, 1, "", "diagonal"], [148, 2, 1, "", "eigh"], [148, 2, 1, "", "eigvalsh"], [148, 2, 1, "", "inner"], [148, 2, 1, "", "inv"], [148, 2, 1, "", "matmul"], [148, 2, 1, "", "matrix_norm"], [148, 2, 1, "", "matrix_rank"], [148, 2, 1, "", "matrix_transpose"], [148, 2, 1, "", "outer"], [148, 2, 1, "", "pinv"], [148, 2, 1, "", "qr"], [148, 2, 1, "", "slogdet"], [148, 2, 1, "", "solve"], [148, 2, 1, "", "svd"], [148, 2, 1, "", "svdvals"], [148, 2, 1, "", "tensordot"], [148, 2, 1, "", "trace"], [148, 2, 1, "", "vander"], [148, 2, 1, "", "vecdot"], [148, 2, 1, "", "vector_norm"], [148, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[150, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[150, 2, 1, "", "binary_cross_entropy"], [150, 2, 1, "", "cross_entropy"], [150, 2, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[152, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[152, 2, 1, "", "clip"], [152, 2, 1, "", "concat"], [152, 2, 1, "", "constant_pad"], [152, 2, 1, "", "expand_dims"], [152, 2, 1, "", "flip"], [152, 2, 1, "", "permute_dims"], [152, 2, 1, "", "repeat"], [152, 2, 1, "", "reshape"], [152, 2, 1, "", "roll"], [152, 2, 1, "", "split"], [152, 2, 1, "", "squeeze"], [152, 2, 1, "", "stack"], [152, 2, 1, "", "swapaxes"], [152, 2, 1, "", "tile"], [152, 2, 1, "", "unstack"], [152, 2, 1, "", "zero_pad"]], "ivy.array.norms": [[154, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[154, 2, 1, "", "layer_norm"]], "ivy.array.random": [[156, 1, 1, "", "ArrayWithRandom"]], "ivy.array.random.ArrayWithRandom": [[156, 2, 1, "", "beta"], [156, 2, 1, "", "gamma"], [156, 2, 1, "", "multinomial"], [156, 2, 1, "", "randint"], [156, 2, 1, "", "random_normal"], [156, 2, 1, "", "random_uniform"], [156, 2, 1, "", "shuffle"]], "ivy.array.searching": [[158, 1, 1, "", "ArrayWithSearching"]], "ivy.array.searching.ArrayWithSearching": [[158, 2, 1, "", "argmax"], [158, 2, 1, "", "argmin"], [158, 2, 1, "", "argwhere"], [158, 2, 1, "", "nonzero"], [158, 2, 1, "", "where"]], "ivy.array.set": [[160, 1, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[160, 2, 1, "", "unique_all"], [160, 2, 1, "", "unique_counts"], [160, 2, 1, "", "unique_inverse"], [160, 2, 1, "", "unique_values"]], "ivy.array.sorting": [[162, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[162, 2, 1, "", "argsort"], [162, 2, 1, "", "searchsorted"], [162, 2, 1, "", "sort"]], "ivy.array.statistical": [[164, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[164, 2, 1, "", "cumprod"], [164, 2, 1, "", "cumsum"], [164, 2, 1, "", "einsum"], [164, 2, 1, "", "max"], [164, 2, 1, "", "mean"], [164, 2, 1, "", "min"], [164, 2, 1, "", "prod"], [164, 2, 1, "", "std"], [164, 2, 1, "", "sum"], [164, 2, 1, "", "var"]], "ivy.array.utility": [[166, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[166, 2, 1, "", "all"], [166, 2, 1, "", "any"]], "ivy.array.wrapping": [[168, 4, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[1, 0, 0, "-", "assertions"], [19, 0, 0, "-", "backend_handler"], [378, 0, 0, "-", "func_wrapper"], [1810, 0, 0, "-", "verbosity"]], "ivy.assertions": [[2, 4, 1, "", "check_all"], [3, 4, 1, "", "check_all_or_any_fn"], [4, 4, 1, "", "check_any"], [5, 4, 1, "", "check_elem_in_list"], [6, 4, 1, "", "check_equal"], [7, 4, 1, "", "check_exists"], [8, 4, 1, "", "check_false"], [9, 4, 1, "", "check_fill_value_and_dtype_are_compatible"], [10, 4, 1, "", "check_gather_input_valid"], [11, 4, 1, "", "check_gather_nd_input_valid"], [12, 4, 1, "", "check_greater"], [13, 4, 1, "", "check_inplace_sizes_valid"], [14, 4, 1, "", "check_isinstance"], [15, 4, 1, "", "check_less"], [16, 4, 1, "", "check_one_way_broadcastable"], [17, 4, 1, "", "check_shape"], [18, 4, 1, "", "check_true"]], "ivy.backend_handler": [[19, 1, 1, "", "ContextManager"], [20, 4, 1, "", "choose_random_backend"], [21, 4, 1, "", "clear_backend_stack"], [22, 4, 1, "", "current_backend"], [23, 4, 1, "", "fn_name_from_version_specific_fn_name"], [24, 4, 1, "", "get_backend"], [25, 4, 1, "", "set_backend"], [26, 4, 1, "", "set_backend_to_specific_version"], [27, 4, 1, "", "set_jax_backend"], [28, 4, 1, "", "set_numpy_backend"], [29, 4, 1, "", "set_tensorflow_backend"], [30, 4, 1, "", "set_torch_backend"], [31, 4, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[19, 2, 1, "", "__init__"]], "ivy.container": [[170, 0, 0, "-", "activations"], [172, 0, 0, "-", "base"], [174, 0, 0, "-", "container"], [176, 0, 0, "-", "conversions"], [178, 0, 0, "-", "creation"], [180, 0, 0, "-", "data_type"], [182, 0, 0, "-", "device"], [184, 0, 0, "-", "elementwise"], [186, 0, 0, "-", "experimental"], [308, 0, 0, "-", "general"], [310, 0, 0, "-", "gradients"], [312, 0, 0, "-", "image"], [314, 0, 0, "-", "layers"], [316, 0, 0, "-", "linalg"], [318, 0, 0, "-", "losses"], [320, 0, 0, "-", "manipulation"], [322, 0, 0, "-", "norms"], [324, 0, 0, "-", "random"], [326, 0, 0, "-", "searching"], [328, 0, 0, "-", "set"], [330, 0, 0, "-", "sorting"], [332, 0, 0, "-", "statistical"], [334, 0, 0, "-", "utility"], [336, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[171, 1, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[171, 2, 1, "", "gelu"], [171, 2, 1, "", "leaky_relu"], [171, 2, 1, "", "log_softmax"], [171, 2, 1, "", "relu"], [171, 2, 1, "", "sigmoid"], [171, 2, 1, "", "softmax"], [171, 2, 1, "", "softplus"], [171, 2, 1, "", "static_gelu"], [171, 2, 1, "", "static_leaky_relu"], [171, 2, 1, "", "static_log_softmax"], [171, 2, 1, "", "static_relu"], [171, 2, 1, "", "static_sigmoid"], [171, 2, 1, "", "static_softmax"], [171, 2, 1, "", "static_softplus"]], "ivy.container.base": [[173, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[173, 2, 1, "", "__getitem__"], [173, 2, 1, "", "__init__"], [173, 2, 1, "", "__setitem__"], [173, 2, 1, "", "all_false"], [173, 2, 1, "", "all_key_chains"], [173, 2, 1, "", "all_true"], [173, 2, 1, "", "as_bools"], [173, 2, 1, "", "assert_contains_sub_container"], [173, 2, 1, "", "assert_contains_sub_structure"], [173, 2, 1, "", "assert_identical"], [173, 2, 1, "", "assert_identical_structure"], [173, 2, 1, "", "at_key_chain"], [173, 2, 1, "", "at_key_chains"], [173, 2, 1, "", "at_keys"], [173, 2, 1, "", "combine"], [173, 2, 1, "", "common_key_chains"], [173, 3, 1, "", "config"], [173, 2, 1, "", "cont_inplace_update"], [173, 2, 1, "", "contains_sub_container"], [173, 2, 1, "", "contains_sub_structure"], [173, 2, 1, "", "copy"], [173, 2, 1, "", "create_if_absent"], [173, 2, 1, "", "cutoff_at_depth"], [173, 2, 1, "", "cutoff_at_height"], [173, 2, 1, "", "deep_copy"], [173, 3, 1, "", "dev"], [173, 3, 1, "", "dev_str"], [173, 2, 1, "", "diff"], [173, 2, 1, "", "duplicate_array_keychains"], [173, 2, 1, "", "find_sub_container"], [173, 2, 1, "", "find_sub_structure"], [173, 2, 1, "", "flatten_key_chain"], [173, 2, 1, "", "flatten_key_chains"], [173, 2, 1, "", "format_key_chains"], [173, 2, 1, "", "from_disk_as_hdf5"], [173, 2, 1, "", "from_disk_as_json"], [173, 2, 1, "", "from_disk_as_pickled"], [173, 2, 1, "", "from_flat_list"], [173, 2, 1, "", "h5_file_size"], [173, 2, 1, "", "handle_inplace"], [173, 2, 1, "", "has_key"], [173, 2, 1, "", "has_key_chain"], [173, 2, 1, "", "identical"], [173, 2, 1, "", "identical_array_shapes"], [173, 2, 1, "", "identical_configs"], [173, 2, 1, "", "identical_structure"], [173, 2, 1, "", "if_exists"], [173, 3, 1, "", "ivy"], [173, 2, 1, "", "key_chains_containing"], [173, 2, 1, "", "list_join"], [173, 2, 1, "", "list_stack"], [173, 2, 1, "", "map"], [173, 2, 1, "", "map_conts"], [173, 3, 1, "", "max_depth"], [173, 2, 1, "", "multi_map"], [173, 2, 1, "", "multi_map_in_static_method"], [173, 2, 1, "", "num_arrays"], [173, 2, 1, "", "overwrite_at_key_chain"], [173, 2, 1, "", "overwrite_at_key_chains"], [173, 2, 1, "", "prune_empty"], [173, 2, 1, "", "prune_key_chain"], [173, 2, 1, "", "prune_key_chains"], [173, 2, 1, "", "prune_key_from_key_chains"], [173, 2, 1, "", "prune_keys"], [173, 2, 1, "", "prune_keys_from_key_chains"], [173, 2, 1, "", "reduce"], [173, 2, 1, "", "remove_key_length_limit"], [173, 2, 1, "", "remove_print_limit"], [173, 2, 1, "", "reshape_like"], [173, 2, 1, "", "restructure"], [173, 2, 1, "", "restructure_key_chains"], [173, 2, 1, "", "set_at_key_chain"], [173, 2, 1, "", "set_at_key_chains"], [173, 2, 1, "", "set_at_keys"], [173, 3, 1, "", "shapes"], [173, 3, 1, "", "shared_shape"], [173, 2, 1, "", "show"], [173, 2, 1, "", "show_sub_container"], [173, 2, 1, "", "shuffle_h5_file"], [173, 2, 1, "", "size_ordered_arrays"], [173, 2, 1, "", "slice_keys"], [173, 2, 1, "", "slice_via_key"], [173, 2, 1, "", "sort_by_key"], [173, 2, 1, "", "split_conts"], [173, 2, 1, "", "structural_diff"], [173, 2, 1, "", "to_dict"], [173, 2, 1, "", "to_disk_as_hdf5"], [173, 2, 1, "", "to_disk_as_json"], [173, 2, 1, "", "to_disk_as_pickled"], [173, 2, 1, "", "to_flat_list"], [173, 2, 1, "", "to_iterator"], [173, 2, 1, "", "to_iterator_keys"], [173, 2, 1, "", "to_iterator_values"], [173, 2, 1, "", "to_jsonable"], [173, 2, 1, "", "to_nested_list"], [173, 2, 1, "", "to_raw"], [173, 2, 1, "", "trim_key"], [173, 2, 1, "", "try_kc"], [173, 2, 1, "", "unify"], [173, 2, 1, "", "unstack_conts"], [173, 2, 1, "", "update_config"], [173, 2, 1, "", "with_default_key_color"], [173, 2, 1, "", "with_entries_as_lists"], [173, 2, 1, "", "with_ivy_backend"], [173, 2, 1, "", "with_key_length_limit"], [173, 2, 1, "", "with_print_indent"], [173, 2, 1, "", "with_print_limit"], [173, 2, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[175, 1, 1, "", "Container"]], "ivy.container.container.Container": [[175, 2, 1, "", "__add__"], [175, 2, 1, "", "__init__"], [175, 2, 1, "", "__radd__"], [175, 2, 1, "", "__rrshift__"], [175, 2, 1, "", "__rshift__"], [175, 2, 1, "", "__rsub__"], [175, 2, 1, "", "__sub__"]], "ivy.container.conversions": [[177, 1, 1, "", "ContainerWithConversions"]], "ivy.container.conversions.ContainerWithConversions": [[177, 2, 1, "", "static_to_ivy"], [177, 2, 1, "", "static_to_native"], [177, 2, 1, "", "to_ivy"], [177, 2, 1, "", "to_native"]], "ivy.container.creation": [[179, 1, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[179, 2, 1, "", "empty_like"], [179, 2, 1, "", "from_dlpack"], [179, 2, 1, "", "full_like"], [179, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [179, 2, 1, "", "one_hot"], [179, 2, 1, "", "ones_like"], [179, 2, 1, "", "static_arange"], [179, 2, 1, "", "static_asarray"], [179, 2, 1, "", "static_empty_like"], [179, 2, 1, "", "static_eye"], [179, 2, 1, "", "static_from_dlpack"], [179, 2, 1, "", "static_full_like"], [179, 2, 1, "", "static_linspace"], [179, 2, 1, "", "static_logspace"], [179, 2, 1, "", "static_meshgrid"], [179, 2, 1, "", "static_native_array"], [179, 2, 1, "", "static_one_hot"], [179, 2, 1, "", "static_ones"], [179, 2, 1, "", "static_ones_like"], [179, 2, 1, "", "static_tril"], [179, 2, 1, "", "static_triu"], [179, 2, 1, "", "static_zeros"], [179, 2, 1, "", "static_zeros_like"], [179, 2, 1, "", "tril"], [179, 2, 1, "", "triu"], [179, 2, 1, "", "zeros_like"]], "ivy.container.data_type": [[181, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[181, 2, 1, "", "astype"], [181, 2, 1, "", "broadcast_arrays"], [181, 2, 1, "", "broadcast_to"], [181, 2, 1, "", "can_cast"], [181, 2, 1, "", "dtype"], [181, 2, 1, "", "finfo"], [181, 2, 1, "", "iinfo"], [181, 2, 1, "", "is_bool_dtype"], [181, 2, 1, "", "is_float_dtype"], [181, 2, 1, "", "is_int_dtype"], [181, 2, 1, "", "is_uint_dtype"], [181, 2, 1, "", "result_type"], [181, 2, 1, "", "static_astype"], [181, 2, 1, "", "static_broadcast_arrays"], [181, 2, 1, "", "static_broadcast_to"], [181, 2, 1, "", "static_can_cast"], [181, 2, 1, "", "static_default_float_dtype"], [181, 2, 1, "", "static_dtype"], [181, 2, 1, "", "static_finfo"], [181, 2, 1, "", "static_function_supported_dtypes"], [181, 2, 1, "", "static_function_unsupported_dtypes"], [181, 2, 1, "", "static_iinfo"], [181, 2, 1, "", "static_is_bool_dtype"], [181, 2, 1, "", "static_is_float_dtype"], [181, 2, 1, "", "static_is_int_dtype"], [181, 2, 1, "", "static_is_uint_dtype"], [181, 2, 1, "", "static_result_type"]], "ivy.container.device": [[183, 1, 1, "", "ContainerWithDevice"]], "ivy.container.device.ContainerWithDevice": [[183, 2, 1, "", "dev"], [183, 2, 1, "", "static_dev"], [183, 2, 1, "", "static_to_device"], [183, 2, 1, "", "to_device"]], "ivy.container.elementwise": [[185, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[185, 2, 1, "", "abs"], [185, 2, 1, "", "acos"], [185, 2, 1, "", "acosh"], [185, 2, 1, "", "add"], [185, 2, 1, "", "asin"], [185, 2, 1, "", "asinh"], [185, 2, 1, "", "atan"], [185, 2, 1, "", "atan2"], [185, 2, 1, "", "atanh"], [185, 2, 1, "", "bitwise_and"], [185, 2, 1, "", "bitwise_invert"], [185, 2, 1, "", "bitwise_left_shift"], [185, 2, 1, "", "bitwise_or"], [185, 2, 1, "", "bitwise_right_shift"], [185, 2, 1, "", "bitwise_xor"], [185, 2, 1, "", "ceil"], [185, 2, 1, "", "cos"], [185, 2, 1, "", "cosh"], [185, 2, 1, "", "deg2rad"], [185, 2, 1, "", "divide"], [185, 2, 1, "", "equal"], [185, 2, 1, "", "erf"], [185, 2, 1, "", "exp"], [185, 2, 1, "", "expm1"], [185, 2, 1, "", "floor"], [185, 2, 1, "", "floor_divide"], [185, 2, 1, "", "greater"], [185, 2, 1, "", "greater_equal"], [185, 2, 1, "", "isfinite"], [185, 2, 1, "", "isinf"], [185, 2, 1, "", "isnan"], [185, 2, 1, "", "isreal"], [185, 2, 1, "", "less"], [185, 2, 1, "", "less_equal"], [185, 2, 1, "", "log"], [185, 2, 1, "", "log10"], [185, 2, 1, "", "log1p"], [185, 2, 1, "", "log2"], [185, 2, 1, "", "logaddexp"], [185, 2, 1, "", "logical_and"], [185, 2, 1, "", "logical_not"], [185, 2, 1, "", "logical_or"], [185, 2, 1, "", "logical_xor"], [185, 2, 1, "", "maximum"], [185, 2, 1, "", "minimum"], [185, 2, 1, "", "multiply"], [185, 2, 1, "", "negative"], [185, 2, 1, "", "not_equal"], [185, 2, 1, "", "positive"], [185, 2, 1, "", "pow"], [185, 2, 1, "", "rad2deg"], [185, 2, 1, "", "reciprocal"], [185, 2, 1, "", "remainder"], [185, 2, 1, "", "round"], [185, 2, 1, "", "sign"], [185, 2, 1, "", "sin"], [185, 2, 1, "", "sinh"], [185, 2, 1, "", "sqrt"], [185, 2, 1, "", "square"], [185, 2, 1, "", "static_abs"], [185, 2, 1, "", "static_acos"], [185, 2, 1, "", "static_acosh"], [185, 2, 1, "", "static_add"], [185, 2, 1, "", "static_asin"], [185, 2, 1, "", "static_asinh"], [185, 2, 1, "", "static_atan"], [185, 2, 1, "", "static_atan2"], [185, 2, 1, "", "static_atanh"], [185, 2, 1, "", "static_bitwise_and"], [185, 2, 1, "", "static_bitwise_invert"], [185, 2, 1, "", "static_bitwise_left_shift"], [185, 2, 1, "", "static_bitwise_or"], [185, 2, 1, "", "static_bitwise_right_shift"], [185, 2, 1, "", "static_bitwise_xor"], [185, 2, 1, "", "static_ceil"], [185, 2, 1, "", "static_cos"], [185, 2, 1, "", "static_cosh"], [185, 2, 1, "", "static_deg2rad"], [185, 2, 1, "", "static_divide"], [185, 2, 1, "", "static_equal"], [185, 2, 1, "", "static_erf"], [185, 2, 1, "", "static_exp"], [185, 2, 1, "", "static_expm1"], [185, 2, 1, "", "static_floor"], [185, 2, 1, "", "static_floor_divide"], [185, 2, 1, "", "static_greater"], [185, 2, 1, "", "static_greater_equal"], [185, 2, 1, "", "static_isfinite"], [185, 2, 1, "", "static_isinf"], [185, 2, 1, "", "static_isnan"], [185, 2, 1, "", "static_isreal"], [185, 2, 1, "", "static_less"], [185, 2, 1, "", "static_less_equal"], [185, 2, 1, "", "static_log"], [185, 2, 1, "", "static_log10"], [185, 2, 1, "", "static_log1p"], [185, 2, 1, "", "static_log2"], [185, 2, 1, "", "static_logaddexp"], [185, 2, 1, "", "static_logical_and"], [185, 2, 1, "", "static_logical_not"], [185, 2, 1, "", "static_logical_or"], [185, 2, 1, "", "static_logical_xor"], [185, 2, 1, "", "static_maximum"], [185, 2, 1, "", "static_minimum"], [185, 2, 1, "", "static_multiply"], [185, 2, 1, "", "static_negative"], [185, 2, 1, "", "static_not_equal"], [185, 2, 1, "", "static_positive"], [185, 2, 1, "", "static_pow"], [185, 2, 1, "", "static_rad2deg"], [185, 2, 1, "", "static_reciprocal"], [185, 2, 1, "", "static_remainder"], [185, 2, 1, "", "static_round"], [185, 2, 1, "", "static_sign"], [185, 2, 1, "", "static_sin"], [185, 2, 1, "", "static_sinh"], [185, 2, 1, "", "static_sqrt"], [185, 2, 1, "", "static_square"], [185, 2, 1, "", "static_subtract"], [185, 2, 1, "", "static_tan"], [185, 2, 1, "", "static_tanh"], [185, 2, 1, "", "static_trapz"], [185, 2, 1, "", "static_trunc"], [185, 2, 1, "", "static_trunc_divide"], [185, 2, 1, "", "subtract"], [185, 2, 1, "", "tan"], [185, 2, 1, "", "tanh"], [185, 2, 1, "", "trapz"], [185, 2, 1, "", "trunc"], [185, 2, 1, "", "trunc_divide"]], "ivy.container.experimental": [[187, 0, 0, "-", "activations"], [270, 0, 0, "-", "conversions"], [272, 0, 0, "-", "creation"], [274, 0, 0, "-", "data_type"], [276, 0, 0, "-", "device"], [278, 0, 0, "-", "elementwise"], [280, 0, 0, "-", "general"], [282, 0, 0, "-", "gradients"], [284, 0, 0, "-", "image"], [286, 0, 0, "-", "layers"], [288, 0, 0, "-", "linalg"], [290, 0, 0, "-", "losses"], [292, 0, 0, "-", "manipulation"], [294, 0, 0, "-", "norms"], [296, 0, 0, "-", "random"], [298, 0, 0, "-", "searching"], [300, 0, 0, "-", "set"], [302, 0, 0, "-", "sorting"], [304, 0, 0, "-", "statistical"], [306, 0, 0, "-", "utility"]], "ivy.container.experimental.activations": [[188, 1, 1, "", "ContainerWithActivationExperimental"]], "ivy.container.experimental.conversions": [[271, 1, 1, "", "ContainerWithConversionExperimental"]], "ivy.container.experimental.creation": [[273, 1, 1, "", "ContainerWithCreationExperimental"]], "ivy.container.experimental.creation.ContainerWithCreationExperimental": [[273, 2, 1, "", "hamming_window"], [273, 2, 1, "", "hann_window"], [273, 2, 1, "", "kaiser_bessel_derived_window"], [273, 2, 1, "", "kaiser_window"], [273, 2, 1, "", "static_hamming_window"], [273, 2, 1, "", "static_hann_window"], [273, 2, 1, "", "static_kaiser_bessel_derived_window"], [273, 2, 1, "", "static_kaiser_window"], [273, 2, 1, "", "static_triu_indices"], [273, 2, 1, "", "triu_indices"]], "ivy.container.experimental.data_type": [[275, 1, 1, "", "ContainerWithData_typeExperimental"]], "ivy.container.experimental.device": [[277, 1, 1, "", "ContainerWithDeviceExperimental"]], "ivy.container.experimental.elementwise": [[279, 1, 1, "", "ContainerWithElementWiseExperimental"]], "ivy.container.experimental.elementwise.ContainerWithElementWiseExperimental": [[279, 2, 1, "", "exp2"], [279, 2, 1, "", "float_power"], [279, 2, 1, "", "fmax"], [279, 2, 1, "", "fmod"], [279, 2, 1, "", "gcd"], [279, 2, 1, "", "isclose"], [279, 2, 1, "", "isneginf"], [279, 2, 1, "", "isposinf"], [279, 2, 1, "", "lcm"], [279, 2, 1, "", "logaddexp2"], [279, 2, 1, "", "nan_to_num"], [279, 2, 1, "", "nansum"], [279, 2, 1, "", "sinc"], [279, 2, 1, "", "static_exp2"], [279, 2, 1, "", "static_float_power"], [279, 2, 1, "", "static_fmax"], [279, 2, 1, "", "static_fmod"], [279, 2, 1, "", "static_gcd"], [279, 2, 1, "", "static_isclose"], [279, 2, 1, "", "static_isneginf"], [279, 2, 1, "", "static_isposinf"], [279, 2, 1, "", "static_lcm"], [279, 2, 1, "", "static_logaddexp2"], [279, 2, 1, "", "static_nan_to_num"], [279, 2, 1, "", "static_nansum"], [279, 2, 1, "", "static_sinc"]], "ivy.container.experimental.general": [[281, 1, 1, "", "ContainerWithGeneralExperimental"]], "ivy.container.experimental.gradients": [[283, 1, 1, "", "ContainerWithGradientsExperimental"]], "ivy.container.experimental.image": [[285, 1, 1, "", "ContainerWithImageExperimental"]], "ivy.container.experimental.layers": [[287, 1, 1, "", "ContainerWithLayersExperimental"]], "ivy.container.experimental.layers.ContainerWithLayersExperimental": [[287, 2, 1, "", "avg_pool2d"], [287, 2, 1, "", "avg_pool3d"], [287, 2, 1, "", "dct"], [287, 2, 1, "", "max_pool1d"], [287, 2, 1, "", "max_pool2d"], [287, 2, 1, "", "max_pool3d"], [287, 2, 1, "", "static_avg_pool2d"], [287, 2, 1, "", "static_avg_pool3d"], [287, 2, 1, "", "static_dct"], [287, 2, 1, "", "static_max_pool1d"], [287, 2, 1, "", "static_max_pool2d"], [287, 2, 1, "", "static_max_pool3d"]], "ivy.container.experimental.linalg": [[289, 1, 1, "", "ContainerWithLinalgExperimental"]], "ivy.container.experimental.linalg.ContainerWithLinalgExperimental": [[289, 2, 1, "", "diagflat"], [289, 2, 1, "", "kron"], [289, 2, 1, "", "static_diagflat"], [289, 2, 1, "", "static_kron"]], "ivy.container.experimental.losses": [[291, 1, 1, "", "ContainerWithLossesExperimental"]], "ivy.container.experimental.manipulation": [[293, 1, 1, "", "ContainerWithManipulationExperimental"]], "ivy.container.experimental.manipulation.ContainerWithManipulationExperimental": [[293, 2, 1, "", "flatten"], [293, 2, 1, "", "fliplr"], [293, 2, 1, "", "flipud"], [293, 2, 1, "", "heaviside"], [293, 2, 1, "", "hstack"], [293, 2, 1, "", "i0"], [293, 2, 1, "", "moveaxis"], [293, 2, 1, "", "pad"], [293, 2, 1, "", "rot90"], [293, 2, 1, "", "static_flatten"], [293, 2, 1, "", "static_fliplr"], [293, 2, 1, "", "static_flipud"], [293, 2, 1, "", "static_heaviside"], [293, 2, 1, "", "static_hstack"], [293, 2, 1, "", "static_i0"], [293, 2, 1, "", "static_moveaxis"], [293, 2, 1, "", "static_pad"], [293, 2, 1, "", "static_rot90"], [293, 2, 1, "", "static_top_k"], [293, 2, 1, "", "static_vstack"], [293, 2, 1, "", "top_k"], [293, 2, 1, "", "vstack"]], "ivy.container.experimental.norms": [[295, 1, 1, "", "ContainerWithNormsExperimental"]], "ivy.container.experimental.random": [[297, 1, 1, "", "ContainerWithRandomExperimental"]], "ivy.container.experimental.random.ContainerWithRandomExperimental": [[297, 2, 1, "", "dirichlet"], [297, 2, 1, "", "static_dirichlet"]], "ivy.container.experimental.searching": [[299, 1, 1, "", "ContainerWithSearchingExperimental"]], "ivy.container.experimental.set": [[301, 1, 1, "", "ContainerWithSetExperimental"]], "ivy.container.experimental.sorting": [[303, 1, 1, "", "ContainerWithSortingExperimental"]], "ivy.container.experimental.sorting.ContainerWithSortingExperimental": [[303, 2, 1, "", "msort"], [303, 2, 1, "", "static_msort"]], "ivy.container.experimental.statistical": [[305, 1, 1, "", "ContainerWithStatisticalExperimental"]], "ivy.container.experimental.statistical.ContainerWithStatisticalExperimental": [[305, 2, 1, "", "median"], [305, 2, 1, "", "static_median"]], "ivy.container.experimental.utility": [[307, 1, 1, "", "ContainerWithUtilityExperimental"]], "ivy.container.general": [[309, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[309, 2, 1, "", "all_equal"], [309, 2, 1, "", "assert_supports_inplace"], [309, 2, 1, "", "clip_matrix_norm"], [309, 2, 1, "", "clip_vector_norm"], [309, 2, 1, "", "einops_rearrange"], [309, 2, 1, "", "einops_reduce"], [309, 2, 1, "", "einops_repeat"], [309, 2, 1, "", "fourier_encode"], [309, 2, 1, "", "gather"], [309, 2, 1, "", "gather_nd"], [309, 2, 1, "", "get_num_dims"], [309, 2, 1, "", "has_nans"], [309, 2, 1, "", "inplace_decrement"], [309, 2, 1, "", "inplace_increment"], [309, 2, 1, "", "inplace_update"], [309, 2, 1, "", "is_array"], [309, 2, 1, "", "is_ivy_array"], [309, 2, 1, "", "is_ivy_container"], [309, 2, 1, "", "is_native_array"], [309, 2, 1, "", "scatter_flat"], [309, 2, 1, "", "scatter_nd"], [309, 2, 1, "", "stable_divide"], [309, 2, 1, "", "stable_pow"], [309, 2, 1, "", "static_all_equal"], [309, 2, 1, "", "static_assert_supports_inplace"], [309, 2, 1, "", "static_clip_matrix_norm"], [309, 2, 1, "", "static_clip_vector_norm"], [309, 2, 1, "", "static_einops_rearrange"], [309, 2, 1, "", "static_einops_reduce"], [309, 2, 1, "", "static_einops_repeat"], [309, 2, 1, "", "static_fourier_encode"], [309, 2, 1, "", "static_gather"], [309, 2, 1, "", "static_gather_nd"], [309, 2, 1, "", "static_get_num_dims"], [309, 2, 1, "", "static_has_nans"], [309, 2, 1, "", "static_inplace_decrement"], [309, 2, 1, "", "static_inplace_increment"], [309, 2, 1, "", "static_inplace_update"], [309, 2, 1, "", "static_is_array"], [309, 2, 1, "", "static_is_ivy_array"], [309, 2, 1, "", "static_is_ivy_container"], [309, 2, 1, "", "static_is_native_array"], [309, 2, 1, "", "static_scatter_flat"], [309, 2, 1, "", "static_scatter_nd"], [309, 2, 1, "", "static_stable_divide"], [309, 2, 1, "", "static_stable_pow"], [309, 2, 1, "", "static_supports_inplace_updates"], [309, 2, 1, "", "static_to_list"], [309, 2, 1, "", "static_to_numpy"], [309, 2, 1, "", "static_to_scalar"], [309, 2, 1, "", "static_value_is_nan"], [309, 2, 1, "", "supports_inplace_updates"], [309, 2, 1, "", "to_list"], [309, 2, 1, "", "to_numpy"], [309, 2, 1, "", "to_scalar"], [309, 2, 1, "", "value_is_nan"]], "ivy.container.gradients": [[311, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[311, 2, 1, "", "adam_step"], [311, 2, 1, "", "adam_update"], [311, 2, 1, "", "gradient_descent_update"], [311, 2, 1, "", "is_variable"], [311, 2, 1, "", "lamb_update"], [311, 2, 1, "", "lars_update"], [311, 2, 1, "", "optimizer_update"], [311, 2, 1, "", "static_is_variable"], [311, 2, 1, "", "static_stop_gradient"], [311, 2, 1, "", "static_variable"], [311, 2, 1, "", "static_variable_data"], [311, 2, 1, "", "stop_gradient"], [311, 2, 1, "", "variable"], [311, 2, 1, "", "variable_data"]], "ivy.container.image": [[313, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[315, 1, 1, "", "ContainerWithLayers"]], "ivy.container.layers.ContainerWithLayers": [[315, 2, 1, "", "conv1d"], [315, 2, 1, "", "conv1d_transpose"], [315, 2, 1, "", "conv2d"], [315, 2, 1, "", "conv2d_transpose"], [315, 2, 1, "", "conv3d"], [315, 2, 1, "", "conv3d_transpose"], [315, 2, 1, "", "depthwise_conv2d"], [315, 2, 1, "", "dropout"], [315, 2, 1, "", "linear"], [315, 2, 1, "", "lstm_update"], [315, 2, 1, "", "multi_head_attention"], [315, 2, 1, "", "scaled_dot_product_attention"], [315, 2, 1, "", "static_conv1d"], [315, 2, 1, "", "static_conv1d_transpose"], [315, 2, 1, "", "static_conv2d"], [315, 2, 1, "", "static_conv2d_transpose"], [315, 2, 1, "", "static_conv3d"], [315, 2, 1, "", "static_conv3d_transpose"], [315, 2, 1, "", "static_depthwise_conv2d"], [315, 2, 1, "", "static_dropout"], [315, 2, 1, "", "static_linear"], [315, 2, 1, "", "static_lstm_update"], [315, 2, 1, "", "static_multi_head_attention"], [315, 2, 1, "", "static_scaled_dot_product_attention"]], "ivy.container.linalg": [[317, 1, 1, "", "ContainerWithLinalg"]], "ivy.container.linalg.ContainerWithLinalg": [[317, 2, 1, "", "cholesky"], [317, 2, 1, "", "cross"], [317, 2, 1, "", "det"], [317, 2, 1, "", "diag"], [317, 2, 1, "", "diagonal"], [317, 2, 1, "", "eigh"], [317, 2, 1, "", "inner"], [317, 2, 1, "", "inv"], [317, 2, 1, "", "matmul"], [317, 2, 1, "", "matrix_norm"], [317, 2, 1, "", "matrix_power"], [317, 2, 1, "", "matrix_rank"], [317, 2, 1, "", "matrix_transpose"], [317, 2, 1, "", "outer"], [317, 2, 1, "", "pinv"], [317, 2, 1, "", "qr"], [317, 2, 1, "", "slogdet"], [317, 2, 1, "", "solve"], [317, 2, 1, "", "static_cholesky"], [317, 2, 1, "", "static_cross"], [317, 2, 1, "", "static_det"], [317, 2, 1, "", "static_diag"], [317, 2, 1, "", "static_diagonal"], [317, 2, 1, "", "static_inner"], [317, 2, 1, "", "static_inv"], [317, 2, 1, "", "static_matmul"], [317, 2, 1, "", "static_matrix_norm"], [317, 2, 1, "", "static_matrix_power"], [317, 2, 1, "", "static_matrix_rank"], [317, 2, 1, "", "static_matrix_transpose"], [317, 2, 1, "", "static_outer"], [317, 2, 1, "", "static_pinv"], [317, 2, 1, "", "static_qr"], [317, 2, 1, "", "static_slogdet"], [317, 2, 1, "", "static_solve"], [317, 2, 1, "", "static_svd"], [317, 2, 1, "", "static_svdvals"], [317, 2, 1, "", "static_tensordot"], [317, 2, 1, "", "static_trace"], [317, 2, 1, "", "static_vander"], [317, 2, 1, "", "static_vecdot"], [317, 2, 1, "", "static_vector_norm"], [317, 2, 1, "", "static_vector_to_skew_symmetric_matrix"], [317, 2, 1, "", "svd"], [317, 2, 1, "", "svdvals"], [317, 2, 1, "", "tensordot"], [317, 2, 1, "", "trace"], [317, 2, 1, "", "vander"], [317, 2, 1, "", "vecdot"], [317, 2, 1, "", "vector_norm"], [317, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.container.losses": [[319, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[319, 2, 1, "", "binary_cross_entropy"], [319, 2, 1, "", "cross_entropy"], [319, 2, 1, "", "sparse_cross_entropy"], [319, 2, 1, "", "static_binary_cross_entropy"], [319, 2, 1, "", "static_cross_entropy"], [319, 2, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[321, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[321, 2, 1, "", "clip"], [321, 2, 1, "", "concat"], [321, 2, 1, "", "constant_pad"], [321, 2, 1, "", "expand_dims"], [321, 2, 1, "", "flip"], [321, 2, 1, "", "permute_dims"], [321, 2, 1, "", "repeat"], [321, 2, 1, "", "reshape"], [321, 2, 1, "", "roll"], [321, 2, 1, "", "split"], [321, 2, 1, "", "squeeze"], [321, 2, 1, "", "stack"], [321, 2, 1, "", "static_clip"], [321, 2, 1, "", "static_concat"], [321, 2, 1, "", "static_constant_pad"], [321, 2, 1, "", "static_expand_dims"], [321, 2, 1, "", "static_flip"], [321, 2, 1, "", "static_permute_dims"], [321, 2, 1, "", "static_repeat"], [321, 2, 1, "", "static_reshape"], [321, 2, 1, "", "static_roll"], [321, 2, 1, "", "static_split"], [321, 2, 1, "", "static_squeeze"], [321, 2, 1, "", "static_stack"], [321, 2, 1, "", "static_swapaxes"], [321, 2, 1, "", "static_tile"], [321, 2, 1, "", "static_unstack"], [321, 2, 1, "", "static_zero_pad"], [321, 2, 1, "", "swapaxes"], [321, 2, 1, "", "tile"], [321, 2, 1, "", "unstack"], [321, 2, 1, "", "zero_pad"]], "ivy.container.norms": [[323, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[323, 2, 1, "", "layer_norm"]], "ivy.container.random": [[325, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[325, 2, 1, "", "beta"], [325, 2, 1, "", "multinomial"], [325, 2, 1, "", "randint"], [325, 2, 1, "", "random_normal"], [325, 2, 1, "", "random_uniform"], [325, 2, 1, "", "shuffle"], [325, 2, 1, "", "static_beta"], [325, 2, 1, "", "static_multinomial"], [325, 2, 1, "", "static_randint"], [325, 2, 1, "", "static_random_normal"], [325, 2, 1, "", "static_random_uniform"], [325, 2, 1, "", "static_shuffle"]], "ivy.container.searching": [[327, 1, 1, "", "ContainerWithSearching"]], "ivy.container.searching.ContainerWithSearching": [[327, 2, 1, "", "argmax"], [327, 2, 1, "", "argmin"], [327, 2, 1, "", "argwhere"], [327, 2, 1, "", "nonzero"], [327, 2, 1, "", "static_argmax"], [327, 2, 1, "", "static_argmin"], [327, 2, 1, "", "static_argwhere"], [327, 2, 1, "", "static_nonzero"], [327, 2, 1, "", "static_where"], [327, 2, 1, "", "where"]], "ivy.container.set": [[329, 1, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[329, 2, 1, "", "static_unique_all"], [329, 2, 1, "", "static_unique_counts"], [329, 2, 1, "", "static_unique_inverse"], [329, 2, 1, "", "static_unique_values"], [329, 2, 1, "", "unique_all"], [329, 2, 1, "", "unique_counts"], [329, 2, 1, "", "unique_inverse"], [329, 2, 1, "", "unique_values"]], "ivy.container.sorting": [[331, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[331, 2, 1, "", "argsort"], [331, 2, 1, "", "searchsorted"], [331, 2, 1, "", "sort"], [331, 2, 1, "", "static_argsort"], [331, 2, 1, "", "static_searchsorted"], [331, 2, 1, "", "static_sort"]], "ivy.container.statistical": [[333, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[333, 2, 1, "", "cumprod"], [333, 2, 1, "", "cumsum"], [333, 2, 1, "", "einsum"], [333, 2, 1, "", "max"], [333, 2, 1, "", "mean"], [333, 2, 1, "", "min"], [333, 2, 1, "", "prod"], [333, 2, 1, "", "static_cumprod"], [333, 2, 1, "", "static_cumsum"], [333, 2, 1, "", "static_sum"], [333, 2, 1, "", "static_var"], [333, 2, 1, "", "std"], [333, 2, 1, "", "sum"], [333, 2, 1, "", "var"]], "ivy.container.utility": [[335, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[335, 2, 1, "", "all"], [335, 2, 1, "", "any"], [335, 2, 1, "", "static_all"], [335, 2, 1, "", "static_any"]], "ivy.container.wrapping": [[337, 4, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[379, 4, 1, "", "from_zero_dim_arrays_to_float"], [380, 4, 1, "", "handle_nestable"], [381, 4, 1, "", "handle_out_argument"], [382, 4, 1, "", "infer_device"], [383, 4, 1, "", "infer_dtype"], [384, 4, 1, "", "inputs_to_ivy_arrays"], [385, 4, 1, "", "inputs_to_native_arrays"], [386, 4, 1, "", "integer_arrays_to_float"], [387, 4, 1, "", "outputs_to_ivy_arrays"], [388, 4, 1, "", "to_native_arrays_and_back"], [378, 4, 1, "", "with_supported_device_and_dtypes"], [378, 4, 1, "", "with_supported_devices"], [378, 4, 1, "", "with_supported_dtypes"], [378, 4, 1, "", "with_unsupported_device_and_dtypes"], [378, 4, 1, "", "with_unsupported_devices"], [378, 4, 1, "", "with_unsupported_dtypes"]], "ivy.functional.experimental": [[390, 0, 0, "-", "activations"], [391, 0, 0, "-", "compilation"], [392, 0, 0, "-", "constants"], [393, 0, 0, "-", "creation"], [400, 0, 0, "-", "data_type"], [401, 0, 0, "-", "device"], [402, 0, 0, "-", "elementwise"], [417, 0, 0, "-", "general"], [418, 0, 0, "-", "gradients"]], "ivy.functional.experimental.creation": [[394, 4, 1, "", "hamming_window"], [395, 4, 1, "", "hann_window"], [396, 4, 1, "", "kaiser_bessel_derived_window"], [397, 4, 1, "", "kaiser_window"], [398, 4, 1, "", "triu_indices"], [399, 4, 1, "", "vorbis_window"]], "ivy.functional.experimental.elementwise": [[403, 4, 1, "", "exp2"], [404, 4, 1, "", "float_power"], [405, 4, 1, "", "fmax"], [406, 4, 1, "", "fmod"], [407, 4, 1, "", "gcd"], [408, 4, 1, "", "isclose"], [409, 4, 1, "", "isneginf"], [410, 4, 1, "", "isposinf"], [411, 4, 1, "", "lcm"], [412, 4, 1, "", "logaddexp2"], [413, 4, 1, "", "nan_to_num"], [414, 4, 1, "", "nansum"], [415, 4, 1, "", "sinc"], [416, 4, 1, "", "trapz"]], "ivy.verbosity": [[1811, 4, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"assert": [1, 348], "check_al": 2, "check_all_or_any_fn": 3, "check_ani": 4, "check_elem_in_list": 5, "check_equ": 6, "check_exist": 7, "check_fals": 8, "check_fill_value_and_dtype_are_compat": 9, "check_gather_input_valid": 10, "check_gather_nd_input_valid": 11, "check_great": 12, "check_inplace_sizes_valid": 13, "check_isinst": 14, "check_less": 15, "check_one_way_broadcast": 16, "check_shap": 17, "check_tru": 18, "backend": [19, 341, 344, 357, 360, 377], "handler": [19, 360], "choose_random_backend": 20, "clear_backend_stack": 21, "current_backend": 22, "fn_name_from_version_specific_fn_nam": 23, "get_backend": 24, "set_backend": 25, "set_backend_to_specific_vers": 26, "set_jax_backend": 27, "set_numpy_backend": 28, "set_tensorflow_backend": 29, "set_torch_backend": 30, "unset_backend": 31, "background": [32, 1750], "ml": [33, 1762, 1766], "explos": 33, "standard": [34, 358, 1757, 1766], "skeptic": 34, "complimentari": 34, "v": [34, 377], "competit": 34, "do": [34, 356], "work": [34, 38, 1756], "The": [34, 42, 354, 362, 377], "arrai": [34, 44, 47, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 339, 340, 343, 350, 362, 455, 467, 473, 478, 483, 488, 493, 498, 511, 518, 522, 530, 536, 547, 552, 557, 565, 571, 576, 584, 591, 596, 601, 606, 624, 635, 642, 647, 652, 657, 664, 685, 705, 714, 719, 724, 729, 734, 739, 744, 749, 754, 759, 764, 769, 774, 779, 784, 789, 794, 799, 804, 809, 814, 819, 824, 829, 834, 839, 844, 849, 854, 859, 864, 869, 874, 879, 884, 889, 894, 899, 904, 909, 914, 919, 924, 929, 934, 939, 944, 949, 954, 959, 964, 969, 974, 979, 984, 989, 994, 999, 1004, 1010, 1015, 1020, 1025, 1030, 1036, 1043, 1046, 1052, 1057, 1064, 1067, 1072, 1077, 1082, 1085, 1092, 1097, 1109, 1117, 1123, 1128, 1133, 1139, 1145, 1150, 1155, 1165, 1170, 1185, 1190, 1196, 1202, 1208, 1213, 1224, 1230, 1234, 1240, 1244, 1250, 1254, 1258, 1264, 1271, 1276, 1283, 1288, 1293, 1302, 1307, 1315, 1320, 1327, 1332, 1337, 1342, 1348, 1353, 1358, 1363, 1368, 1373, 1377, 1380, 1385, 1390, 1395, 1404, 1409, 1414, 1419, 1424, 1429, 1434, 1440, 1445, 1450, 1455, 1460, 1465, 1470, 1475, 1481, 1486, 1491, 1497, 1502, 1507, 1512, 1517, 1522, 1527, 1532, 1537, 1542, 1547, 1552, 1558, 1563, 1568, 1573, 1600, 1605, 1610, 1615, 1620, 1626, 1632, 1637, 1642, 1647, 1653, 1659, 1664, 1669, 1674, 1679, 1684, 1689, 1695, 1700, 1705, 1709, 1713, 1717, 1721, 1725, 1730, 1735, 1740, 1745, 1757], "api": [34, 40, 42, 339, 342, 343, 357, 360, 362, 364, 365, 1757, 1764, 1766], "why": [35, 356], "unifi": [35, 362, 1762, 1766], "No": [35, 41], "more": [35, 41, 358], "re": [35, 356], "implement": 35, "infinit": 35, "shelf": 35, "life": 35, "contribut": [36, 1750], "appli": [37, 376], "librari": [37, 376], "introduct": [37, 354, 355], "exampl": [37, 346, 350, 355, 358], "ivi": [37, 40, 41, 42, 340, 343, 346, 348, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 508, 509, 511, 512, 513, 518, 519, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 536, 537, 538, 539, 541, 542, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 614, 615, 619, 620, 621, 624, 625, 626, 627, 629, 630, 632, 633, 635, 636, 637, 638, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 664, 665, 666, 667, 685, 686, 687, 688, 704, 705, 706, 707, 714, 715, 716, 717, 719, 720, 721, 722, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 784, 785, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 804, 805, 806, 807, 809, 810, 811, 812, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 916, 917, 919, 920, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 939, 940, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 969, 970, 971, 972, 974, 975, 976, 977, 979, 980, 981, 982, 984, 985, 986, 987, 989, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1036, 1037, 1038, 1039, 1043, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1082, 1083, 1085, 1086, 1087, 1088, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1109, 1110, 1111, 1112, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1133, 1134, 1135, 1136, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1195, 1196, 1197, 1198, 1201, 1202, 1203, 1204, 1207, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1223, 1224, 1225, 1226, 1230, 1231, 1232, 1234, 1235, 1236, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1254, 1255, 1256, 1258, 1259, 1260, 1263, 1264, 1265, 1266, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1283, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1358, 1359, 1360, 1361, 1363, 1364, 1365, 1366, 1368, 1369, 1370, 1371, 1373, 1374, 1375, 1377, 1378, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388, 1390, 1391, 1392, 1393, 1395, 1396, 1397, 1398, 1400, 1401, 1402, 1404, 1405, 1406, 1407, 1409, 1410, 1411, 1412, 1414, 1415, 1416, 1417, 1419, 1420, 1421, 1422, 1424, 1425, 1426, 1427, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1439, 1440, 1441, 1442, 1444, 1445, 1446, 1447, 1449, 1450, 1451, 1452, 1454, 1455, 1456, 1457, 1459, 1460, 1461, 1462, 1464, 1465, 1466, 1467, 1469, 1470, 1471, 1472, 1474, 1475, 1476, 1477, 1481, 1482, 1483, 1484, 1486, 1487, 1488, 1489, 1491, 1492, 1493, 1494, 1497, 1498, 1499, 1500, 1502, 1503, 1504, 1505, 1507, 1508, 1509, 1510, 1512, 1513, 1514, 1515, 1517, 1518, 1519, 1520, 1522, 1523, 1524, 1525, 1527, 1528, 1529, 1530, 1532, 1533, 1534, 1535, 1537, 1538, 1539, 1540, 1542, 1543, 1544, 1545, 1547, 1548, 1549, 1550, 1552, 1553, 1554, 1555, 1557, 1558, 1559, 1560, 1562, 1563, 1564, 1565, 1567, 1568, 1569, 1570, 1572, 1573, 1574, 1575, 1600, 1601, 1602, 1605, 1606, 1607, 1608, 1610, 1611, 1612, 1613, 1615, 1616, 1617, 1618, 1620, 1621, 1622, 1623, 1626, 1627, 1628, 1629, 1632, 1633, 1634, 1635, 1637, 1638, 1639, 1640, 1642, 1643, 1644, 1645, 1647, 1648, 1649, 1650, 1652, 1653, 1654, 1655, 1658, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1668, 1669, 1670, 1671, 1673, 1674, 1675, 1676, 1679, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1689, 1690, 1691, 1692, 1695, 1696, 1697, 1698, 1700, 1701, 1702, 1703, 1705, 1706, 1707, 1709, 1710, 1711, 1713, 1714, 1715, 1717, 1718, 1719, 1721, 1722, 1723, 1725, 1726, 1727, 1729, 1730, 1731, 1732, 1734, 1735, 1736, 1737, 1740, 1741, 1742, 1743, 1745, 1746, 1747, 1748, 1766], "robot": [37, 373, 376], "build": [38, 360], "doc": 38, "docker": [38, 41, 42], "dockerless": 38, "us": [38, 41, 339, 363], "miniconda": [38, 41], "venv": [38, 41], "document": 38, "pipelin": [38, 343, 356, 377], "make_doc": 38, "sh": 38, "entrypoint": 38, "_make_doc": 38, "generate_src_rst_fil": 38, "py": 38, "sphinx": 38, "correct_built_html_fil": 38, "remove_fil": 38, "help": [39, 42], "resourc": 39, "open": 40, "task": 40, "function": [40, 342, 344, 345, 348, 350, 351, 352, 354, 355, 356, 357, 360, 365, 377], "format": [40, 349, 1759, 1766], "checklist": 40, "frontend": [40, 341, 343, 354, 355, 365], "where": [40, 1651, 1653, 1654, 1655], "place": 40, "experiment": [40, 42, 62, 186, 389], "set": [41, 131, 159, 300, 328, 341, 452, 1656], "up": 41, "clone": 41, "pycharm": [41, 42], "virtual": 41, "environ": 41, "interpret": 41, "window": 41, "maco": 41, "ubuntu": 41, "test": [41, 42, 339, 343, 355, 356], "detail": 41, "hypothesi": [41, 355, 356], "log": [41, 883, 884, 885, 886], "free": 41, "github": [41, 343], "codespac": 41, "pre": [41, 349], "commit": [41, 42, 349], "basic": [42, 354], "get": [42, 471], "todo": 42, "list": 42, "issu": 42, "manag": 42, "your": 42, "fork": 42, "who": 42, "To": 42, "ask": 42, "With": 42, "command": 42, "line": 42, "browser": 42, "pull": [42, 343], "request": [42, 343], "small": 42, "often": 42, "interact": 42, "contain": [42, 169, 174, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 342, 363, 468, 470, 474, 476, 479, 481, 484, 486, 489, 491, 494, 496, 499, 501, 509, 513, 523, 525, 528, 531, 533, 537, 539, 542, 545, 548, 550, 553, 555, 558, 560, 563, 566, 568, 570, 572, 575, 577, 580, 583, 585, 592, 594, 597, 599, 602, 604, 607, 609, 615, 619, 621, 625, 627, 630, 633, 636, 638, 643, 645, 648, 650, 653, 655, 658, 660, 665, 667, 686, 688, 704, 706, 715, 717, 720, 722, 725, 727, 730, 732, 735, 737, 740, 742, 745, 747, 750, 752, 755, 757, 760, 762, 765, 767, 770, 772, 775, 777, 780, 782, 785, 787, 790, 792, 795, 797, 800, 802, 805, 807, 810, 812, 815, 817, 820, 822, 825, 827, 830, 832, 835, 837, 840, 842, 845, 847, 850, 852, 855, 857, 860, 862, 865, 867, 870, 872, 875, 877, 880, 882, 885, 887, 890, 892, 895, 897, 900, 902, 905, 907, 910, 912, 915, 917, 920, 922, 925, 927, 930, 932, 935, 937, 940, 942, 945, 947, 950, 952, 955, 957, 960, 962, 965, 967, 970, 972, 975, 977, 980, 982, 985, 987, 990, 992, 995, 997, 1000, 1002, 1005, 1007, 1009, 1011, 1014, 1016, 1019, 1021, 1024, 1026, 1029, 1031, 1037, 1039, 1047, 1049, 1053, 1055, 1058, 1060, 1068, 1070, 1073, 1075, 1078, 1080, 1086, 1088, 1093, 1095, 1098, 1100, 1110, 1112, 1118, 1120, 1124, 1126, 1129, 1131, 1134, 1136, 1140, 1142, 1146, 1148, 1151, 1153, 1156, 1158, 1166, 1168, 1171, 1173, 1186, 1188, 1191, 1193, 1195, 1197, 1201, 1203, 1207, 1209, 1212, 1214, 1223, 1225, 1231, 1235, 1241, 1245, 1247, 1251, 1255, 1259, 1263, 1265, 1270, 1272, 1275, 1277, 1284, 1286, 1289, 1291, 1294, 1296, 1298, 1300, 1303, 1305, 1308, 1310, 1316, 1318, 1321, 1323, 1328, 1330, 1333, 1335, 1338, 1340, 1343, 1345, 1349, 1351, 1354, 1356, 1359, 1361, 1364, 1366, 1369, 1371, 1374, 1381, 1383, 1386, 1388, 1391, 1393, 1396, 1398, 1400, 1402, 1405, 1407, 1410, 1412, 1415, 1417, 1420, 1422, 1425, 1427, 1430, 1432, 1435, 1437, 1439, 1441, 1444, 1446, 1449, 1451, 1454, 1456, 1459, 1461, 1464, 1466, 1469, 1471, 1474, 1476, 1482, 1484, 1487, 1489, 1492, 1494, 1498, 1500, 1503, 1505, 1508, 1510, 1513, 1515, 1518, 1520, 1523, 1525, 1528, 1530, 1533, 1535, 1538, 1540, 1543, 1545, 1548, 1550, 1553, 1555, 1557, 1559, 1562, 1564, 1567, 1569, 1572, 1574, 1601, 1606, 1608, 1611, 1613, 1616, 1618, 1621, 1623, 1627, 1629, 1633, 1635, 1638, 1640, 1643, 1645, 1648, 1650, 1652, 1654, 1658, 1660, 1663, 1665, 1668, 1670, 1673, 1675, 1680, 1682, 1685, 1687, 1690, 1692, 1696, 1698, 1701, 1703, 1706, 1710, 1714, 1718, 1722, 1726, 1729, 1731, 1734, 1736, 1741, 1743, 1746, 1748], "run": [42, 339, 356], "local": 42, "most": 42, "out": [42, 350, 353], "id": [42, 339], "data": [43, 56, 105, 180, 274, 344, 354, 356, 363, 377, 400, 587], "class": [43, 348, 354, 362, 1768], "activ": [45, 63, 170, 187, 390, 464, 1769], "arraywithactiv": 46, "convers": [49, 101, 176, 270], "args_to_ivi": 50, "args_to_n": 51, "to_ivi": 52, "to_n": 53, "creation": [54, 103, 178, 272, 393, 505], "arraywithcr": 55, "type": [56, 105, 180, 274, 344, 351, 354, 377, 400, 587], "arraywithdatatyp": 57, "devic": [58, 107, 182, 276, 345, 350, 354, 401, 678], "arraywithdevic": 59, "elementwis": [60, 109, 184, 278, 402, 712], "arraywithelementwis": 61, "arraywithactivationsexperiment": 64, "method": [65, 189, 342, 354, 355, 362, 363], "avg_pool3d": [66, 191, 421], "dct": [67, 192, 422], "diagflat": [68, 193, 427], "dirichlet": [69, 194, 449], "exp2": [70, 195, 403], "flatten": [71, 196, 431], "fliplr": [72, 197, 432], "flipud": [73, 198, 433], "float_pow": [74, 199, 404], "fmax": [75, 200, 405], "fmod": [76, 201, 406], "gcd": [77, 202, 407], "heavisid": [78, 205, 434], "hstack": [79, 206, 435], "i0": [80, 207, 436], "isclos": [81, 208, 408], "isneginf": [82, 209, 409], "isposinf": [83, 210, 410], "kron": [84, 213, 428], "lcm": [85, 214, 411], "logaddexp2": [86, 215, 412], "max_pool1d": [87, 216, 423], "max_pool2d": [88, 217, 424], "max_pool3d": [89, 218, 425], "median": [90, 219, 461], "moveaxi": [91, 220, 437], "msort": [92, 221, 454], "nan_to_num": [93, 222, 413], "nansum": [94, 223, 414], "pad": [95, 224, 440], "rot90": [96, 225, 441], "sinc": [97, 226, 415], "top_k": [98, 267, 442], "trapz": [99, 416], "vstack": [100, 269, 443], "arraywithconversionsexperiment": 102, "arraywithcreationexperiment": 104, "arraywithdata_typeexperiment": 106, "arraywithdeviceexperiment": 108, "arraywithelementwiseexperiment": 110, "gener": [111, 139, 280, 308, 356, 358, 417, 1034], "arraywithgeneralexperiment": 112, "gradient": [113, 141, 282, 310, 418, 1228], "arraywithgradientsexperiment": 114, "imag": [115, 143, 284, 312], "arraywithimageexperiment": 116, "layer": [117, 145, 286, 314, 419, 1280, 1784], "arraywithlayersexperiment": 118, "linalg": [119, 147, 288, 316, 426, 1346], "arraywithlinalgexperiment": 120, "loss": [121, 149, 290, 318, 429, 1479], "arraywithlossesexperiment": 122, "manipul": [123, 151, 292, 320, 430, 1495], "arraywithmanipulationexperiment": 124, "norm": [125, 153, 294, 322, 446, 1598, 1799], "arraywithnormsexperiment": 126, "random": [127, 155, 296, 324, 447, 1603], "arraywithrandomexperiment": 128, "search": [129, 157, 298, 326, 451, 1630], "arraywithsearchingexperiment": 130, "arraywithsetexperiment": 132, "sort": [133, 161, 302, 330, 453, 1677, 1688, 1689, 1690, 1691], "arraywithsortingexperiment": 134, "statist": [135, 163, 304, 332, 460, 1693], "arraywithstatisticalexperiment": 136, "util": [137, 165, 306, 334, 462, 1738], "arraywithutilityexperiment": 138, "arraywithgener": 140, "arraywithgradi": 142, "arraywithimag": 144, "arraywithlay": 146, "arraywithlinalg": 148, "arraywithloss": 150, "arraywithmanipul": 152, "arraywithnorm": 154, "arraywithrandom": 156, "arraywithsearch": 158, "arraywithset": 160, "arraywithsort": 162, "arraywithstatist": 164, "arraywithutil": 166, "wrap": [167, 336, 352], "add_ivy_array_instance_method": 168, "containerwithactiv": 171, "base": 172, "containerbas": 173, "containerwithconvers": 177, "containerwithcr": 179, "containerwithdatatyp": 181, "containerwithdevic": 183, "containerwithelementwis": 185, "containerwithactivationexperiment": 188, "avg_pool2d": [190, 420], "hamming_window": [203, 394], "hann_window": [204, 395], "kaiser_bessel_derived_window": [211, 396], "kaiser_window": [212, 397], "static_avg_pool2d": 227, "static_avg_pool3d": 228, "static_dct": 229, "static_diagflat": 230, "static_dirichlet": 231, "static_exp2": 232, "static_flatten": 233, "static_fliplr": 234, "static_flipud": 235, "static_float_pow": 236, "static_fmax": 237, "static_fmod": 238, "static_gcd": 239, "static_hamming_window": 240, "static_hann_window": 241, "static_heavisid": 242, "static_hstack": 243, "static_i0": 244, "static_isclos": 245, "static_isneginf": 246, "static_isposinf": 247, "static_kaiser_bessel_derived_window": 248, "static_kaiser_window": 249, "static_kron": 250, "static_lcm": 251, "static_logaddexp2": 252, "static_max_pool1d": 253, "static_max_pool2d": 254, "static_max_pool3d": 255, "static_median": 256, "static_moveaxi": 257, "static_msort": 258, "static_nan_to_num": 259, "static_nansum": 260, "static_pad": 261, "static_rot90": 262, "static_sinc": 263, "static_top_k": 264, "static_triu_indic": 265, "static_vstack": 266, "triu_indic": [268, 398], "containerwithconversionexperiment": 271, "containerwithcreationexperiment": 273, "containerwithdata_typeexperiment": 275, "containerwithdeviceexperiment": 277, "containerwithelementwiseexperiment": 279, "containerwithgeneralexperiment": 281, "containerwithgradientsexperiment": 283, "containerwithimageexperiment": 285, "containerwithlayersexperiment": 287, "containerwithlinalgexperiment": 289, "containerwithlossesexperiment": 291, "containerwithmanipulationexperiment": 293, "containerwithnormsexperiment": 295, "containerwithrandomexperiment": 297, "containerwithsearchingexperiment": 299, "containerwithsetexperiment": 301, "containerwithsortingexperiment": 303, "containerwithstatisticalexperiment": 305, "containerwithutilityexperiment": 307, "containerwithgener": 309, "containerwithgradi": 311, "containerwithimag": 313, "containerwithlay": 315, "containerwithlinalg": 317, "containerwithloss": 319, "containerwithmanipul": 321, "containerwithnorm": 323, "containerwithrandom": 325, "containerwithsearch": 327, "containerwithset": 329, "containerwithsort": 331, "containerwithstatist": 333, "containerwithutil": 335, "add_ivy_container_instance_method": 337, "deep": 338, "dive": 338, "termin": 339, "skip": 339, "nativ": 340, "handl": [340, 348, 377], "version": [341, 357, 377], "support": [341, 344, 354, 377], "instanc": [342, 354, 355, 362], "static": 342, "special": [342, 354, 355], "nestabl": [342, 350, 351], "continu": 343, "integr": [343, 356], "action": 343, "core": 343, "nn": 343, "state": [343, 364, 377], "ci": 343, "push": 343, "schedul": 343, "cron": 343, "job": 343, "dashboard": 343, "modul": [344, 345, 364, 1796, 1797], "promot": [344, 354], "argument": [344, 345, 350, 353, 354], "other": [344, 345], "unsupport": 344, "bug": 344, "superset": [344, 358], "docstr": [346, 347], "tan": [346, 355, 1013, 1015, 1016, 1017], "roll": [346, 1536, 1537, 1538, 1539], "add": [346, 355, 728, 729, 730, 731, 1766], "except": 348, "handle_except": 348, "decor": 348, "lint": 349, "check": [349, 377], "hook": 349, "posit": [350, 953, 954, 955, 956], "keyword": 350, "input": 350, "dtype": [350, 618, 619, 620], "number": 350, "oper": [350, 362, 377], "integ": 350, "sequenc": 350, "primari": 351, "composit": [351, 354], "mix": 351, "standalon": 351, "conveni": 351, "inplac": 353, "updat": 353, "copi": 353, "unus": 354, "miss": 354, "temporari": 354, "rule": 354, "numpi": [354, 1760], "cast": 354, "full": [355, 534], "alia": 355, "helper": [355, 356, 357], "import": 356, "strategi": 356, "we": 356, "need": 356, "how": 356, "write": 356, "effect": 356, "bonu": 356, "extend": [356, 358], "featur": 356, "self": 356, "consist": 356, "explicit": 356, "test_array_funct": 356, "fail": 356, "navig": 357, "code": 357, "categor": 357, "submodul": 357, "design": [357, 359, 1750], "pin": 357, "behaviour": 358, "what": [358, 1766], "i": 358, "A": 358, "non": 358, "duplic": 358, "when": 358, "too": 358, "much": 358, "balanc": 358, "effici": 358, "block": 360, "graph": [360, 365, 1761, 1766], "compil": [360, 365, 391, 502, 503, 1758, 1763, 1765, 1766], "framework": [361, 1760, 1763, 1766, 1767, 1768], "monkei": 362, "patch": 362, "construct": 363, "represent": 363, "recurs": 363, "built": 363, "ins": 363, "access": 363, "save": 363, "load": 363, "comparison": 363, "custom": [363, 377], "case": 363, "compartment": 363, "configur": 363, "network": [363, 365], "weight": 363, "initi": [364, 1774, 1778], "optim": [364, 1801, 1805], "transpil": 365, "role": 365, "convert": [365, 1772], "model": [365, 372, 377], "builder": 367, "ecosystem": 368, "gym": [369, 376], "mech": 370, "memori": [371, 376], "vision": [374, 376], "extens": [375, 1750], "mechan": 376, "faq": 377, "maintain": 377, "dynam": 377, "size": 377, "shape": [377, 1182], "gpu": 377, "deploy": 377, "control": 377, "flow": 377, "auto": 377, "differenti": 377, "replica": 377, "parallel": 377, "altern": 377, "structur": 377, "func": 378, "wrapper": [378, 1766, 1767], "from_zero_dim_arrays_to_float": 379, "handle_nest": 380, "handle_out_argu": 381, "infer_devic": 382, "infer_dtyp": 383, "inputs_to_ivy_arrai": 384, "inputs_to_native_arrai": 385, "integer_arrays_to_float": 386, "outputs_to_ivy_arrai": 387, "to_native_arrays_and_back": 388, "constant": [392, 504, 1775], "vorbis_window": 399, "ndenumer": 438, "ndindex": 439, "meta": [444, 1576], "nest": [445, 1580], "beta": 448, "gamma": 450, "spars": 455, "is_ivy_sparse_arrai": 456, "is_native_sparse_arrai": 457, "native_sparse_arrai": 458, "native_sparse_array_to_indices_values_and_shap": 459, "deseri": 465, "gelu": [466, 467, 468, 469, 1771], "static_gelu": 470, "leaky_relu": [472, 473, 474, 475], "static_leaky_relu": 476, "log_softmax": [477, 478, 479, 480], "static_log_softmax": 481, "relu": [482, 483, 484, 485], "static_relu": 486, "sigmoid": [487, 488, 489, 490], "static_sigmoid": 491, "softmax": [492, 493, 494, 495], "static_softmax": 496, "softplu": [497, 498, 499, 500], "static_softplu": 501, "nestedsequ": 506, "arang": [507, 508], "static_arang": 509, "asarrai": [510, 511, 512], "static_asarrai": 513, "asarray_handle_nest": 514, "asarray_infer_devic": 515, "asarray_to_native_arrays_and_back": 516, "copy_arrai": [517, 518, 519], "empti": 520, "empty_lik": [521, 522, 523, 524], "static_empty_lik": 525, "ey": [526, 527], "static_ey": 528, "from_dlpack": [529, 530, 531, 532], "static_from_dlpack": 533, "full_lik": [535, 536, 537, 538], "static_full_lik": 539, "linspac": [540, 541], "static_linspac": 542, "logspac": [543, 544], "static_logspac": 545, "meshgrid": [546, 547, 548, 549], "static_meshgrid": 550, "native_arrai": [551, 552, 553, 554], "static_native_arrai": 555, "one_hot": [556, 557, 558, 559], "static_one_hot": 560, "ones": [561, 562], "static_on": 563, "ones_lik": [564, 565, 566, 567], "static_ones_lik": 568, "tril": [569, 571, 572, 573], "static_tril": 570, "triu": [574, 576, 577, 578], "static_triu": 575, "zero": [579, 581, 1783], "static_zero": 580, "zeros_lik": [582, 584, 585, 586], "static_zeros_lik": 583, "as_ivy_dtyp": 588, "as_native_dtyp": 589, "astyp": [590, 591, 592, 593], "static_astyp": 594, "broadcast_arrai": [595, 596, 597, 598], "static_broadcast_arrai": 599, "broadcast_to": [600, 601, 602, 603], "static_broadcast_to": 604, "can_cast": [605, 606, 607, 608], "static_can_cast": 609, "check_float": 610, "closest_valid_dtyp": 611, "default_dtyp": 612, "default_float_dtyp": [613, 614], "static_default_float_dtyp": 615, "default_int_dtyp": 616, "default_uint_dtyp": 617, "static_dtyp": 621, "dtype_bit": 622, "finfo": [623, 624, 625, 626], "static_finfo": 627, "function_supported_dtyp": [628, 629], "static_function_supported_dtyp": 630, "function_unsupported_dtyp": [631, 632], "static_function_unsupported_dtyp": 633, "iinfo": [634, 635, 636, 637], "static_iinfo": 638, "infer_default_dtyp": 639, "invalid_dtyp": 640, "is_bool_dtyp": [641, 642, 643, 644], "static_is_bool_dtyp": 645, "is_float_dtyp": [646, 647, 648, 649], "static_is_float_dtyp": 650, "is_int_dtyp": [651, 652, 653, 654], "static_is_int_dtyp": 655, "is_uint_dtyp": [656, 657, 658, 659], "static_is_uint_dtyp": 660, "promote_typ": 661, "promote_types_of_input": 662, "result_typ": [663, 664, 665, 666], "static_result_typ": 667, "set_default_dtyp": 668, "set_default_float_dtyp": 669, "set_default_int_dtyp": 670, "set_default_uint_dtyp": 671, "type_promote_arrai": 672, "unset_default_dtyp": 673, "unset_default_float_dtyp": 674, "unset_default_int_dtyp": 675, "unset_default_uint_dtyp": 676, "valid_dtyp": 677, "profil": 679, "as_ivy_dev": 680, "as_native_dev": 681, "clear_mem_on_dev": 682, "default_devic": 683, "dev": [684, 685, 686, 687], "static_dev": 688, "dev_util": 689, "function_supported_devic": 690, "function_unsupported_devic": 691, "get_all_ivy_arrays_on_dev": 692, "gpu_is_avail": 693, "num_cpu_cor": 694, "num_gpu": 695, "num_ivy_arrays_on_dev": 696, "percent_used_mem_on_dev": 697, "print_all_ivy_arrays_on_dev": 698, "set_default_devic": 699, "set_split_factor": 700, "split_factor": 701, "split_func_cal": 702, "to_devic": [703, 705, 706, 707], "static_to_devic": 704, "total_mem_on_dev": 708, "tpu_is_avail": 709, "unset_default_devic": 710, "used_mem_on_dev": 711, "ab": [713, 714, 715, 716], "static_ab": 717, "aco": [718, 719, 720, 721], "static_aco": 722, "acosh": [723, 724, 725, 726], "static_acosh": 727, "static_add": 732, "asin": [733, 734, 735, 736], "static_asin": 737, "asinh": [738, 739, 740, 741], "static_asinh": 742, "atan": [743, 744, 745, 746], "static_atan": 747, "atan2": [748, 749, 750, 751], "static_atan2": 752, "atanh": [753, 754, 755, 756], "static_atanh": 757, "bitwise_and": [758, 759, 760, 761], "static_bitwise_and": 762, "bitwise_invert": [763, 764, 765, 766], "static_bitwise_invert": 767, "bitwise_left_shift": [768, 769, 770, 771], "static_bitwise_left_shift": 772, "bitwise_or": [773, 774, 775, 776], "static_bitwise_or": 777, "bitwise_right_shift": [778, 779, 780, 781], "static_bitwise_right_shift": 782, "bitwise_xor": [783, 784, 785, 786], "static_bitwise_xor": 787, "ceil": [788, 789, 790, 791], "static_ceil": 792, "co": [793, 794, 795, 796], "static_co": 797, "cosh": [798, 799, 800, 801], "static_cosh": 802, "deg2rad": [803, 804, 805, 806], "static_deg2rad": 807, "divid": [808, 809, 810, 811], "static_divid": 812, "equal": [813, 814, 815, 816], "static_equ": 817, "erf": [818, 819, 820, 821], "static_erf": 822, "exp": [823, 824, 825, 826], "static_exp": 827, "expm1": [828, 829, 830, 831], "static_expm1": 832, "floor": [833, 834, 835, 836], "static_floor": 837, "floor_divid": [838, 839, 840, 841], "static_floor_divid": 842, "greater": [843, 844, 845, 846], "static_great": 847, "greater_equ": [848, 849, 850, 851], "static_greater_equ": 852, "isfinit": [853, 854, 855, 856], "static_isfinit": 857, "isinf": [858, 859, 860, 861], "static_isinf": 862, "isnan": [863, 864, 865, 866], "static_isnan": 867, "isreal": [868, 869, 870, 871], "static_isr": 872, "less": [873, 874, 875, 876], "static_less": 877, "less_equ": [878, 879, 880, 881], "static_less_equ": 882, "static_log": 887, "log10": [888, 889, 890, 891], "static_log10": 892, "log1p": [893, 894, 895, 896], "static_log1p": 897, "log2": [898, 899, 900, 901], "static_log2": 902, "logaddexp": [903, 904, 905, 906], "static_logaddexp": 907, "logical_and": [908, 909, 910, 911], "static_logical_and": 912, "logical_not": [913, 914, 915, 916], "static_logical_not": 917, "logical_or": [918, 919, 920, 921], "static_logical_or": 922, "logical_xor": [923, 924, 925, 926], "static_logical_xor": 927, "maximum": [928, 929, 930, 931], "static_maximum": 932, "minimum": [933, 934, 935, 936], "static_minimum": 937, "multipli": [938, 939, 940, 941], "static_multipli": 942, "neg": [943, 944, 945, 946], "static_neg": 947, "not_equ": [948, 949, 950, 951], "static_not_equ": 952, "static_posit": 957, "pow": [958, 959, 960, 961], "static_pow": 962, "rad2deg": [963, 964, 965, 966], "static_rad2deg": 967, "reciproc": [968, 969, 970, 971], "static_reciproc": 972, "remaind": [973, 974, 975, 976], "static_remaind": 977, "round": [978, 979, 980, 981], "static_round": 982, "sign": [983, 984, 985, 986], "static_sign": 987, "sin": [988, 989, 990, 991], "static_sin": 992, "sinh": [993, 994, 995, 996], "static_sinh": 997, "sqrt": [998, 999, 1000, 1001], "static_sqrt": 1002, "squar": [1003, 1004, 1005, 1006], "static_squar": 1007, "subtract": [1008, 1010, 1011, 1012], "static_subtract": 1009, "static_tan": 1014, "tanh": [1018, 1020, 1021, 1022], "static_tanh": 1019, "trunc": [1023, 1025, 1026, 1027], "static_trunc": 1024, "trunc_divid": [1028, 1030, 1031, 1032], "static_trunc_divid": 1029, "all_equ": [1035, 1036, 1037, 1038], "static_all_equ": 1039, "arg_info": 1040, "arg_nam": 1041, "array_equ": [1042, 1043, 1044], "assert_supports_inplac": [1045, 1046, 1047, 1048], "static_assert_supports_inplac": 1049, "cache_fn": 1050, "clip_matrix_norm": [1051, 1052, 1053, 1054], "static_clip_matrix_norm": 1055, "clip_vector_norm": [1056, 1057, 1058, 1059], "static_clip_vector_norm": 1060, "container_typ": 1061, "current_backend_str": 1062, "default": [1063, 1064, 1065], "einops_rearrang": [1066, 1067, 1068, 1069], "static_einops_rearrang": 1070, "einops_reduc": [1071, 1072, 1073, 1074], "static_einops_reduc": 1075, "einops_repeat": [1076, 1077, 1078, 1079], "static_einops_repeat": 1080, "exist": [1081, 1082, 1083], "fourier_encod": [1084, 1085, 1086, 1087], "static_fourier_encod": 1088, "function_supported_devices_and_dtyp": 1089, "function_unsupported_devices_and_dtyp": 1090, "gather": [1091, 1092, 1093, 1094], "static_gath": 1095, "gather_nd": [1096, 1097, 1098, 1099], "static_gather_nd": 1100, "get_all_arrays_in_memori": 1101, "get_array_mod": 1102, "get_exception_trace_mod": 1103, "get_item": 1104, "get_min_bas": 1105, "get_min_denomin": 1106, "get_nestable_mod": 1107, "get_num_dim": [1108, 1109, 1110, 1111], "static_get_num_dim": 1112, "get_queue_timeout": 1113, "get_referrers_recurs": 1114, "get_tmp_dir": 1115, "has_nan": [1116, 1117, 1118, 1119], "static_has_nan": 1120, "inplace_arrays_support": 1121, "inplace_decr": [1122, 1123, 1124, 1125], "static_inplace_decr": 1126, "inplace_incr": [1127, 1128, 1129, 1130], "static_inplace_incr": 1131, "inplace_upd": [1132, 1133, 1134, 1135], "static_inplace_upd": 1136, "inplace_variables_support": 1137, "is_arrai": [1138, 1139, 1140, 1141], "static_is_arrai": 1142, "is_frontend_arrai": 1143, "is_ivy_arrai": [1144, 1145, 1146, 1147], "static_is_ivy_arrai": 1148, "is_ivy_contain": [1149, 1150, 1151, 1152], "static_is_ivy_contain": 1153, "is_native_arrai": [1154, 1155, 1156, 1157], "static_is_native_arrai": 1158, "isscalar": 1159, "match_kwarg": 1160, "multiprocess": 1161, "num_arrays_in_memori": 1162, "print_all_arrays_in_memori": 1163, "scatter_flat": [1164, 1165, 1166, 1167], "static_scatter_flat": 1168, "scatter_nd": [1169, 1170, 1171, 1172], "static_scatter_nd": 1173, "set_array_mod": 1174, "set_exception_trace_mod": 1175, "set_min_bas": 1176, "set_min_denomin": 1177, "set_nestable_mod": 1178, "set_queue_timeout": 1179, "set_shape_array_mod": 1180, "set_tmp_dir": 1181, "shape_array_mod": 1183, "stable_divid": [1184, 1185, 1186, 1187], "static_stable_divid": 1188, "stable_pow": [1189, 1190, 1191, 1192], "static_stable_pow": 1193, "supports_inplace_upd": [1194, 1196, 1197, 1198], "static_supports_inplace_upd": 1195, "to_ivy_shap": 1199, "to_list": [1200, 1202, 1203, 1204], "static_to_list": 1201, "to_native_shap": 1205, "to_numpi": [1206, 1208, 1209, 1210], "static_to_numpi": 1207, "to_scalar": [1211, 1213, 1214, 1215], "static_to_scalar": 1212, "try_else_non": 1216, "unset_array_mod": 1217, "unset_exception_trace_mod": 1218, "unset_nestable_mod": 1219, "unset_queue_timeout": 1220, "unset_shape_array_mod": 1221, "value_is_nan": [1222, 1224, 1225, 1226], "static_value_is_nan": 1223, "vmap": 1227, "adam_step": [1229, 1230, 1231, 1232], "adam_upd": [1233, 1234, 1235, 1236], "execute_with_gradi": 1237, "grad": 1238, "gradient_descent_upd": [1239, 1240, 1241, 1242], "is_vari": [1243, 1244, 1245, 1246], "static_is_vari": 1247, "jac": 1248, "lamb_upd": [1249, 1250, 1251, 1252], "lars_upd": [1253, 1254, 1255, 1256], "optimizer_upd": [1257, 1258, 1259, 1260], "set_with_grad": 1261, "stop_gradi": [1262, 1264, 1265, 1266], "static_stop_gradi": 1263, "unset_with_grad": 1267, "value_and_grad": 1268, "variabl": [1269, 1271, 1272, 1273], "static_vari": 1270, "variable_data": [1274, 1276, 1277, 1278], "static_variable_data": 1275, "with_grad": 1279, "conv": 1281, "conv1d": [1282, 1283, 1284, 1285, 1785], "static_conv1d": 1286, "conv1d_transpos": [1287, 1288, 1289, 1290], "static_conv1d_transpos": 1291, "conv2d": [1292, 1293, 1294, 1295, 1787], "static_conv2d": 1296, "conv2d_transpos": [1297, 1298, 1299], "static_conv2d_transpos": 1300, "conv3d": [1301, 1302, 1303, 1304, 1789], "static_conv3d": 1305, "conv3d_transpos": [1306, 1307, 1308, 1309], "static_conv3d_transpos": 1310, "conv_general_dil": 1311, "conv_general_transpos": 1312, "deconv_length": 1313, "depthwise_conv2d": [1314, 1315, 1316, 1317], "static_depthwise_conv2d": 1318, "dropout": [1319, 1320, 1321, 1322, 1792], "static_dropout": 1323, "get_x_data_format": 1324, "handle_pad": 1325, "linear": [1326, 1327, 1328, 1329, 1794], "static_linear": 1330, "lstm_updat": [1331, 1332, 1333, 1334], "static_lstm_upd": 1335, "multi_head_attent": [1336, 1337, 1338, 1339], "static_multi_head_attent": 1340, "scaled_dot_product_attent": [1341, 1342, 1343, 1344], "static_scaled_dot_product_attent": 1345, "choleski": [1347, 1348, 1349, 1350], "static_choleski": 1351, "cross": [1352, 1353, 1354, 1355], "static_cross": 1356, "det": [1357, 1358, 1359, 1360], "static_det": 1361, "diag": [1362, 1363, 1364, 1365], "static_diag": 1366, "diagon": [1367, 1368, 1369, 1370], "static_diagon": 1371, "eigh": [1372, 1373, 1374, 1375], "eigvalsh": [1376, 1377, 1378], "inner": [1379, 1380, 1381, 1382], "static_inn": 1383, "inv": [1384, 1385, 1386, 1387], "static_inv": 1388, "matmul": [1389, 1390, 1391, 1392], "static_matmul": 1393, "matrix_norm": [1394, 1395, 1396, 1397], "static_matrix_norm": 1398, "matrix_pow": [1399, 1400, 1401], "static_matrix_pow": 1402, "matrix_rank": [1403, 1404, 1405, 1406], "static_matrix_rank": 1407, "matrix_transpos": [1408, 1409, 1410, 1411], "static_matrix_transpos": 1412, "outer": [1413, 1414, 1415, 1416], "static_out": 1417, "pinv": [1418, 1419, 1420, 1421], "static_pinv": 1422, "qr": [1423, 1424, 1425, 1426], "static_qr": 1427, "slogdet": [1428, 1429, 1430, 1431], "static_slogdet": 1432, "solv": [1433, 1434, 1435, 1436], "static_solv": 1437, "svd": [1438, 1440, 1441, 1442], "static_svd": 1439, "svdval": [1443, 1445, 1446, 1447], "static_svdv": 1444, "tensordot": [1448, 1450, 1451, 1452], "static_tensordot": 1449, "trace": [1453, 1455, 1456, 1457], "static_trac": 1454, "vander": [1458, 1460, 1461, 1462], "static_vand": 1459, "vecdot": [1463, 1465, 1466, 1467], "static_vecdot": 1464, "vector_norm": [1468, 1470, 1471, 1472], "static_vector_norm": 1469, "vector_to_skew_symmetric_matrix": [1473, 1475, 1476, 1477], "static_vector_to_skew_symmetric_matrix": 1474, "binary_cross_entropi": [1480, 1481, 1482, 1483], "static_binary_cross_entropi": 1484, "cross_entropi": [1485, 1486, 1487, 1488], "static_cross_entropi": 1489, "sparse_cross_entropi": [1490, 1491, 1492, 1493], "static_sparse_cross_entropi": 1494, "clip": [1496, 1497, 1498, 1499], "static_clip": 1500, "concat": [1501, 1502, 1503, 1504], "static_concat": 1505, "constant_pad": [1506, 1507, 1508, 1509], "static_constant_pad": 1510, "expand_dim": [1511, 1512, 1513, 1514], "static_expand_dim": 1515, "flip": [1516, 1517, 1518, 1519], "static_flip": 1520, "permute_dim": [1521, 1522, 1523, 1524], "static_permute_dim": 1525, "repeat": [1526, 1527, 1528, 1529], "static_repeat": 1530, "reshap": [1531, 1532, 1533, 1534], "static_reshap": 1535, "static_rol": 1540, "split": [1541, 1542, 1543, 1544], "static_split": 1545, "squeez": [1546, 1547, 1548, 1549], "static_squeez": 1550, "stack": [1551, 1552, 1553, 1554], "static_stack": 1555, "swapax": [1556, 1558, 1559, 1560], "static_swapax": 1557, "tile": [1561, 1563, 1564, 1565], "static_til": 1562, "unstack": [1566, 1568, 1569, 1570], "static_unstack": 1567, "zero_pad": [1571, 1573, 1574, 1575], "static_zero_pad": 1572, "fomaml_step": 1577, "maml_step": 1578, "reptile_step": 1579, "all_nested_indic": 1581, "copy_nest": 1582, "index_nest": 1583, "insert_into_nest_at_index": 1584, "insert_into_nest_at_indic": 1585, "map": 1586, "map_nest_at_index": 1587, "map_nest_at_indic": 1588, "multi_index_nest": 1589, "nested_ani": 1590, "nested_argwher": 1591, "nested_map": 1592, "nested_multi_map": 1593, "prune_nest_at_index": 1594, "prune_nest_at_indic": 1595, "set_nest_at_index": 1596, "set_nest_at_indic": 1597, "layer_norm": [1599, 1600, 1601, 1602], "multinomi": [1604, 1605, 1606, 1607], "static_multinomi": 1608, "randint": [1609, 1610, 1611, 1612], "static_randint": 1613, "random_norm": [1614, 1615, 1616, 1617], "static_random_norm": 1618, "random_uniform": [1619, 1620, 1621, 1622], "static_random_uniform": 1623, "seed": 1624, "shuffl": [1625, 1626, 1627, 1628], "static_shuffl": 1629, "argmax": [1631, 1632, 1633, 1634], "static_argmax": 1635, "argmin": [1636, 1637, 1638, 1639], "static_argmin": 1640, "argwher": [1641, 1642, 1643, 1644], "static_argwher": 1645, "nonzero": [1646, 1647, 1648, 1649], "static_nonzero": 1650, "static_wher": 1652, "unique_al": [1657, 1659, 1660, 1661], "static_unique_al": 1658, "unique_count": [1662, 1664, 1665, 1666], "static_unique_count": 1663, "unique_invers": [1667, 1669, 1670, 1671], "static_unique_invers": 1668, "unique_valu": [1672, 1674, 1675, 1676], "static_unique_valu": 1673, "argsort": [1678, 1679, 1680, 1681], "static_argsort": 1682, "searchsort": [1683, 1684, 1685, 1686], "static_searchsort": 1687, "static_sort": 1692, "cumprod": [1694, 1695, 1696, 1697], "static_cumprod": 1698, "cumsum": [1699, 1700, 1701, 1702], "static_cumsum": 1703, "einsum": [1704, 1705, 1706, 1707], "max": [1708, 1709, 1710, 1711], "mean": [1712, 1713, 1714, 1715], "min": [1716, 1717, 1718, 1719], "prod": [1720, 1721, 1722, 1723], "std": [1724, 1725, 1726, 1727], "sum": [1728, 1730, 1731, 1732], "static_sum": 1729, "var": [1733, 1735, 1736, 1737], "static_var": 1734, "all": [1739, 1740, 1741, 1742], "static_al": 1743, "ani": [1744, 1745, 1746, 1747], "static_ani": 1748, "glossari": 1749, "content": 1750, "overview": 1750, "quick": 1750, "start": 1750, "citat": 1750, "inspect": 1753, "add_array_spec": 1754, "fn_array_spec": 1755, "relat": 1756, "infrastructur": [1758, 1766], "llvm": 1758, "mlir": 1758, "oneapi": 1758, "exchang": [1759, 1766], "onnx": 1759, "nnef": 1759, "coreml": 1759, "matlab": 1760, "scipi": 1760, "torch": [1760, 1761], "scikit": 1760, "learn": 1760, "theano": 1760, "panda": 1760, "julia": 1760, "apach": [1760, 1763], "spark": 1760, "mllib": 1760, "caff": 1760, "chainer": 1760, "tensorflow": 1760, "1": 1760, "mxnet": 1760, "cntk": 1760, "pytorch": 1760, "flux": 1760, "jax": 1760, "2": 1760, "dex": 1760, "languag": 1760, "tracer": [1761, 1766], "tf": 1761, "jaxpr": 1761, "jit": 1761, "fx": 1761, "compani": [1762, 1766], "quansight": 1762, "modular": 1762, "octoml": 1762, "multi": [1763, 1766], "vendor": [1763, 1764, 1765, 1766], "tvm": 1763, "xla": 1763, "gcc": 1763, "specif": [1764, 1765, 1766], "tensorrt": 1764, "cuda": 1764, "icc": 1765, "icx": 1765, "nvcc": 1765, "doe": 1766, "eagerpi": 1767, "kera": 1767, "thinc": 1767, "tensorli": 1767, "neuropod": 1767, "geglu": 1770, "to_ivy_modul": 1773, "firstlayersiren": 1776, "glorotuniform": 1777, "kaimingnorm": 1779, "Ones": 1780, "siren": 1781, "uniform": 1782, "conv1dtranspos": 1786, "conv2dtranspos": 1788, "conv3dtranspos": 1790, "depthwiseconv2d": 1791, "lstm": 1793, "multiheadattent": 1795, "newtorchmodul": 1798, "layernorm": 1800, "adam": 1802, "lamb": 1803, "lar": 1804, "sgd": 1806, "sequenti": [1807, 1808], "verbos": 1810, "cprint": 1811}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})